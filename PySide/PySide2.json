{
    "QtCore": {
        "QDirIterator": {
            "description": "The `QDirIterator` class provides an iterator for directory entrylists. ",
            "link": "https://doc.qt.io/qtforpython/PySide2/QtCore/QDirIterator.html",
            "constructor": {
                "func": [
                    "QDirIterator(dir[, flags=QDirIterator.NoIteratorFlags])\u00b6",
                    "QDirIterator(path, filter[, flags=QDirIterator.NoIteratorFlags])",
                    "QDirIterator(path[, flags=QDirIterator.NoIteratorFlags])",
                    "QDirIterator(path, nameFilters[, filters=QDir.NoFilter[, flags=QDirIterator.NoIteratorFlags]])"
                ],
                "param_list": [
                    "filter              `Filters`",
                    "dir                 `QDir`",
                    "path                unicode",
                    "nameFilters         list of strings",
                    "filters             `Filters`",
                    "flags               `IteratorFlags`"
                ],
                "instruction": "Constructs a `QDirIterator` that can iterate over `path` , with no name\nfiltering and `filters` for entry filtering. You can pass options via `flags`\nto decide how the directory should be iterated.\n\nBy default, `filters` is `NoFilter` , and `flags` is `NoIteratorFlags` , which\nprovides the same behavior as in `entryList()` .\n\n> To list symlinks that point to non existing files, `System` must be passed\nto the flags.\n\nConstructs a `QDirIterator` that can iterate over `path` , using `nameFilters`\nand `filters` . You can pass options via `flags` to decide how the directory\nshould be iterated.\n\nBy default, `flags` is `NoIteratorFlags` , which provides the same behavior as\n`entryList()` .\n\n> To list symlinks that point to non existing files, `System` must be passed\nto the flags."
            },
            "attribute": [
                {
                    "attr_name": "PySide2.QtCore.QDirIterator.IteratorFlag\u00b6",
                    "description": "\n\nThis enum describes flags that you can combine to configure the behavior of\n`QDirIterator` .\n\n",
                    "flag_list": [
                        "QDirIterator.NoIteratorFlags    The default value, representing no flags. The iterator will return entries for the assigned path.",
                        "QDirIterator.Subdirectories    List entries inside all subdirectories as well.",
                        "QDirIterator.FollowSymlinks    When combined with Subdirectories, this flag enables iterating through all subdirectories of the assigned path, following all symbolic links. Symbolic link loops (e.g., \u201clink\u201d => \u201c.\u201d or \u201clink\u201d => \u201c..\u201d) are automatically detected and ignored."
                    ]
                }
            ],
            "method": [
                {
                    "method_name": "fileInfo",
                    "method_long_name": "PySide2.QtCore.QDirIterator.fileInfo()\u00b6",
                    "description": "Returns a `QFileInfo` for the current directory entry.",
                    "returns": "`QFileInfo`"
                },
                {
                    "method_name": "fileName",
                    "method_long_name": "PySide2.QtCore.QDirIterator.fileName()\u00b6",
                    "description": "Returns the file name for the current directory entry, without the path\nprepended.\n\nThis function is convenient when iterating a single directory. When using the\n`Subdirectories` flag, you can use `filePath()` to get the full path.",
                    "returns": "unicode"
                },
                {
                    "method_name": "filePath",
                    "method_long_name": "PySide2.QtCore.QDirIterator.filePath()\u00b6",
                    "description": "Returns the full file path for the current directory entry.",
                    "returns": "unicode"
                },
                {
                    "method_name": "hasNext",
                    "method_long_name": "PySide2.QtCore.QDirIterator.hasNext()\u00b6",
                    "description": "Returns `true` if there is at least one more entry in the directory;\notherwise, false is returned.",
                    "returns": "`bool`"
                },
                {
                    "method_name": "next",
                    "method_long_name": "PySide2.QtCore.QDirIterator.next()\u00b6",
                    "description": "Advances the iterator to the next entry, and returns the file path of this new\nentry. If `hasNext()` returns `false` , this function does nothing, and\nreturns an empty `QString` .\n\nYou can call `fileName()` or `filePath()` to get the current entry file name\nor path, or `fileInfo()` to get a `QFileInfo` for the current entry.",
                    "returns": "unicode"
                },
                {
                    "method_name": "path",
                    "method_long_name": "PySide2.QtCore.QDirIterator.path()\u00b6",
                    "description": "Returns the base directory of the iterator.",
                    "returns": "unicode"
                }
            ]
        },
        "QMimeType": {
            "description": "The `QMimeType` class describes types of file or data, represented by a MIME type string. ",
            "link": "https://doc.qt.io/qtforpython/PySide2/QtCore/QMimeType.html",
            "constructor": {
                "func": [
                    "QMimeType\u00b6",
                    "QMimeType(other)"
                ],
                "param_list": [
                    "other               `QMimeType`"
                ],
                "instruction": "Constructs this `QMimeType` object initialized with default property values\nthat indicate an invalid MIME type."
            },
            "attribute": [],
            "method": [
                {
                    "method_name": "aliases",
                    "method_long_name": "PySide2.QtCore.QMimeType.aliases()\u00b6",
                    "description": "",
                    "returns": "list of strings"
                },
                {
                    "method_name": "allAncestors",
                    "method_long_name": "PySide2.QtCore.QMimeType.allAncestors()\u00b6",
                    "description": "",
                    "returns": "list of strings"
                },
                {
                    "method_name": "comment",
                    "method_long_name": "PySide2.QtCore.QMimeType.comment()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "filterString",
                    "method_long_name": "PySide2.QtCore.QMimeType.filterString()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "genericIconName",
                    "method_long_name": "PySide2.QtCore.QMimeType.genericIconName()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "globPatterns",
                    "method_long_name": "PySide2.QtCore.QMimeType.globPatterns()\u00b6",
                    "description": "",
                    "returns": "list of strings"
                },
                {
                    "method_name": "iconName",
                    "method_long_name": "PySide2.QtCore.QMimeType.iconName()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "inherits",
                    "method_long_name": "PySide2.QtCore.QMimeType.inherits(mimeTypeName)\u00b6",
                    "description": "Returns `true` if this mimetype is `mimeTypeName` , or inherits `mimeTypeName`\n(see `parentMimeTypes()` ), or `mimeTypeName` is an alias for this mimetype.\n\nThis method has been made invokable from QML since 5.10.",
                    "returns": "mimeTypeName \u2013 unicode"
                },
                {
                    "method_name": "isDefault",
                    "method_long_name": "PySide2.QtCore.QMimeType.isDefault()\u00b6",
                    "description": "",
                    "returns": "`bool`"
                },
                {
                    "method_name": "isValid",
                    "method_long_name": "PySide2.QtCore.QMimeType.isValid()\u00b6",
                    "description": "",
                    "returns": "`bool`"
                },
                {
                    "method_name": "name",
                    "method_long_name": "PySide2.QtCore.QMimeType.name()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "__ne__",
                    "method_long_name": "PySide2.QtCore.QMimeType.__ne__(other)\u00b6",
                    "description": "Returns `true` if `other` does not equal this `QMimeType` object, otherwise\nreturns `false` .",
                    "returns": "other \u2013 `QMimeType`"
                },
                {
                    "method_name": "__eq__",
                    "method_long_name": "PySide2.QtCore.QMimeType.__eq__(other)\u00b6",
                    "description": "Returns `true` if `other` equals this `QMimeType` object, otherwise returns\n`false` . The name is the unique identifier for a mimetype, so two mimetypes\nwith the same name, are equal.",
                    "returns": "other \u2013 `QMimeType`"
                },
                {
                    "method_name": "parentMimeTypes",
                    "method_long_name": "PySide2.QtCore.QMimeType.parentMimeTypes()\u00b6",
                    "description": "",
                    "returns": "list of strings"
                },
                {
                    "method_name": "preferredSuffix",
                    "method_long_name": "PySide2.QtCore.QMimeType.preferredSuffix()\u00b6",
                    "description": "",
                    "returns": "unicode"
                },
                {
                    "method_name": "suffixes",
                    "method_long_name": "PySide2.QtCore.QMimeType.suffixes()\u00b6",
                    "description": "",
                    "returns": "list of strings"
                },
                {
                    "method_name": "swap",
                    "method_long_name": "PySide2.QtCore.QMimeType.swap(other)\u00b6",
                    "description": "Swaps `QMimeType` `other` with this `QMimeType` object.\n\nThis operation is very fast and never fails.\n\nThe method helps with the implementation of assignment operators in an\nexception-safe way. For more information consult More C++ Idioms - Copy-and-\nswap.",
                    "returns": "other \u2013 `QMimeType`"
                }
            ]
        }
    }
}