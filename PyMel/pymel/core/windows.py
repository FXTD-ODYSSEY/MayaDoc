import exceptions

from pymel.core.uitypes import toPySideControl as toQtControl
from pymel.core.uitypes import toPySideObject as toQtObject
from pymel.core.uitypes import objectTypeUI
from pymel.core.system import Path as _Path
from pymel.internal.factories import Callback
from pymel.core.uitypes import toPySideLayout as toQtLayout
from pymel.internal.factories import CallbackWithArgs
from pymel.core.uitypes import toPySideWindow as toQtWindow
from pymel.core.uitypes import toPySideMenuItem as toQtMenuItem

class PopupError(exceptions.Exception):
    """
    Raise this exception in your scripts to cause a confirmDialog to be opened displaying the error message.
    After the user presses 'OK', the exception will be raised as normal. In batch mode the promptDialog is not opened.
    
    Parameters
    ----------
    msgOrException : str or Exception instance
        If a string, then the actual exception object returned / raised will
        be a PopupError instance, and the message displayed will be this arg;
        if an Exception instance, then the expection object returned / raised
        will be the given instance
    title : str
        title of the dialog
    button : str
        text on the confirm button of the dialog
    msg : str Or None
        If msgOrException was not an exception instance, this is ignored; if it
        is, then this controls what the displayed message is. If it is None,
        then the displayed message is the first arg of the exception instance,
        or the empty string if it has no args. If it is a string, then that will
        be the displayed message.
    icon : str
        icon to use for the confirm dialog (see confirmDialog docs for available
        icons)
    """
    
    
    
    def __init__(self, msg, *args, **kwargs):
        pass
    
    
    def __new__(cls, msgOrException, title="'Error'", button="'Ok'", msg='None', icon="'critical'"):
        pass
    
    
    __weakref__ = None



def contentBrowser(*args, **kwargs):
    """
    This command is used to edit and query a Content Browser. The Content Browser is a unique panel, so only one instance of
    it can exist at a given time. The optional argument is the name of the control.
    
    Flags:
      - addContentPath : acp           (unicode)       [edit]
          Adds the given path(s) to the libraries displayed on the Examples tab. Also updates the corresponding MAYA_CONTENT_PATH
          environment variable.
    
      - context : ctx                  (unicode, unicode, unicode) [edit]
          Sets the default location for the given context. The two optional arguments (Python only) are the category (tab) and
          location. To clear the content use empty strings for category and location.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - location : loc                 (unicode)       [edit]
          Switches to the Examples tab and selects the given library location.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - preview : pv                   (bool)          [edit]
          Shows / hides the preview panel. Note: this flag will not affect the currently opened Content Browser, but only any
          subsequently opened ones.
    
      - refreshTreeView : rtv          (bool)          [edit]
          Forces a refresh of the Examples tab tree view pane.
    
      - removeContentPath : rcp        (unicode)       [edit]
          Removes the given path(s) from the libraries displayed on the Examples tab. Also updates the corresponding
          MAYA_CONTENT_PATH environment variable.
    
      - saveCurrentContext : scc       (bool)          [edit]
          Saves the context for the current Content Browser tab.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - thumbnailView : th             (bool)          [edit]
          Shows / hides the thumbnail panel. Note: this flag will not affect the currently opened Content Browser, but only any
          subsequently opened ones.
    
      - treeView : tr                  (bool)          [edit]
          Shows / hides the tree view panel. Note: this flag will not affect the currently opened Content Browser, but only any
          subsequently opened ones.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.contentBrowser`
    """

    pass


def hudSliderButton(*args, **kwargs):
    """
    This command creates a Heads-up Display (HUD) slider button control which is placed in a 2D inactive overlay plane on
    the 3D viewport. It is to be used to provide hands-on interaction designated by a user script. The HUD slider button
    control is derived from a generic HUD object and thus inherits a similar workflow. Although this command provides much
    of the same functionality as the headsUpDisplay command, it does not provide headsUpDisplay layout controls such as
    layoutVisibility, nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality, please use the
    headsUpDisplay command. This command is focused solely around the creation and management of HUD slider button controls.
    Similarly, all operations performed by this command are limited to HUDs that are slider button controls. The only
    mandatory flags, on creation are the section and block flags. Like the headsUpDisplay command, upon creation of a HUD
    slider button, an ID number will be assigned to it. This can be used to remove the HUD slider via the headsUpDisplay
    command (-rid/removeID [int IDNumber]), if desired. Alternatively, the headsUpDisplay command can remove HUD objects via
    their position (section and block), or their unique name.
    
    Flags:
      - allowOverlap : ao              (bool)          [create,query,edit]
          Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag
          description for more details).
    
      - block : b                      (int)           [create,query,edit]
          Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column
          of blocks. The total number of blocks contained within each section is variable. The number of blocks that will be
          visible within each section is dependent on the size of blocks contained in each section and the current size of the
          window. Blocks begin enumerating from 0 and flexibly increase based on need. For HUD sliders, the format differs from
          that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify,
          padding, labelWidth, valueWidth) is shown below:
          __________________________________________________________________________ |     |     |      |           |      |
          |      |        |     |     | |  P  |  J  |  LW  |  Slider   |  IP  | Value |  IP  | Button |  J  |  P  |
          |_____|_____|______|___________|______|_______|______|________|_____|_____| P = Sub-block of width, padding J =
          Justification of the entire block LW = Sub-block of width, labelWidth Slider = Length of the slider SliderValue = Sub-
          block of width, valueWidth Button = Sub-block of width, buttonWidth IP = Internal Padding Block PositioningBlocks on the
          top section begin from the top edge of the main viewport, while the bottom section begins from the bottom edge. Blocks
          are dynamically removed from visibility from the midpoint of the viewport. So, a relatively large block number will not
          draw to the viewport. Lastly, there can be at most one HUD occupying a block at any time. Trying to position a HUD in an
          occupied block will result in an error. Keep this in mind when positioning the HUD.
    
      - blockAlignment : ba            (unicode)       [create,query,edit]
          Specifies the alignment of the block within its respective column. Available alignments are: center, leftand right. The
          default alignment is left.
    
      - blockSize : bs                 (unicode)       [create,query,edit]
          Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds
          to a 20, 35 or 50 pixel height, respectively.
    
      - buttonLabel : bl               (unicode)       [create,query,edit]
          Text label of the HUD button.
    
      - buttonLabelFontSize : bfs      (unicode)       [create,query,edit]
          Sets the font size of the button label. Available sizes are: small and large.
    
      - buttonPressCommand : bpc       (script)        [create,query,edit]
          Specifies the procedure or script to run during a button mouse click event.
    
      - buttonReleaseCommand : brc     (script)        [create,query,edit]
          Specifies the procedure or script to run during a button mouse release event.
    
      - buttonShape : bsh              (unicode)       [create,query,edit]
          Specifies the shape of the button. Available button shapes are: rectangleand roundRectangle. The first will draw a
          rectangular button, while the latter is a rectangle with rounded edges.
    
      - buttonWidth : bw               (int)           [create,query,edit]
          Specifies the width of the button.
    
      - decimalPrecision : dp          (int)           [create,query,edit]
          Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are
          1 to 8.
    
      - internalPadding : ip           (int)           [create,query,edit]
          Specifies the amount of padding between the internal elements of the HUD. For the hudSlider, this represents the padding
          between the slider bar and the slider value. The default padding is 10.
    
      - maxValue : max                 (float)         [create,query,edit]
          Specify the maximum value of the slider. Note:Although this flag takes in a FLOAT as an argument, if the HUD type is
          int, the value will be automatically converted internally to an integer.
    
      - minValue : min                 (float)         [create,query,edit]
          Specify the minimum value of the slider. Note:Although this flag takes in a FLOAT as an argument, if the HUD type is
          int, the value will be automatically converted internally to an integer.
    
      - padding : p                    (int)           [create,query,edit]
          Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
    
      - section : s                    (int)           [create,query,edit]
          Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows
          make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.
          ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |
          |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  |
          |    |    |    |    |    | |____|____|____|____|____|Each section is denoted by a number from 0 to 9 as illustrated
          above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1 To prevent
          HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility
          precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen
          space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically
          compensates for this by removing the sections of least priority. These sections are made invisible and a warning is
          issued to inform the user of the removal. This continues until only the section of highest priority remains. For each
          row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority,
          followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly
          Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well.
          The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two
          sections are of lowest priority. This means that as the viewport gradually decreases in width to the point where
          sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and
          finally section 4. A similar note is provided below for the block layout.
    
      - sliderDragCommand : sdc        (script)        [create,query,edit]
          Specifies the procedure or script to run during a slider mouse drag event.
    
      - sliderIncrement : si           (float)         [create,query,edit]
          Specify the number of increments along the slider. If not specified or set to 0 or less, the slider will be linearly
          even and continuous from minValue to maxValue. Note:Although this flag takes in a FLOAT as an argument, if the HUD type
          is int, the value will be automatically converted internally to an integer.
    
      - sliderLabel : sl               (unicode)       [create,query,edit]
          Text label of the HUD slider.
    
      - sliderLabelFontSize : sfs      (unicode)       [create,query,edit]
          Sets the font size of the slider label. Available sizes are: small and large.
    
      - sliderLabelWidth : slw         (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold the label. The contents of this textboxwill be left
          justified. If the width of the actual label exceeds the width of the textbox,the label will be truncated to fit within
          the dimensions of the textbox.(To see a layout of a block, see the description of the -block flag.)
    
      - sliderLength : sln             (int)           [create,query,edit]
          Specifies the length of the slider in pixels.
    
      - sliderPressCommand : spc       (script)        [create,query,edit]
          Specifies the procedure or script to run during a slider mouse click event.
    
      - sliderReleaseCommand : src     (script)        [create,query,edit]
          Specifies the procedure or script to run during a slider mouse release event.
    
      - type : t                       (unicode)       [create,query,edit]
          Specify the numeric type of the HUD. Available types are: floatand int.
    
      - value : v                      (float)         [create,query,edit]
          Set/Return the slider value if the HUD is a valid HUD slider. Note:Although this flag takes in a FLOAT as an argument,
          if the HUD type is int, the value will be automatically converted internally to an integer.
    
      - valueAlignment : va            (unicode)       [create,query,edit]
          Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: leftand
          right. The default alignment is left.
    
      - valueFontSize : vfs            (unicode)       [create,query,edit]
          Sets the font size of the slider value. Available sizes are: small and large.
    
      - valueWidth : vw                (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold the slider value. (To see a layout of a block, see the
          description of the -block flag.)
    
      - visible : vis                  (bool)          [create,query,edit]
          Sets the visibility of the Heads-Up Display on and off.                                    Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hudSliderButton`
    """

    pass


def toolCollection(*args, **kwargs):
    """
    This command creates a tool button collection. Collections are parented to the current default layout if no parent is
    specified with the -p/parent flag.  As children of the layout they will be deleted when the layout is deleted.
    Collections may also span more than one window if the -gl/global flag is used. In this case the collection has no parent
    and must be explicitly deleted with the 'deleteUI' command when it is no longer wanted.
    
    Flags:
      - collectionItemArray : cia      (bool)          [query]
          Returns a string list giving the long names of all the items in this collection.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - gl : gl                        (bool)          [create,query]
          Set the collection to have no parent layout.  This flag must be specified when the collection is created and can not be
          queried or edited.  Consequently, global collections must be explicitly deleted.
    
      - numberOfCollectionItems : nci  (bool)          [query]
          Returns the number of items that are in this collection.
    
      - parent : p                     (unicode)       [create]
          Specify the parent to associate the collection with.  The collection will be deleted along with the parent.  This flag
          must be specified when the collection is created and can not be edited.
    
      - select : sl                    (unicode)       [create,query,edit]
          Select the specified collection item.  If queried will return the name of the currently selected collection item.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.toolCollection`
    """

    pass


def iconTextButton(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates an iconTextButton that can be
    displayed with different icons, with or without accompanying text label. When an argument is passed, it is used to give
    a name to the iconTextButton.
    
    Flags:
      - actionIsSubstitute : ais       (bool)          []
    
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,query,edit]
          Command executed when the control is pressed.
    
      - commandRepeatable : rpt        (bool)          [create,query,edit]
          Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut
          to repeat the last executed command.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,query,edit]
          Command executed when the control is double clicked.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flat : fla                     (bool)          [create,query,edit]
          Sets whether the control will be a flat button (0 false, 1 true).
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - handleNodeDropCallback : hnd   (script)        [create,edit]
          Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped
          will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - highlightImage : hi            (unicode)       [create,query,edit]
          Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with
          the -i/imageflag. This is a Windows only flag.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelEditingCallback : lec     (script)        [create,edit]
          Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new
          label string will be passed to the callback.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - menuItem : mi                  (unicode, unicode) [create,edit]
          Creates menu items for this button by passing in arguments for the menu item label and command for each item.  These
          should be passed as strings: labelcommandfor each use of this flag in the command. May be used mutliple times
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - scaleIcon : sic                (bool)          [create,edit]
          For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the flag is specified, the icon will be
          scaled to the size of the control.
    
      - selectionImage : si            (unicode)       [create,query,edit]
          Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag.
          This is a Windows only flag.
    
      - sourceType : stp               (unicode)       [create,query,edit]
          Sets the language type for the command script. Can only be used in conjunction with the c/command or
          dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextButton`
    """

    pass


def pathButtonGrp(name='None', *args, **kwargs):
    pass


def currentParent():
    """
    shortcut for ``ui.PyUI(setParent(q=1))``
    """

    pass


def setFocus(*args, **kwargs):
    """
    Give keyboard focus to a specific control or panel, passed as an argument.
    
    
    Derived from mel command `maya.cmds.setFocus`
    """

    pass


def disableIncorrectNameWarning(*args, **kwargs):
    """
    Disable the warning dialog which complains about incorrect node names when opening Maya files.
    
    
    Derived from mel command `maya.cmds.disableIncorrectNameWarning`
    """

    pass


def messageLine(*args, **kwargs):
    """
    This command creates a message line where tool feedback is shown.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.messageLine`
    """

    pass


def workspaceControlState(*args, **kwargs):
    """
    Create or modify preferred window attributes for workspace controls. The size and position of a workspace control is
    retained during application sessions (although position only applies to workspace controls that are alone in a floating
    workspace docking panel). A default workspace control state is created when a workspace control is closed. Workspace
    control states must be named and, consequently, only affect the workspace control with a matching name. In query mode,
    return type is based on queried flag.
    
    Flags:
      - exists : ex                    (bool)          [create]
          Returns true|false depending upon whether the specified object exists. Other flags are ignored.
    
      - height : h                     (int)           [create,query,edit]
          Height of the window.
    
      - leftEdge : le                  (int)           [create,query,edit]
          Left edge position of the window.
    
      - maximized : max                (bool)          [create,query,edit]
          Maximize the window.
    
      - remove : r                     (bool)          [create]
          Remove a window preference.
    
      - topEdge : te                   (int)           [create,query,edit]
          Top edge position of the window.
    
      - topLeftCorner : tlc            (int, int)      [create,query,edit]
          Top and left edge position of the window.
    
      - width : w                      (int)           [create,query,edit]
          Width of the window.
    
      - widthHeight : wh               (int, int)      [create,query,edit]
          Width and height of the window.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspaceControlState`
    """

    pass


def windowPref(*args, **kwargs):
    """
    Create or modify preferred window attributes.  The size and position of a window is retained during and between
    application sessions.  A default window preference is created when a window is closed.  Window preferences must be named
    and, consequently, only affect the window with a matching name. Note that window preferences are not applied to the main
    Maya window nor the Command window. In query mode, return type is based on queried flag.
    
    Flags:
      - enableAll : ea                 (bool)          [create,query]
          Enable/disable all window preferences.  Preferences are enabled by default.  Set this flag to false and window's will
          ignore all preference values.
    
      - exists : ex                    (bool)          [create]
          Returns true|false depending upon whether the specified object exists. Other flags are ignored.
    
      - height : h                     (int)           [create,query,edit]
          Height of the window.
    
      - leftEdge : le                  (int)           [create,query,edit]
          Left edge position of the window.
    
      - loadAll : la                   (bool)          [create]
          Reads in file with window attributes from disk.
    
      - maximized : max                (bool)          [create,query,edit]
          Maximize the window.
    
      - parentMain : pm                (bool)          [create,query]
          Set whether window is parented to main application window. Windows only.
    
      - remove : r                     (bool)          [create]
          Remove a window preference.
    
      - removeAll : ra                 (bool)          [create]
          Remove all window preferences.
    
      - restoreMainWindowState : rms   (unicode)       [create]
          Reads in file with main window state (positions of toolbars and dock controls).
    
      - saveAll : sa                   (bool)          [create]
          Writes out file with window attributes.
    
      - saveMainWindowState : sms      (unicode)       [create]
          Writes out file with main window state (positions of toolbars and dock controls).
    
      - topEdge : te                   (int)           [create,query,edit]
          Top edge position of the window.
    
      - topLeftCorner : tlc            (int, int)      [create,query,edit]
          Top and left edge position of the window.
    
      - width : w                      (int)           [create,query,edit]
          Width of the window.
    
      - widthHeight : wh               (int, int)      [create,query,edit]
          Width and height of the window.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.windowPref`
    """

    pass


def linearPrecision(*args, **kwargs):
    """
    This command controls the display of linear strings in the interface. (See the linearField command). Setting this
    affects any linear strings displayed afterwards, formatting them so they will show at most the specified number of
    digits after the decimal point. Allowed values are 0 through 6. In query mode, return type is based on queried flag.
    
    
    Derived from mel command `maya.cmds.linearPrecision`
    """

    pass


def subMenuItem(*args, **kwargs):
    """
    shortcut for ``menuItem(subMenu=True)``
    """

    pass


def colorIndexSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a color slider group consisting of a label, a color canvas
    and a slider. The value of the slider defines a color index into the a color table. The corresponding color is displayed
    in the canvas.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the slider's value marker.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          Sets the string to be the text for the extra label.
    
      - forceDragRefresh : fdr         (bool)          []
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - invisible : inv                (int)           [create,query,edit]
          Set the invisible color index.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          Maximum color index.
    
      - minValue : min                 (int)           [create,query,edit]
          Minimum color index.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int)           [create,query,edit]
          Color index.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorIndexSliderGrp`
    """

    pass


def autoLayout(*args, **kwargs):
    """
    This command creates a form layout control. A form layout allows absolute and relative positioning of the controls that
    are its immediate children. Controls have four edges: top, left, bottom and right. There are only two directions that
    children can be positioned in, right-left and up-down. The attach flags take the direction of an attachment from the
    argument that names the edge to attach (the second argument). Any or all edges of a child may be attached. There are six
    ways to attach them: Attach to Form - Attaches an edge to the relevant side of the form layout. Thus -attachForm button3
    leftwill attach the left edge of the button to the left edge of the form.Attach to Opposite Side of Form - Attaches an
    edge relative to the furthest side of the form layout.Attach to Another Control - Attaches an edge to the closest edge
    of the other control named.Attach to Opposite Side of Another Control - Attaches an edge relative to the furthest side
    of another control.Attach to Position - Attaches an edge to a position on the form layout.  The position is given as a
    fixed fraction of the -nd/numDivisions value and as this value defaults to 100 it is easiest to think of it as a
    percentage of the form's size.Attach to Nothing - Attaches an edge to nothing. The size of the child control will
    determine this edge's position.Each edge attachment may have an offset that acts to separate controls visually. There is
    no default positioning relationship so to have children appear in the form they must have at least one edge attached in
    each direction. Note:In the flag definitions the arguments follow these rules: controlmust be the name of an immediate
    child of the form layout.edgemust be one of top, left, bottom, or right.positionmay range from 0 to the number of
    divisions as specified with the -nd/numberOfDivisions flag and gives the fraction of the width of the form as a
    measurement. This normally means 0-100 so  positionmay be thought of as a percentage.offsetis an integer value in
    pixels.These are multi-use flags so any number of attachments may be made in a single command. Note:Avoid making control
    attachments that form a loop in control dependencies. For example: window; string $form = `formLayout`; string $btn1 =
    `button`; string $btn2 = `button`; string $btn3 = `button`;formLayout -edit-attachControl $btn2 top2 $btn1-attachControl
    $btn3 top2 $btn2-attachControl $btn1 right2 $btn3 $form;showWindow; $btn2 is attached to $btn1, $btn3 is attached to
    $btn2, and $btn1 is attached to $btn3. Thus, the placement of $btn1 is dependent on the placement of $btn3, which is
    dependent on the placement of $btn2, which is dependent on the placement of $btn1. The last control attachment will have
    created a loop in the dependencies. To prevent runtime errors, Maya will ignore this attachment and instead issue a
    warning that a cyclical control attachment has been detected in the script.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attachControl : ac             (unicode, unicode, int, unicode) [create,edit]
          Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to
          another control.
    
      - attachForm : af                (unicode, unicode, int) [create,edit]
          Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach the specified control to
          the form, offset by the specified amount.
    
      - attachNone : an                (unicode, unicode) [create,edit]
          Arguments are: control, edge Valid edge values are: top| bottom| left| right. Attach a control to nothing.
    
      - attachOppositeControl : aoc    (unicode, unicode, int, unicode) [create,edit]
          Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to the
          opposite side of another control.
    
      - attachOppositeForm : aof       (unicode, unicode, int) [create,edit]
          Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach a control to the opposite
          side of the form.
    
      - attachPosition : ap            (unicode, unicode, int, int) [create,edit]
          Arguments are: control, edge, offset, position Valid edge values are: top| bottom| left| right. Attach a control to a
          position in the form.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfDivisions : nd         (int)           [create,query,edit]
          Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.formLayout`
    """

    pass


def swatchDisplayPort(*args, **kwargs):
    """
    This command creates a 3dPort that displays a swatch representing the shading node. The optional argument is the name of
    the 3dPort.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - borderColor : bc               (float, float, float) [create,query,edit]
          The border color of the swatch.
    
      - borderWidth : bw               (int)           [create,query,edit]
          The border width of the swatch.  The value will be clamped between 0 and 4.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressCommand : pc              (script)        [create,edit]
          Specifies the command to be run when the swatch is clicked on.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - renderPriority : rp            (int)           [create,edit]
          Specifies the priority to render the swatch. This flag can only be used in parallel swatch rendering. When more than one
          swatch are waiting in the render queue, this flag can be used to specify which one has the higher priority to be
          rendered. By default, the flag is set to 0 - low priority. The larger the number, the higher priority is used to render
          the swatch. Maya pre-defined the render priority for the swatch in Node Editor, Attribute Editor and Hypershade as
          below: 0: The lowest render priority. 1: The render priority for the swatch in Node Editor. 2: The render priority for
          the swatch in the working area of HyperShade 3: The render priority for the swatch in Attribute Editor. For example,
          when creating a display port in AE using the swatchDisplayPort command, option -rp 3is used.
    
      - renderSize : rs                (int)           [create,query,edit]
          The render size of the swatch.  The value will be clamped between 32 and 512.
    
      - shadingNode : sn               (PyNode)        [create,query,edit]
          Name of the shadingNode.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - widthHeight : wh               (int, int)      [create,edit]
          The width and height of the port.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.swatchDisplayPort`
    """

    pass


def progressWindow(*args, **kwargs):
    """
    The progressWindow command creates a window containing a status message, a graphical progress gauge, and optionally a
    Hit ESC to Cancellabel for interruptable operations. Only one progress window is allowed on screen at a time. While the
    window is visible, the busy cursor is shown.
    
    Flags:
      - endProgress : ep               (bool)          [create]
          Terminates the progress window. No other flags can be used at the same time. This is normally issued through MEL in
          response to the -ic/isCancelled flag being set or if the progress value reaches its maximum.
    
      - isCancelled : ic               (bool)          [query]
          Returns true if the user has tried to cancel the operation. Returns false otherwise.
    
      - isInterruptable : ii           (bool)          [create,query,edit]
          Returns true if the progress window should respond to attempts to cancel the operation. The cancel button is disabled if
          this is set to true.
    
      - maxValue : max                 (int)           [create,query,edit]
          The maximum or endingvalue of the progress indicator. If the progress value is greater than the -max/maxValue, the
          progress value will be set to the maximum. Default value is 100.
    
      - minValue : min                 (int)           [create,query,edit]
          The minimum or startingvalue of the progress indicator. If the progress value is less than the -min/minValue, the
          progress value will be set to the minimum. Default value is 0.
    
      - progress : pr                  (int)           [create,query,edit]
          The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to
          the minimum when the control is created.
    
      - status : st                    (unicode)       [create,query,edit]
          The status text appearing above the progress gauge.
    
      - step : s                       (int)           [edit]
          Increments the -pr/progress value by the amount specified.
    
      - title : t                      (unicode)       [create,query,edit]
          The window title.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.progressWindow`
    """

    pass


def exclusiveLightCheckBox(*args, **kwargs):
    """
    This command creates a checkBox that controls a light's exclusive non-exclusive status.  An exclusive light is one that
    is not hooked up to the default-light-list, thus it does not illuminate all objects be default.  However an exclusive
    light can be linked to an object.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       []
    
      - light : lt                     (PyNode)        [create]
          The light that is to be made exclusive/non-exclusive.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.exclusiveLightCheckBox`
    """

    pass


def getPanel(*args, **kwargs):
    """
    This command returns panel and panel configuration information.
    
    Modifications:
      - returns a Panel object for flags: (containing or underPointer or withFocus)
      - returns a list of Panel objects for flags: not typeOf
    
    Flags:
      - allConfigs : ac                (bool)          [create]
          Return the names of the all panel configuration in a string array.
    
      - allPanels : all                (bool)          [create]
          Return the names of all the panels in a string array.
    
      - allScriptedTypes : ast         (bool)          [create]
          Return the names of all types of scripted panels in a string array.
    
      - allTypes : at                  (bool)          [create]
          Return the names of all types of panels, except scripted types in a string array.
    
      - atPosition : ap                (int, int)      [create]
          Return the name of the panel which contains the specified screen coordinates. An empty string is returned if there is no
          panel at those coordinates.
    
      - configWithLabel : cwl          (unicode)       [create]
          Return the name of the panel configuration with the specified label text.
    
      - containing : c                 (unicode)       [create]
          Return the name of the panel containing the specified control. An empty string is returned if the specified control is
          not in any panel.
    
      - invisiblePanels : inv          (bool)          [create]
          Return the names of all the invisible panels in a string array.
    
      - scriptType : sty               (unicode)       [create]
          Return the names of all scripted panels of the specified type in a string array.
    
      - type : typ                     (unicode)       [create]
          Return the names of all panels of the specified type in a string array.
    
      - typeOf : to                    (unicode)       [create]
          Return the type of the specified panel.
    
      - underPointer : up              (bool)          [create]
          Return the name of the panel that the pointer is currently over. An empty string is returned if the pointer is not over
          any panel.
    
      - visiblePanels : vis            (bool)          [create]
          Return the names of all the visible panels in a string array.
    
      - withFocus : wf                 (bool)          [create]
          Return the name of the panel that currently has focus.  If no panel has focus then the last panel that had focus is
          returned.
    
      - withLabel : wl                 (unicode)       [create]
          Return the name of the panel with the specified label text.                  Flag can have multiple arguments, passed
          either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getPanel`
    """

    pass


def iconTextRadioCollection(*args, **kwargs):
    """
    This command creates a cluster for iconTextRadioButtons.  Clusters will be parented to the current default layout if no
    parent is specified with the -p/parent flag. As children of the layout they will be deleted when the layout is deleted.
    Clusters may also span more than one window if the -g/global flag is used. In this case the cluster has no parent so
    must be explicitly deleted with the 'deleteUI' command.
    
    Flags:
      - collectionItemArray : cia      (bool)          [query]
          Returns a string list giving the long names of all the items in this collection.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disableCommands : dcm          (bool)          [edit]
          Allows a particular iconTextRadioButton in the collection to be selected without invoking the commands attached to the
          -cc/changeCommand, -onc/onCommand, or -ofc/offCommand flags. This flag is only meaningful when used in conjuction with
          the -edit and -select flags.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - gl : gl                        (bool)          [create,query]
          Set the collection to have no parent layout.  If the collection has a parent layout then it will be deleted with that
          layout, otherwise if it is specified to be global it must be explicitly deleted.
    
      - numberOfCollectionItems : nci  (bool)          [query]
          Returns the number of items that are in this collection.
    
      - parent : p                     (unicode)       [create]
          Set the specified layout to be the parent layout of the cluster.
    
      - select : sl                    (unicode)       [create,query,edit]
          Select the specified collection item.  If queried will return the name of the currently selected collection item.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextRadioCollection`
    """

    pass


def hudButton(*args, **kwargs):
    """
    This command creates a Heads-up Display (HUD) button control which is placed in a 2D inactive overlay plane on the 3D
    viewport. It is to be used to provide hands-on interaction designated by a user script. The HUD button is derived from a
    generic HUD object and thus inherits a similar workflow. Although this command provides much of the same functionality
    as the headsUpDisplay command, it does not provide headsUpDisplay layout controls such as layoutVisibility,
    nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality, please use the headsUpDisplay
    command. This command is focused solely around the creation and management of HUD button controls. Similarly, all
    operations performed by this command are limited to HUDs that are button controls. The only mandatory flags, on creation
    are the section and block flags. Like the headsUpDisplay command, upon creation of a HUD button, an ID number will be
    assigned to it. This can be used to remove the HUD via the headsUpDisplay command (-rid/removeID [int IDNumber]), if
    desired. Alternatively, the headsUpDisplay command can remove HUD objects via their position (section and block), or
    their unique name.
    
    Flags:
      - allowOverlap : ao              (bool)          [create,query,edit]
          Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag
          description for more details).
    
      - block : b                      (int)           [create,query,edit]
          Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column
          of blocks. The total number of blocks contained within each section is variable. The number of blocks that will be
          visible within each section is dependent on the size of blocks contained in each section and the current size of the
          window. Blocks begin enumerating from 0 and flexibly increase based on need. For HUD buttons, the format differs from
          that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify,
          padding, buttonWidth) is shown below: __________________________________ |     |     |          |     |     | |  P  |  J
          |  Button  |  J  |  P  | |_____|_____|__________|_____|_____| P = Sub-block of width, padding J = Justification of the
          entire block Button = Sub-block of width, buttonWidth Block PositioningBlocks on the top section begin from the top edge
          of the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from
          visibility from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport. Lastly,
          there can be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in
          an error. Keep this in mind when positioning the HUD.
    
      - blockAlignment : ba            (unicode)       [create,query,edit]
          Specifies the alignment of the block within its respective column. Available alignments are: center, leftand right. The
          default alignment is left.
    
      - blockSize : bs                 (unicode)       [create,query,edit]
          Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds
          to a 20, 35 or 50 pixel height, respectively.
    
      - buttonShape : bsh              (unicode)       [create,query,edit]
          Specifies the shape of the button. Available button shapes are: rectangleand roundRectangle. The first will draw a
          rectangular button, while the latter is a rectangle with rounded edges.
    
      - buttonWidth : bw               (int)           [create,query,edit]
          Specifies the width of the button.
    
      - label : l                      (unicode)       [create,query,edit]
          Text label of the HUD button.
    
      - labelFontSize : lfs            (unicode)       [create,query,edit]
          Sets the font size of the label. Available sizes are: small and large.
    
      - padding : p                    (int)           [create,query,edit]
          Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
    
      - pressCommand : pc              (script)        [create,query,edit]
          Specifies the procedure or script to run during a mouse click event.
    
      - releaseCommand : rc            (script)        [create,query,edit]
          Specifies the procedure or script to run during a mouse release event.
    
      - section : s                    (int)           [create,query,edit]
          Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows
          make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.
          ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |
          |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  |
          |    |    |    |    |    | |____|____|____|____|____|Each section is denoted by a number from 0 to 9 as illustrated
          above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1 To prevent
          HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility
          precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen
          space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically
          compensates for this by removing the sections of least priority. These sections are made invisible and a warning is
          issued to inform the user of the removal. This continues until only the section of highest priority remains. For each
          row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority,
          followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly
          Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well.
          The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two
          sections are of lowest priority. This means that as the viewport gradually decreases in width to the point where
          sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and
          finally section 4. A similar note is provided below for the block layout.
    
      - visible : vis                  (bool)          [create,query,edit]
          Sets the visibility of the Heads-Up Display on and off.                                    Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hudButton`
    """

    pass


def nodeOutliner(*args, **kwargs):
    """
    The nodeOutliner command creates, edits and queries an outline control that shows dependency nodes and their attributes.
    Compound attributes are further expandable to show their children. Additional configure flags allow multi selection,
    customizable commands to issue upon selection, and showing connections (and connectability) to a single input attribute.
    There are also the abilities to add/remove/replace nodes through the command line interface, and drag/add. In some
    configurations, dragging a connected attribute of a node will load the node at the other end of the connection. There is
    a right mouse button menu and a flag to attach a command to it. The menu is used to list the specific connections of a
    connected attribute. Clicking over any spot but the row of a connected attribute will show an empty menu. By default,
    there is no command attached to the menu. In query mode, return type is based on queried flag.
    
    Flags:
      - addCommand : ac                (script)        [create,query,edit]
          Command executed when the node outliner adds something. String commands use substitution of the term %node for whatever
          is added, eg, if you want to print the object added, the command should be print(\%node \\n\.  Callable python objects
          are passed the node name.
    
      - addObject : a                  (PyNode)        [edit]
          add the given object to the display
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attrAlphaOrder : aao           (unicode)       [create,query,edit]
          Specify how attributes are to be sorted.  Current recognised values are defaultfor no sorting and ascendto sort
          attributes from 'a' to ''z' and descendto sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - connectivity : c               (PyNode)        [query,edit]
          Takes an attribute argument (nodeName.attributeName), dims any attributes that can't connect to the given, and
          highlights any attributes already connected
    
      - currentSelection : cs          (bool)          [query]
          Retruns a string array containing what is currently selected
    
      - dc : dc                        (callable)      []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - lastClickedNode : lcn          (bool)          []
    
      - lastMenuChoice : lmc           (unicode)       [query]
          Returns the text of the most recent menu selection.
    
      - longNames : ln                 (bool)          [query,edit]
          Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the
          niceNamesflag is set.  Default is short names. Queried, returns a boolean.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - menuCommand : mc               (script)        [edit]
          Attaches the given command to each item in the popup menu.
    
      - menuMultiOption : mmo          (bool)          [query,edit]
          Sets whether a menu option labelled next availablewill appear as the first option on any multi-attribute's right mouse
          button menu.  Defaults to True.
    
      - multiSelect : ms               (bool)          [query,edit]
          Allow multiSelect; more than one thing to be selected at a time
    
      - niceNames : nn                 (bool)          [query,edit]
          Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the
          longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the
          longNames flag. Default is on. Queried, returns a boolean.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - noConnectivity : nc            (bool)          [edit]
          Reset the node outliner to not show any connectivity, ie, redraw all rows normally.
    
      - nodesDisplayed : nd            (bool)          [query]
          Returns a string array containing the list of nodes showing in the node Outliner
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressHighlightsUnconnected : phu (bool)          [query,edit]
          Sets whether clicking on an unconnected plug will select it or not.  Default is True.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - redraw : r                     (bool)          []
    
      - redrawRow : rr                 (bool)          []
    
      - remove : rm                    (unicode)       [edit]
          remove the given object from the display
    
      - removeAll : rma                (bool)          [edit]
          remove all objects from the display
    
      - replace : rpl                  (PyNode)        [query,edit]
          replace what's displayed with the given objects
    
      - selectCommand : sc             (script)        [query,edit]
          Command issued by selecting.  Different from the cflag in that this command will only be issued if something is
          selected.
    
      - showConnectedOnly : sco        (bool)          [query,edit]
          show (true) or hide (false) only attributes that are connected matching input/output criteria
    
      - showHidden : sh                (bool)          [query,edit]
          show (true) or hide (false) UI invisible attributes that match the input/output criteria
    
      - showInputs : si                (bool)          [query,edit]
          show only UI visible attributes that can be connected to
    
      - showNonConnectable : snc       (bool)          [query,edit]
          show (true) or hide (false) non connectable attributes that match the input/output criteria
    
      - showNonKeyable : snk           (bool)          [query,edit]
          show (true) or hide (false) non keyframeable (animatable) attributes that match the input/output criteria
    
      - showOutputs : so               (bool)          [query,edit]
          show only UI visible attributes that can be connected from
    
      - showPublished : sp             (bool)          [query,edit]
          Show only published attributes for an asset or a member of an asset. This flag is ignored on nodes not related to
          assets.
    
      - showReadOnly : sro             (bool)          [query,edit]
          show only read only attributes attributes that can be connected from
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nodeOutliner`
    """

    pass


def saveAllShelves(*args, **kwargs):
    """
    This command writes all shelves that are immediate children of the specified control layout to the prefs directory.
    
    
    Derived from mel command `maya.cmds.saveAllShelves`
    """

    pass


def minimizeApp(*args, **kwargs):
    """
    This command minimizes (iconifies) all of the application's windows into a single desktop icon.  To restore the
    application click on the desktop icon.
    
    
    Derived from mel command `maya.cmds.minimizeApp`
    """

    pass


def refreshEditorTemplates(*args, **kwargs):
    """
    This command refreshes all cached attribute editor templates, including those copied from the standard AE. These are the
    templates constructed internally on a per node type basis. This is useful if attribute elements have changed and the
    templates need to be re-evaluated accordingly.
    
    
    Derived from mel command `maya.cmds.refreshEditorTemplates`
    """

    pass


def menuSet(*args, **kwargs):
    """
    Create a menu set which is used to logically order menus for display in the main menu bar.  Such menu sets can be edited
    and reordered dynamically.
    
    Flags:
      - addMenu : am                   (unicode)       [create]
          Appends a menu onto the end of the current menu set.
    
      - allMenuSets : ams              (bool)          [query]
          Returns an array of the all the menu set object names in use.  Query returns string array.
    
      - currentMenuSet : cms           (unicode)       [create,query]
          The currently active menu set under which all operations affect (append, insert, remove, etc.).  Query returns string.
    
      - exists : ex                    (unicode)       [query]
          Returns whether the specified menu set exists.  This query flag supports string arguments. ie. menuSet -q -exists
          animationMenuSet;
    
      - hotBoxVisible : hbv            (bool)          [create,query,edit]
          Whether this menu set should be displayed in the hotbox as well as in the main menubar.
    
      - insertMenu : im                (unicode, int)  [create]
          Inserts a menu into a specified index in the current menu set.
    
      - label : l                      (unicode)       [create,query]
          The label of the current menu set.  Query returns string.
    
      - menuArray : ma                 (<type 'unicode'>, ...) [create,query]
          An array of menu names (strings) in the current menu set.  Query returns string array.
    
      - moveMenu : mm                  (unicode, int)  [create]
          Moves a specified menu from the current menu set to a new position.
    
      - moveMenuSet : mms              (unicode, int)  [create]
          Moves a specified menu set to another index.
    
      - numberOfMenuSets : nms         (bool)          [query]
          Number of menuSets in total.  Query returns int.
    
      - numberOfMenus : nm             (bool)          [query]
          The mumber of menus in the current menu set.  Query returns int.
    
      - permanent : p                  (bool)          [create,query,edit]
          Whether this menu set can be removed.
    
      - removeMenu : rm                (unicode)       [create]
          Removes a specified menu from the current menu set.
    
      - removeMenuSet : rms            (unicode)       [create]
          Removes the specified menu set object from the list of all menu sets.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuSet`
    """

    pass


def connectControl(*args, **kwargs):
    """
    This command attaches a UI widget, specified as the first argument, to one or more dependency node attributes. The
    attributes/nodes don't have to exist yet, they will get looked up as needed. With no flag specified, this command works
    on these kinds of controls: floatField, floatScrollBar, floatSlider, intField, intScrollBar, intSlider, floatFieldGrp,
    intFieldGrp, checkBox, radioCollection, and optionMenu. With the indexflag, It will also work on the individual
    components of all other groups. This command sets up a two-way connectionbetween the control and the (first-specified)
    attribute. If this first attribute is changed in any way, the control will be appropriately updated to match its value.
    Summary: if you change the control, ALL the connected attributes change. If you change the FIRST attribute attached to
    the control, then the control will change. NOTE: the two-way connection will not be established if the attributes do not
    exist when the connectControlcommand is run. If the user later uses the control, the connection will be established at
    that time. To effectively use connectControlwith radioCollections and optionMenus, you must attach a piece of data to
    each radioButton and menuItem. This piece of data (an integer) can be attached using the dataflag in the radioButtonand
    menuItemcommands. When the button/item is selected, the attribute will be set to the value of its data. When the
    attribute is changed, the collection (or optionMenu) will switch to the item that matches the new attribute value. If no
    item matches, it will be left unchanged. There are some specialized controls that have connection capability (and more)
    built right into them. See attrFieldSliderGrp, attrFieldGrp, and attrColorSliderGrp. Using these classes can be easier
    than using connectControl.
    
    Flags:
      - fileName : fi                  (bool)          [create]
          This flag causes the connection to be treated as a filename, and the conversion from internal to external filename
          representation is made as the data is copied. This only applies to connections to Tfield controls.
    
      - index : index                  (int)           [create]
          This flag enables you to pick out a sub-control from a group that contains a number of different controls. For example,
          you can connect one field of a floatFieldGrp.  You must count each member of the group, including any text labels that
          may exist.  For example, if you have a check box group with a label, the label will count as index 1, and the first
          check box as index 2.  (Indices are 1-based)
    
      - preventContextualMenu : pcm    (bool)          [create]
          If true, this flag will block the right mouse button menu of the associated control attribute.
    
      - preventOverride : po           (bool)          [create]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.connectControl`
    """

    pass


def panel(*args, **kwargs):
    """
    This command allows editing or querying properties of any panels. Not all of the common properites of panels can be used
    with this command. Flags such as -tearOff and -replacePanel require that you use the explicit panel command. The command
    'getPanel -typeOf panelName' will return the explicit type of a panel. In query mode, return type is based on queried
    flag.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.panel`
    """

    pass


def attrControlGrp(*args, **kwargs):
    """
    This command creates a control of the type most appropriate for the specified attribute, and associates the control with
    the attribute. Any change to the control will cause a change in the attribute value, and any change to the attribute
    value will be reflected in the control. Not all attribute types are supported.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Sets or queries the annotation value of the control group.
    
      - attribute : a                  (PyNode)        [create,query,edit]
          Sets or queries the attribute the control represents. The name of the attribute must be fully specified, including the
          name of the node. Some types of attributes are not supported, but most commonly used attribute types are.
    
      - changeCommand : cc             (script)        [create,query,edit]
          Sets or queries the change command of the control group. The change command will be executed when the control is used to
          change the value of the attribute.
    
      - enable : en                    (bool)          [create,query,edit]
          Sets or queries the enable state of the control group. The control is dimmed if the enable state is set to false.
    
      - handlesAttribute : ha          (PyNode)        [query,edit]
          Returns true or false as to whether this command can create a control for the specified attribute.
    
      - hideMapButton : hmb            (bool)          [create,query,edit]
          Force the map button to remain hidden for this control.
    
      - label : l                      (unicode)       [create,query,edit]
          Sets or queries the label of the control group.
    
      - preventOverride : po           (bool)          [create,query,edit]
          Sets or queries the prevent adjustment state of the control group. If true, the RMB menu for the control will not allow
          adjustments to be made.                                    Flag can have multiple arguments, passed either as a tuple or
          a list.
    
    
    Derived from mel command `maya.cmds.attrControlGrp`
    """

    pass


def saveShelf(*args, **kwargs):
    """
    This command saves the specified shelf (first argument) to the specified file (second argument). Note that this command
    doesn't work well with controls that have mixed mel and python command callbacks.  Also, because it saves the state to a
    mel file, it does not work with callbacks that are python callable objects.
    
    
    Derived from mel command `maya.cmds.saveShelf`
    """

    pass


def promptBoxGenerator(*args, **kwargs):
    """
    Keep prompting for values until cancelled
    """

    pass


def defaultLightListCheckBox(*args, **kwargs):
    """
    This command creates a checkBox that controls whether a shadingGroup is connected/disconnected from the
    defaultLightList.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       []
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - shadingGroup : sg              (PyNode)        [create,edit]
          The shading group that is to be connected/disconnected from the defaultLightList.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.defaultLightListCheckBox`
    """

    pass


def promptBox(title, message, okText, cancelText, **kwargs):
    """
    Prompt for a value. Returns the string value or None if cancelled
    """

    pass


def menu(*args, **kwargs):
    """
    This command creates a new menu and adds it to the default window's menubar if no parent is specified.  The menu can be
    enabled/disabled. Note that this command may also be used on menu objects created using the command menuItem -sm/subMenu
    true.
    
    Modifications
      - added ability to query parent
    
    Flags:
      - allowOptionBoxes : aob         (bool)          [create,query]
          Deprecated. All menus now always allow option boxes. Indicate whether the menu will be able to support option box menu
          items.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteAllItems : dai           (bool)          [create,edit]
          Delete all the items in this menu.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the menu.
    
      - enable : en                    (bool)          [create,query,edit]
          Enables/disables the menu.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - familyImage : fi               (unicode)       [create,query,edit]
          The filename of the icon associated with the menu. This icon will be used if a menu item does not have an icon image
          defined.
    
      - helpMenu : hm                  (bool)          [create,query,edit]
          Indicates that this menu is the help menu and will be the right most menu in the menu bar. On Unix systems the help menu
          is also right justified in the menu bar.
    
      - itemArray : ia                 (bool)          [query]
          Return string array of the menu item names.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that is displayed for the menu.  If no label is supplied then the menuName will be used.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only
          accepts major version numbers (e.g. 2014.5 should be given as 2014).
    
      - mnemonic : mn                  (unicode)       [create,query,edit]
          Set the Alt key to post that menu.  The character specified must match the case of its corresponding character in the
          menu item text, but selection from the keyboard is case insensitive.
    
      - numberOfItems : ni             (bool)          [query]
          Return number of items in the menu.
    
      - parent : p                     (unicode)       [create]
          Specify the window that the menu will appear in.
    
      - postMenuCommand : pmc          (script)        [create,edit]
          Specify a script to be executed when the menu is about to be shown.
    
      - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
          Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis
          invoked every time the menu is shown.
    
      - tearOff : to                   (bool)          [create]
          Makes the menu tear-off-able.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this menu feature was introduced. The argument should be given as a string of the version
          number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          Shows/hides the menu.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menu`
    """

    pass


def cmdShell(*args, **kwargs):
    """
    This command creates a scrolling field that behaves similar to a unix shell for entering user input.  You may specify
    the number of lines that will be remembered by the field with the -nsl/numberOfSavedLines flag.  The default number of
    lines saved is 100.  The shellField also maintains a command history buffer. You can specify the number of input lines
    that will be saved with the -hlc/historyLineCount flag.  The default size of this buffer is 10.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - clear : cl                     (bool)          [create]
          Erases all visible text, and also deletes any text that had scrolled of the top of the field.  After clearing the field
          it will be blank, and you will not be able to scroll up to see previous lines.  This flag does not affect the command
          history buffer, however.
    
      - command : c                    (unicode)       []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfHistoryLines : nhl     (int)           [create,query,edit]
          The number of input lines to be saved in the command history buffer.  You can cycle through this buffer by pressing the
          up and down arrow keys.  Valid values are 0 through 32767.  Any value less than 0 will be handled as if 0 was specified.
          Similarly, any value greater than 32767 will be handled as if 32767 was specified.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfSavedLines : nsl       (int)           [create,query,edit]
          The total number of lines (the scrolled lines and currently visible lines) that will be remembered by the field. Any
          lines beyond this number will be lost, and the user will not be able to review them by scrolling.  Valid values are 1
          through 32767.  Any value less than 1 will be handled as if 1 was specified.  Similarly, any value greater than 32767
          will be handled as if 32767 was specified.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - prompt : pr                    (unicode)       [create,query,edit]
          The text that is used as a prompt.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cmdShell`
    """

    pass


def radioButton(*args, **kwargs):
    """
    This command creates a radio button that is added to the most recently created radio collection if the
    -cl/collectionflag is not used.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          This flag is obsolete and should no longer be used. The radio button label will always be left-aligned.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the radio button's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the radio button from
          inside the callback, or use onCommand and offCommand as separate callbacks.
    
      - collection : cl                (unicode)       [create]
          To explicitly add a radio button to a collection of radio buttons specify the name of the radio collection.
    
      - data : da                      (int)           [create,query,edit]
          Internal data associated with the radio button.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the radio button.  By default, this flag is set to true and the radio button value may be changed by
          clicking on it.  If false then the radio button is 'read only' and can not be clicked on. The value of the radio button
          can always be changed with the -sl/selectflag regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.  The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,edit]
          Command executed when the radio button is turned off.
    
      - onCommand : onc                (script)        [create,edit]
          Command executed when the radio button is turned on.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - recomputeSize : rs             (bool)          [create,query,edit]
          If true then the control will recompute it's size to just fit the size of the label.  If false then the control size
          will remain fixed as you change the size of the label.  The default value of this flag is true.
    
      - select : sl                    (bool)          [create,query,edit]
          Select the radio button.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.radioButton`
    """

    pass


def treeView(*args, **kwargs):
    """
    This command creates a custom control.
    
    Flags:
      - addItem : ai                   (unicode, unicode) [create,edit]
          Adds a tree view item to the tree view. First argument specifies the item's name, second argument specifies the item's
          parent (use an empty string to have it at the top level of the tree)
    
      - allowDragAndDrop : adr         (bool)          [create,query,edit]
          Allow the user to perform drag and drop of treeView items.  If enabled, re-ordering / re-parenting operations can be
          perfomed with the middle mouse button. This flag takes precendence over other drag and drop related flags. Defaults to
          true.
    
      - allowHiddenParents : ahp       (bool)          [create,query,edit]
          If not cleared(default), the treeView will make parent nodes of visible nodes automatically visible
    
      - allowMultiSelection : ams      (bool)          [create,query,edit]
          Specify multi or single selection mode. Allow the user to perform multiple selection by holding ctrl or shift key while
          selecting items of treeView items. Defaults to true.
    
      - allowReparenting : arp         (bool)          [create,query,edit]
          Allow the user to reparent items in the tree view using the middle mouse button. Defaults to true. If false, user can
          still reorder items within a group using the middle mouse button.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attachButtonRight : abr        (int)           [create,edit]
          Sets tree view item's buttons to appear on the right or left. Argument specifies if they are to be attached to the
          right, if it is set to false they will attach on the left.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - borderHighlite : bh            (unicode, bool) [create,edit]
          Sets an item's border as highlit or not. First Argument specifies item, second argument specifies on or off.
    
      - borderHighliteColor : bcl      (unicode, float, float, float) [create,edit]
          Sets the color an item's border highlite will turn when highlite is enabled. first parameter specifies layer three float
          values specify RGB values, between 0 and 1.
    
      - buttonErase : bef              (bool)          [create,query,edit]
          If buttonErase was set true , then even if the button of the treeView item  is set invisible , the treeView will still
          erase the buttonRect of this treeView item with background . First argument is the item name  , second argument is
          whether buttonErase was set true or false
    
      - buttonState : bst              (unicode, int, unicode) [create,edit]
          Sets the state of a button. First argument specifies the layer, second argument specifies which button, third argument
          specifies the state Possible states: buttonUp- button is up buttonDown- button is down buttonThirdState- button is in
          state three (used by the 3StateButtonbutton style)
    
      - buttonStyle : bs               (unicode, int, unicode) [create,edit]
          Sets the type of button, used to indicate possible states and if the button is reset upon release. First argument
          specifies the layer, second argument specifies which button, third argument specifies the type of button Possible button
          types: pushButton- two possible states, button is reset to up upon release 2StateButton- two possible states, button
          changes state on click 3StateButton- three button states, button changes state on click
    
      - buttonTextIcon : bti           (unicode, int, unicode) [create,edit]
          Sets a one letter text to use as the icon to use for a specific button on a specific item. First argument specifies the
          item, second argument specifies the button, third argument specifies the icon text.
    
      - buttonTooltip : btp            (unicode, int, unicode) [create,edit]
          Sets a tooltip for specific button on a specific item. First argument specifies the item, second argument specifies the
          button, third argument specifies the tooltip.
    
      - buttonTransparencyColor : btc  (unicode, int, float, float, float) [create,edit]
          Sets the background color of a button that will be used if buttonTransparencyOverride is enabled. First argument
          specifies item, second argument specifies button, three floats specify RGB values, between 0 and 1.
    
      - buttonTransparencyOverride : bto (unicode, int, bool) [create,edit]
          Sets a button's background as being overridden or not. First argument specifies item, second argument specifies button,
          third argument specifies overridden or not.
    
      - buttonVisible : bvf            (unicode, int, bool) [create]
          Sets a button as visible or not. First Argument specifies item. Second Argument specifies a button. Third Argument
          specifies visible or not.
    
      - children : ch                  (unicode)       [query]
          Query the children of an item. If the argument is null, all items will be returned.
    
      - clearSelection : cs            (bool)          [create,edit]
          Clears all selected items.
    
      - contextMenuCommand : cmc       (script)        [create,edit]
          Set the callback function to be invoked just before any attached context menu is shown. This can be used as a
          replacement to, or in addition to the postMenuCommand flag on the popupMenu command. The function should accept a string
          which will be the item that was clicked on (empty if no item was hit). The function should return true if the menu
          should be shown, false otherwise.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - displayLabel : dl              (unicode, unicode) [create,edit]
          Set a label for the item that is different than the string that identifies the item. This label will be used in the
          display of the item. The first parameter specifies the item, the second specifies the display label.
    
      - displayLabelSuffix : dls       (unicode, unicode) [create,edit]
          Set a suffix for the display label for the item. This suffix will not be shown when renaming the item in the tree view.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragAndDropCommand : dad       (script)        [create,edit]
          Sets the callback function to be invoked upon drag and drop of layers. the callback function should take as parameters:
          - a string array of the dropped items - a string array of the items previous parents - an integer array of the items
          previous indexes - a string for the item(s) new parent - an integer array for the item's new indexes - a string for the
          item that now comes before the dropped items - a string for the item that now comes after the dropped items
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editLabelCommand : elc         (script)        [create,edit]
          Set the callback function to be invoked when the user changes the name of an item by double clicking it in the UI. The
          callback should accept two string arguments: the item name and the new name. The item name refers to the name of the
          item and not the display label. The callback function should return a string. An empty string indicates that the rename
          operation was invalid and the control should revert to the original name. If the rename operation is valid the callback
          should return a string that identifies the item, possibly different from the new display name entered by the user.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enableButton : eb              (unicode, int, int) [create,edit]
          Sets a specific button on a specific item to being usable or not. First argument specifies the item, second argument
          specifies the button, third argument specifies on or off.
    
      - enableKeys : enk               (bool)          [edit]
          By default the treeview does not accept input from the keyboard.  By enabling keyboard support The treeview will support
          up/down navigation using the up/down arrow keys.
    
      - enableLabel : enl              (unicode, int)  [create,edit]
          enables or disables the label of a tree view item from being displayed. The first parameter specifies the item, the
          second specifies on or off.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandCollapseCommand : ecc    (script)        [create,edit]
          Set the callback function to be invoked upon hitting the expand/collapse button. The function should take as parameters:
          - a string for the item for which the expand/collapse button was hit - an integer for the state of expansion
    
      - expandItem : ei                (unicode, bool) [create,edit]
          Expands or collapses an item's children. First argument specifies the item, second argument specifies expanded or
          collapsed.
    
      - flatButton : fb                (int)           []
    
      - font : fn                      (unicode, unicode) [create,query,edit]
          The first parameter specifies the item string for the TtreeViewNode in the TtreeNodeMap. The second string specifies the
          font for the text. Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fontFace : ff                  (unicode, int)  [create,edit]
          Sets the font face used for the specified item's text: 0 for normal, 1 for bold, 2 for italic.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - hideButtons : hb               (bool)          [create,edit]
          Hides the buttons for an item in the tree view. Can only be used when adding the item to the tree with the addItemflag.
          Space for the buttons is left to make sure items still line up correctly under their parent.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - highlite : hl                  (unicode, bool) [create,edit]
          Sets an item as highlit. Highliting is shown by outlining the item. First parameter specifies the item, the second
          specifies the highliting or not.
    
      - highliteColor : hc             (unicode, float, float, float) [create,edit]
          Sets the color an item's highlite will turn when highlite is enabled. first parameter specifies layer three float values
          specify RGB values, between 0 and 1.
    
      - ignoreButtonClick : ibc        (unicode, int, int) [create,edit]
          Sets a specific button on a specific item to ignore the button clicks First argument specifies the item ,second argument
          specifies the button, third argument specifies on or off
    
      - image : i                      (unicode, int, unicode) [create,edit]
          Sets an image to use as the icon for the button. First argument specifies the item, second argument specifies the
          button, third argument specifies the image.
    
      - isItemExpanded : iie           (unicode)       [query]
          Is the item in the tree view expanded.
    
      - isLeaf : il                    (unicode)       [query]
          Query whether an item is a leaf.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - item : it                      (unicode)       [query]
          Specify the item to query. Used with the flag selectionColorand itemAnnotation.
    
      - itemAnnotation : ia            (unicode, unicode) [create,query,edit]
          Annotate the specified item with an extra string value. When used for query, this flag has no argument and needs to be
          used with the flag item.
    
      - itemDblClickCommand : idc      (script)        [create,edit]
          Set the callback function to be invoked when an item in the tree has been double clicked. The callback should accept one
          string, the display label of the item that was double clicked. If this callback is defined, it supersedes the normal
          item renaming behavior.
    
      - itemDblClickCommand2 : dc2     (script)        [create,edit]
          Set the callback function to be invoked when an item in the tree has been double clicked. This callback is similar to
          itemDblClickCommand(idc), but it accepts two strings: the name and the display label of the item that was double
          clicked. If this callback is defined, it supersedes the normal item renaming behavior
    
      - itemExists : iex               (unicode)       [create,query]
          Queries the existence of the specified Tree View item.
    
      - itemIndex : idx                (unicode)       [create,query]
          Get the index for the specified item in the list of children of the item's parent. Index is 0-based.
    
      - itemParent : ip                (unicode)       [create,query]
          If the specified item is a child, it returns the parent item. If the specified item is not a child it returns nothing.
    
      - itemRenamedCommand : irc       (script)        [create,edit]
          Set the callback function to be invoked when an item in the tree has been renamed. This occurs if there is a successful
          return of the command attached by editLabelCommandor unconditionally if there is no editLabelCommand. The callback
          should accept two strings, the old name and the new name of the item that was renamed.
    
      - itemSelected : isl             (unicode)       [query]
          Queries the item is currently selected or not.
    
      - itemVisible : iv               (unicode, bool) [create,query,edit]
          Control the given item's visibility.
    
      - labelBackgroundColor : lbc     (unicode, float, float, float) [create,edit]
          Set the background color for text label for a particular item in the tree. The first parameter specifies layer. Set
          (-1.0, -1.0, -1.0) to restore the background to the default of transparent
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfButtons : nb           (int)           [create,edit]
          Specifies the number of buttons for items in the tree.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - ornament : ornament            (unicode, int, int, int) [create,edit]
          Sets an item as having an ornament (a small colored circle), its on/off state, if it should have a dot, and its size.
          First Argument specifies item, second argument specifies on or off, third argument specifies dotted or not, fourth
          argument specifies radius (in pixels).
    
      - ornamentColor : orc            (unicode, float, float, float) [create,edit]
          Sets the color an ornament will be draw with for the specified layer.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressCommand : pc              (<type 'int'>, script) [create,edit]
          Sets the callback function to be invoked upon clicking a treeView button. First argument specifies which treeView
          button. Second argument specifies the callback function to be executed the callback function should take as parameters:
          - a string for the clicked button's item - an int for the clicked button's state
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - removeAll : ra                 (bool)          [create,edit]
          Removes all items from the tree view.
    
      - removeItem : ri                (unicode)       [create,edit]
          Removes a tree view item from the tree view. If this item has children items, all children items are removed. First
          argument specifies the item's name.
    
      - reverseTreeOrder : rto         (bool)          [create,edit]
          Controls the order the tree will be drawn in (reversed if true).
    
      - rightPressCommand : rpc        (<type 'int'>, script) [create,edit]
          Sets the callback function to be invoked upon right clicking a treeView button. First argument specifies which treeView
          button. Second argument specifies the callback function to be executed the callback function should take as parameters:
          - a string for the clicked button's item - an int for the clicked button's state
    
      - select : sl                    (unicode, int)  []
    
      - selectCommand : sc             (script)        [create,edit]
          Set the callback function to be invoked when an item is selected or deselected in the tree. The function should accept
          one string argument and one integer argument: the item name and the select state respectively. If the function returns
          true, the select/deselect is considered valid and will occur normally, otherwise it will be disallowed. name and
    
      - selectItem : si                (unicode, bool) [create,query,edit]
          Sets an item's selected state. first argument specifies the item, second argument specifies selection status. When used
          for query without arguments, return all selected items in the treeview.
    
      - selectionChangedCommand : scc  (script)        [create,edit]
          Set the callback function to be invoked when a complete selection operation triggered by the user has occurred
          successfully. The callback is invoked if the selectCommandcallback has returned a non-empty value (or always there is no
          selectCommandcallback). This differs from selectCommand in that a simple selection replacement will generate two
          callbacks with selectCommand(one for deselect of the old item and one for select of the new), whereas
          selectionChangedCommandwill only be invoked once, after the selection is complete. The callback is not passed any
          parameters and does not need to return any value (i.e. It is simply a notification mechanism).
    
      - selectionColor : scl           (unicode, float, float, float) [create,query,edit]
          Sets the color an item will turn to indicate that it is selected. first parameter specifies the item three float values
          specify RGB values, between 0 and 1. When used for query, this flag has no argument and needs to be used with the flag
          item. It returns the color an item will become if it is selected.
    
      - showItem : shi                 (unicode)       [create,edit]
          Show the  item. Scroll the list as necessary so that item is visible.
    
      - textColor : tc                 (unicode, float, float, float) [create,edit]
          Sets the label's text color for the specified layer. first argument specifies layer. three float values specify RGB
          values, between 0 and 1.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.treeView`
    """

    pass


def shelfLayout(*args, **kwargs):
    """
    This command creates a new empty shelf layout. The shelf layout can accept drops of commands scripts.
    
    Flags:
      - alignment : aln                (unicode)       [create,query,edit]
          Sets the alignment of the buttons in the layout. Valid options are leftand right.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - cellHeight : ch                (int)           [create,query,edit]
          Set or query the height of the items in the shelf.
    
      - cellWidth : cw                 (int)           [create,query,edit]
          Set or query the width of the items in the shelf.
    
      - cellWidthHeight : cwh          (int, int)      [create,query,edit]
          Set the width and height of the items in the shelf.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only
          accepts major version numbers (e.g. 2014.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - position : pos                 (unicode, int)  [create,edit]
          Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired
          position of the child. Positions increase from left to right within a row and then wrap around to the next row
          increasing from top to bottom. For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2
          and 3 occupy the first row and 4, 5 and 6 occupy the second.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - spacing : spa                  (int)           [create,query,edit]
          Sets the space between children.
    
      - style : st                     (unicode)       [create,query,edit]
          Set or query the current style of the items in the shelf.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland
          iconAndTextVertical.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this feature was introduced. The argument should be given as a string of the version number
          (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shelfLayout`
    """

    pass


def defaultNavigation(*args, **kwargs):
    """
    The defaultNavigation command defines default behaviours when creating or manipulating connections between nodes and
    when navigating between nodes via those connections. This command is primarily used by attribute editors.
    
    Flags:
      - connectToExisting : ce         (bool)          [create]
          Connect the destination (which is a node.attribute or simply node) to an existing source. If the source is specified (as
          node.attribute or simply as node), the command will proceed immediately. If the source is not specified, the user will
          be prompted to specify one. Once a source has been specified, a best guess will be made about what the user is trying to
          accomplish by connecting the two, based on the type of source and type of destination. The command will connect the
          nodes/attributes according to the best guess. The destination is specified using the destinationflag and the source
          specified using the sourceflag.
    
      - createNew : cn                 (bool)          [create]
          Create a new node and connect it to the node.attribute specified using the destinationflag.
    
      - defaultAttribute : da          (bool)          [create]
          Returns the name of the attribute to which a connectNodeToNode would connect, given the source(attribute) and
          destination(node) flags. Returns a string.
    
      - defaultTraversal : dtv         (bool)          [create]
          Returns the name of the node to which it would make the most sense to navigate to from the destination node.attribute
          specified. The destination is specified using the destinationflag. Returns a string.
    
      - defaultWorkingNode : dwn       (bool)          [create]
          Returns the name of the node which the user is most likely to want to work with if they are interested in the attributes
          of the destination node. The destination is specified using the destinationflag. Returns a string.
    
      - delete : delete                (bool)          [create]
          Delete nodes with connections flowing into the node.attribute specified by the destinationflag.
    
      - destination : d                (PyNode)        [create]
          Specifies an existing destination attribute for a createNew or connectToExisting.
    
      - disconnect : dis               (bool)          []
    
      - force : f                      (bool)          [create]
          If set to true, then an attempt to connect a source attribute to a destination attribute which already has a source will
          cause the existing source to be disconnected and the new source to be connected in its place. Default value is true.
    
      - ignore : i                     (bool)          [create]
          Ignore any connections flowing into the node.attribute specified by the destinationflag.
    
      - navigatorDecisionString : nds  (unicode)       [create]
          This is your opportunity to pass the navigator a string that can help it decide what behaviour to execute.
    
      - quiet : qt                     (bool)          [create]
          If set to true, then under no circumstances should the user be prompted for more information. Default value is false.
    
      - relatedNodes : ren             (bool)          [create]
          List nodes which are conceptually related to the node.attribute specified by the destination. Related nodes may include,
          but are not limited to, nodes which are directly or indirectly connected to the destination. The destination is
          specified using the destinationflag. Returns an array of strings.
    
      - source : s                     (PyNode)        [create]
          Specifies an existing source attribute for a connectToExisting.
    
      - unignore : u                   (bool)          [create]
          Stop ignoring any connections flowing into the node.attribute specified by the destinationflag.                  Flag
          can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.defaultNavigation`
    """

    pass


def hotkey(*args, **kwargs):
    """
    This command sets the single-key hotkeys for the entire application.             In query mode, return type is based on
    queried flag.
    
    Flags:
      - altModifier : alt              (bool)          [create,query]
    
      - autoSave : autoSave            (bool)          [create]
          If set to true then the hotkeys will always be saved when you quit.  If false then the hotkeys are not saved unless
          savePrefs -hotkeysis used.
    
      - commandModifier : cmd          (bool)          [create]
          The Command key must be pressed to get the hotkey. This is only available on systems which have a separate command key.
          Note that if menu item accelerator keys are being used (menuItem -ke/keyEquivalent), then the accelerator key settings
          override the hotkey settings.
    
      - ctrlModifier : ctl             (bool)          [create,query]
          The Ctrl key must be pressed to get the hotkey. Note that if menu item accelerator keys are being used (menuItem
          -ke/keyEquivalent), then the accelerator key settings override the hotkey settings.
    
      - ctxClient : cc                 (unicode)       [create,query]
          Specifies the hotkey context. It is used together with the other flags to modify or query the hotkey for a certain
          hotkey context. If it is not specified, the global hotkey context will be taken into account. Check hotkeyCtx command to
          see how the hotkeys work with the hotkey contexts.
    
      - dragPress : dp                 (bool)          [create]
          Specify true and the command may be executed during manipulator dragging, if the tool context also allows this. This
          flag is false by default.
    
      - factorySettings : fs           (bool)          [create]
          Resets the hotkeys back to the initial defaults.
    
      - isModifier : mod               (bool)          [create]
          This flag is obsolete and should no longer be used.
    
      - keyShortcut : k                (unicode)       [create]
          Specify what key is being set. The key must be either a single ascii character (capital and lowercase can be set
          independently) or one of the keyword strings for the specialkeyboard characters. The valid keywords are:Up, Down, Right,
          Left,Home, End, Page_Up, Page_Down, InsertReturn, SpaceF1 to F12Tab (Will only work when modifiers are specified)Delete,
          Backspace (Will only work when modifiers are specified)
    
      - name : n                       (unicode)       [create,query]
          The name of the namedCommand object that will be executed when the key is pressed.
    
      - pressCommandRepeat : pcr       (bool)          [create]
          Specify true and the command may be repeated by executing the command repeatLast. This flag is false by default.
    
      - releaseCommandRepeat : rcr     (bool)          [create]
          Specify true and the command may be repeated by executing the command repeatLast. This flag is false by default.
    
      - releaseName : rn               (unicode)       [create,query]
          The name of the namedCommand object that will be executed when the key is released.
    
      - shiftModifier : sht            (bool)          [create,query]
          The Shift key must be pressed to get the hotkey.
    
      - sourceUserHotkeys : suh        (bool)          [create]
          This flag is obsolete. Please use import flag from hotkeySet command to import the user hotkeys.Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hotkey`
    """

    pass


def headsUpDisplay(*args, **kwargs):
    """
    This command creates a Heads-up Display (HUD) object which is placed in a 2D inactive overlay plane on the 3D viewport.
    It is to be used to provide hands-on information designated by a user script. The text string displayed on the viewport
    is formatted using the various flags of this command. The only mandatory flags, on creation are the section and block
    flags. Note if the preset OR command/trigger flags are not present, only a label will be drawn on the viewport. Upon
    creation of a HUD object, an ID number will be assigned to it. This can be used to remove the HUD object (-rid/removeID
    [int IDNumber]), if desired. Alternatively, HUD objects may be removed via their position (section and block), or their
    unique name.
    
    Flags:
      - allDescendants : ad            (bool)          [create,edit]
          This flag can only be used in conjunction with the -ac/attributeChange flag. If it is specified, and the HUD is attached
          to a compound or multi attribute, then the HUD command will run due to changes to the specified attribute as well as
          changes to its descendants.
    
      - allowOverlap : ao              (bool)          [create,query,edit]
          Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag
          description for more details).
    
      - attachToRefresh : atr          (bool)          [create,query,edit]
          Attaches the command to the refresh process. The script is then run each time an idle refresh is run and updates
          directly following it.
    
      - attributeChange : ac           (unicode)       [create,edit]
          Runs the command when the named attribute changes value. The string must identify both the dependency node and the
          particular attribute. If the dependency node is deleted, this HUD is removed (even if the deletion is undoable).
    
      - block : b                      (int)           [create,query,edit]
          Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column
          of blocks. The total number of blocks contained within each section is variable. The number of blocks that will be
          visible within each section is dependent on the size of blocks contained in each section and the current size of the
          window. Blocks begin enumerating from 0 and flexibly increase based on need. The resultant output string of each HUD is
          formatted within each block, using parameters defined by the formatting flags listed below (eg. justify, padding,
          labelWidth and dataWidth). The layout is shown in the following diagram: __________________________________________ |
          |     |        |         |     |     | |  P  |  J  |   LW   |   DWX   |  J  |  P  |
          |_____|_____|________|_________|_____|_____| P = Sub-block of width, padding J = Justification of the entire block LW =
          Sub-block of width, labelWidth DWX = X number of sub-blocks of width, dataWidth, for X data elements. Block LayoutThe
          above diagram shows the layout of each block. The widths: padding, labelWidth and dataWidth are defined by their
          respective flags. To elaborate on the layout of the blocks, First the padding of the block is calculated. Then the two
          main sub-blocks (LW and DWX) in the above diagram, are justified and positioned together between the left and right
          margins of the block. The widths of the main sub-blocks are not variable based on it's contents. The only sub-block in
          the above diagram which is unique is the DWX sub-block which actually represents X number of sub-blocks, where X is the
          number of data elements returned by the command. Block PositioningBlocks on the top section begin from the top edge of
          the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility
          from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport. Lastly, there can
          be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error.
          Keep this in mind when positioning the HUD.
    
      - blockAlignment : ba            (unicode)       [create,query,edit]
          Specifies the alignment of the block within its respective column. Available alignments are: center, leftand right. The
          default alignment is left.
    
      - blockSize : bs                 (unicode)       [create,query,edit]
          Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds
          to a 20, 35 or 50 pixel height, respectively.
    
      - command : c                    (script)        [create,query,edit]
          Specifies the procedure or script to run, in order to obtain the desired information. This must return a value or an
          array of values. A warning will be displayed if the command does not return a value. This flag MUST always be
          accompanied by a trigger flag (eg. a condition flag, an event flag, an attachToRefresh flag, etc.).
    
      - conditionChange : cc           (unicode)       [create,edit]
          A trigger which runs the command (to sample the data), when the named condition changes. The named condition must be
          pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
    
      - conditionFalse : cf            (unicode)       [create,edit]
          A trigger which runs the command (to sample the data), when the named condition becomes false. The named condition must
          be pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
    
      - conditionTrue : ct             (unicode)       [create,edit]
          A trigger which runs the command (to sample the data), when the named condition becomes true. The named condition must
          be pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
    
      - connectionChange : con         (unicode)       [create,edit]
          Runs the command when the named attribute changes its connectivity. The string must identify both the dependency node
          and the particular attribute. If the dependency node is deleted, this HUD is removed (even if the deletion is undoable).
    
      - dataAlignment : da             (unicode)       [create,query,edit]
          Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: leftand
          right. The default alignment is left.
    
      - dataFontSize : dfs             (unicode)       [create,query,edit]
          Sets the font size of the returned data. Available sizes are: small and large.
    
      - dataWidth : dw                 (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold a data value. For commands which return more than one
          value (ie. arrays), one of these textboxeswill be created for each data element, each with this specified width. If the
          width of the data value exceeds the width of the textbox, the data value will be truncated to fit within the dimensions
          of the textbox.(To see a layout of a block, see the description of the -block flag.)
    
      - decimalPrecision : dp          (int)           [create,query,edit]
          Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are
          1 to 8.
    
      - disregardIndex : di            (bool)          [create,edit]
          This flag can only be used in conjunction with the -ac/attributeChange flag. If it is specified, and the HUD is attached
          to a multi (indexed) attribute, then the HUD command will run no matter which attribute in the multi changes.
    
      - event : ev                     (unicode)       [create,edit]
          Runs the command when the named event occurs. The named event, must be a pre-defined Maya event. To get a list of what
          events exist, use the -le/listEvents flag.
    
      - exists : ex                    (bool)          [create,query]
          This flag returns whether the given object exists in the Heads-Up Display layout. An object name must be supplied with
          this command. This flag cannot be combined with any other flag.
    
      - getOption : op                 (unicode)       [query]
          This flag will return the value of the option specified by the string. See setOption for a list of options
    
      - gridColor : gco                (int)           [create,query,edit]
          This flag specifies a color for the grid lines using the inactive color palette. Specifying an index number between 1 to
          23 will select the corresponding color in the palette.
    
      - label : l                      (unicode)       [create,query,edit]
          Text string that appears to the left of the desired information.
    
      - labelFontSize : lfs            (unicode)       [create,query,edit]
          Sets the font size of the label. Available sizes are: small and large.
    
      - labelWidth : lw                (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold the label. The contents of this textboxwill be left
          justified. If the width of the actual label exceeds the width of the textbox,the label will be truncated to fit within
          the dimensions of the textbox.(To see a layout of a block, see the description of the -block flag.)
    
      - lastOccupiedBlock : lob        (int)           [create]
          Returns the block number of the last occupied block in a given section.
    
      - layoutVisibility : lv          (bool)          [create,query,edit]
          Sets the visibility of Heads-Up Display layout on and off. This does not modify individual visibilities of heads-up
          displays, but turns off the layout so that no heads-up displays will draw to screen. Personalized settings for the
          visibilities of HUDs are kept safe. This flag can only be used by itself, excepting edit and query.
    
      - listConditions : lc            (bool)          [create,query]
          This flag will return a string array containing all names of the available conditions.
    
      - listEvents : le                (bool)          [create,query]
          This flag will return a string array containing all names of the available events.
    
      - listHeadsUpDisplays : lh       (bool)          [create,query]
          This flag will return a string array containing all names of existing HUDs.
    
      - listNodeChanges : lnc          (bool)          [create,query]
          This flag will return a string array containing all names of the available node changes.
    
      - listPresets : lp               (bool)          [create,query]
          This flag will return a string array containing all names of the available preset HUDs.
    
      - name : n                       (unicode)       [edit]
          This flag only permits the EDITING of the name of the Heads-Up Display.
    
      - nextFreeBlock : nfb            (int)           [create]
          Returns the block number of the next free block in a given section.
    
      - nodeChanges : nc               (unicode)       [create,query,edit]
          Works only with selection based triggers (ie. SelectionChangedor SomethingSelected), otherwise this flag is ignored.
          This flag attaches the HUD script to execute on specific node changes of any selected node. This flag is used to set a
          nodeChange. In order to reset a nodeChange, use the -rnc/resetNodeChanges flag. To view a list of all available node
          changes, use the -lnc/listNodeChanges flag. The following is a list of available node changes and their function:
          attributeChange:  The script will be sensitive to any attribute changes in the currently                   selected
          nodes. connectionChange: The script will be sensitive to any connection changes in the currently
          selected nodes. instanceChange:   The script will be sensitive to any changes to an instance in the
          currently selected nodes. On query mode, this flag will return the values of all nodeChanges in pairs of values (the
          name of the nodeChange followed by its value). WARNING: (Performance Warning)          Attaching a nodeChange trigger to
          a selection based trigger can cause a large          performance drop, if the node change that is being watched is
          caused by the          HUD script itself. With this said, an attempt should be made to keep the HUD command/script
          simple and limited to retrieving data. Changing an attribute, creating or                  modifying a connection or
          instance will all result in a performance drop.
    
      - padding : p                    (int)           [create,query,edit]
          Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
    
      - preset : pre                   (unicode)       [create,query,edit]
          This setting is used to select certain pre-defined HUDs, some of which retrieve specific data, that is unobtainable
          through normal MEL commands or scripts. This flag is mutually exclusive from the command and trigger flag combination.
          However, presets can work with all other headsUpDisplay attribute flags (ie. block alignment, label, dataFontSize,
          etc.), unless otherwise specified below. To obtain a list of available presets, use the -lp/listPresets flag on this
          command. The following is a list of available presets and a description of each: cameraNamesThis will return the camera
          name that the view is looking through, in the data block, for each view that the HUD is drawing to.polyVertsThis will
          return three values in the data block, regarding the number of vertices that are visible by the camera. 1st Value:
          Represents the number of camera visible vertices, both active and inactive.2nd Value: Represents the number of camera
          visible vertices, on active objects only.3rd Value: Represents the number of camera visible vertices, that are
          active.polyEdgesThis will return three values in the data block, regarding the number of edges that are visible by the
          camera. The order of these three values are similar to the polyVerts preset.polyFacesThis will return three values in
          the data block, regarding the number of faces that are visible by the camera. The order of these three values are
          similar to the polyVerts preset.polyUVsThis will return three values in the data block, regarding the number of UVs that
          are visible by the camera. The order of these three values are similar to the polyVerts preset.polyTrianglesThis will
          return three values in the data block, regarding the number of triangles that are visible by the camera. The order of
          these three values are similar to the polyVerts preset.materialLoadingCountThis will return the material loading count.
          It updates on each refresh.textureLoadingCountThis will return the texture loading count. It updates on each
          refresh.frameRateThis will return a single string carrying both the frame rate and the fpsstring in the data block. It
          updates on each refresh.viewAxisThis will draw the orientation of the grid axes within the HUD. It updates on each
          refresh. While this preset can take in all attribute flags, the only one which will have an effect are block attribute
          related flags (ie. block alignment and block size). The block dimensions of this preset are: blockSize - largeand
          blockWidth - 50, which results in a 50x50 pixel region.distanceFromCameraThis will return in the data block the distance
          from the view's camera to the centre of the bounding box containing the selected objects in the view.
    
      - refresh : r                    (bool)          [create]
          This flag forces the given Heads-Up Display element to refresh, updating the value displayed.  This flag cannot be
          combined with any other flag.
    
      - remove : rem                   (bool)          [create,edit]
          This command will remove a given HUD object, given a specified HUD name. This flag will override all other flags and is
          mutually exclusive from the other remove flags.
    
      - removeID : rid                 (int)           [create,edit]
          This command will remove a given HUD object, given a specified HUD ID number assigned to it at creation time. This flag
          will override all other flags and is mutually exclusive from the other remove flags.
    
      - removePosition : rp            (int, int)      [create,edit]
          This command will remove the contents of a specific block location in the HUD layout. This flag will override all other
          flags and is mutually exclusive from the other remove flags. Syntax for this flag is: -removePosition/rp [section]
          [block].
    
      - resetNodeChanges : rnc         (unicode)       [edit]
          This flag will reset a specificied nodeChange back to false. This flag only operates under the edit flag. See the
          description for the -nc/nodeChanges flag for further details.
    
      - scriptResult : sr              (bool)          [query]
          This flag is only used in conjunction with the query flag. Calling a query on this flag returns the most recent result
          of the HUD.
    
      - section : s                    (int)           [create,query,edit]
          Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows
          make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.
          ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |
          |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  |
          |    |    |    |    |    | |____|____|____|____|____|Each section is denoted by a number from 0 to 9 as illustrated
          above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1 To prevent
          HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility
          precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen
          space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically
          compensates for this by removing the sections of least priority. These sections are made invisible and a warning is
          issued to inform the user of the removal. This continues until only the section of highest priority remains. For each
          row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority,
          followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly
          Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well.
          The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two
          sections are of lowest priority. This means that as the viewport gradually decreases in width to the point where
          sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and
          finally section 4. A similar note is provided below for the block layout.
    
      - setOption : so                 (unicode, unicode) [edit]
          This flag will edit the option specified by the first string. Current options are: smpPolyCount - cageor smp- in smooth
          mesh preview, determines the poly count display
    
      - showGrid : sg                  (bool)          [create,query,edit]
          This flag will toggle the display of the grid lines of the HUD layout.
    
      - visible : vis                  (bool)          [create,query,edit]
          Sets the visibility of the Heads-Up Display on and off.                                    Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.headsUpDisplay`
    """

    pass


def folderButtonGrp(name='None', *args, **kwargs):
    pass


def iconTextStaticLabel(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates an iconTextStaticLabel.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextStaticLabel`
    """

    pass


def hotBox(*args, **kwargs):
    """
    This command controls parameters related to the hotBox menubar palette. When the command is invoked with no flags, the
    hotBox is popped up. In query mode, return type is based on queried flag.
    
    Flags:
      - PaneOnlyMenus : po             (bool)          [create]
          Sets a row of menus to be the only visible row.
    
      - PaneToggleMenus : pt           (bool)          [create,query]
          Sets the visibilty of a row of menus to on or off.
    
      - animationOnlyMenus : ao        (bool)          [create,query]
    
      - animationToggleMenus : at      (bool)          [create,query]
    
      - clothOnlyMenus : clo           (bool)          [create,query]
    
      - clothToggleMenus : clt         (bool)          [create,query]
    
      - commonOnlyMenus : co           (bool)          [create,query]
    
      - commonToggleMenus : ct         (bool)          [create,query]
    
      - customMenuSetsToggleMenus : cst (bool)          [create,query]
    
      - displayCenterOnly : dco        (bool)          [create]
          Three different display styles are defined for the hotBox. It can be fully displayed (dh), display only the marking menu
          zones (dzo) or no display (dco) which means that the entire screen can be used to access the marking menus defined in
          the center zone.
    
      - displayHotbox : dh             (bool)          [create,query]
    
      - displayStyle : ds              (bool)          [query]
          Returns a string that identifies the flag used to set the current display style. The results can be dh, dzo, or dco,
          depending on  which style the hotBox is using at the moment.
    
      - displayZonesOnly : dzo         (bool)          [create,query]
    
      - dynamicsOnlyMenus : do         (bool)          [create,query]
    
      - dynamicsToggleMenus : dt       (bool)          [create,query]
    
      - liveOnlyMenus : lo             (bool)          [create,query]
    
      - liveToggleMenus : lt           (bool)          [create,query]
    
      - menuSetOnly : mso              (unicode)       []
    
      - menuSetToggle : mst            (unicode, bool) []
    
      - modelingOnlyMenus : mdo        (bool)          [create,query]
    
      - modelingToggleMenus : mdt      (bool)          [create,query]
    
      - noClickCommand : ncc           (script)        [create]
          The command to be executed if the hotBox is engaged and then disengaged within noClickDelay time units.
    
      - noClickDelay : ncd             (float)         [create]
          If the hotBox is engaged and then disengaged within this time interval, then the noClickCommand is executed. The time
          interval is in seconds.  The default value is 0.1.
    
      - noClickPosition : ncp          (bool)          [create]
          If a -noClickCommand has been specified then this flag will cause the X and Y screen coordinates of the mouse pointer to
          be appended as arguments to that command. The coordinates used are those of the pointer at the time when the hotbox
          command was initiated.
    
      - noKeyPress : nkp               (bool)          [create,query]
          Normally the hotbox is popped by a pressing a keyboard key. Use the nkpflag to pop the hotbox from a device other than
          the keyboard (still use the rlflag to unpop the hotbox).
    
      - polygonsOnlyMenus : plo        (bool)          [create,query]
    
      - polygonsToggleMenus : plt      (bool)          [create,query]
    
      - position : pos                 (int, int)      [create]
          Specify the screen position the hotbox should be centered at next time it is displayed.  The default is the cursor
          position.
    
      - release : rl                   (bool)          [create,query]
          Action to be called on the release of the key which invoked the hotbox
    
      - renderingOnlyMenus : ro        (bool)          [create,query]
    
      - renderingToggleMenus : rt      (bool)          [create,query]
    
      - riggingOnlyMenus : rgo         (bool)          [create,query]
    
      - riggingToggleMenus : rgt       (bool)          [create,query]
    
      - rmbPopups : rmb                (bool)          [create,query]
          Enables/Disables a popup menu of the current function set. This popup menu appear when the right mouse button is pressed
          in the center zone of the hotbox.
    
      - showAllToggleMenus : a         (bool)          [create,query]
          Sets the visibility of all menus to on or off. When queried, will only return true if all menu rows are visible.
    
      - surfacesOnlyMenus : so         (bool)          [create,query]
    
      - surfacesToggleMenus : st       (bool)          [create,query]
    
      - transparenyLevel : tr          (int)           [create,query]
          The percentage of transparency, from 0 to 100. Currently, only the values 0, 25, 50, 75 and 100 are supported.  Any
          other values will be rounded off to the nearest supported value.
    
      - updateMenus : um               (bool)          [create]
          Reloads the hotBox menus from the main menubar. This flag is used when the menus in the main menubar are modified, and
          the hotBox menus need to be refreshed.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.hotBox`
    """

    pass


def showsHourglass(func):
    """
    Decorator - shows the hourglass cursor until the function returns
    """

    pass


def colorEditor(*args, **kwargs):
    """
    The colorEditorcommand displays a modal dialog that may be used to specify colors in RGB or HSV. The default behaviour
    when no arguments are specified is to provide an initial color of black (rgb 0.0 0.0 0.0). The command will return the
    user's color component values along with a boolean to indicate whether the dialog was dismissed by pressing the
    OKbutton.  As an alternative to responding to the colorEditorcommand's return string you can now query the
    -rgb/rgbValue, -hsv/hsvValue, and -r/resultflags to get the same information. The final argument is 1 if the dialog's
    OKbutton was pressed, and 0 if the Cancelbutton was pressed.In query mode, return type is based on queried flag.
    
    Flags:
      - alpha : a                      (float)         []
    
      - hsvValue : hsv                 (float, float, float) [create,query]
          Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0
          to 360.0 and the saturation and value components range from 0.0 to 1.0.  Use this flag to specify the initial color of
          the Color Editor, or query this flag to determine the color set in the editor.
    
      - mini : m                       (bool)          [create]
          Enable the mini color editor mode.
    
      - parent : p                     (unicode)       [create]
          Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's
          parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
    
      - position : pos                 (bool)          [create]
          Specify the window position for the dialog.
    
      - result : r                     (bool)          [query]
          This query only flag returns true if the dialog's OKbutton was pressed, false otherwise.  If you query this flag
          immediately after showing the Color Editor then it will return the same value as the boolean value returned in the
          colorEditorcommand's return string.
    
      - rgbValue : rgb                 (float, float, float) [create,query]
          Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.  Use
          this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorEditor`
    """

    pass


def nodeIconButton(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates a button that can be displayed with
    different icons, with or without a text label. If the button is drag and dropped onto other controls (e.g., HyperShade),
    the command will be executed and the return string will be used as the name of a dropped node.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,query,edit]
          Command executed when the control is pressed. The command should return a string which will be used to facilitate node
          drag and drop.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nodeIconButton`
    """

    pass


def scrollField(*args, **kwargs):
    """
    This command creates a scrolling field that handles multiple lines of text.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes. This command is executed whenever the field loses focus.
    
      - clear : cl                     (bool)          [create,edit]
          Removes all text in the field.
    
      - command : c                    (unicode)       []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the
          -tx/text flag regardless of the state of the -ed/editable flag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enterCommand : ec              (script)        [create,edit]
          Command executed when the enter key is pressed. This applies to the enter key on the numeric keypad only.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fontPointSize : fns            (int)           [create,query,edit]
          The font point size for the text.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - insertText : it                (unicode)       [create,edit]
          Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
    
      - insertionPosition : ip         (int)           [create,query,edit]
          The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the
          field.  Position 0 may be used to specify the end of the field.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - keyPressCommand : kpc          (script)        [create,edit]
          Command executed when any key is pressed.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfLines : nl             (int)           [query]
          Number of lines in the scroll field.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - qtFont : qfn                   (unicode)       [create,query,edit]
          The Qt font family for the text.
    
      - selection : sl                 (bool)          [query]
          The selected text in the field.  An empty string is returned if there is no selected text.
    
      - text : tx                      (unicode)       [create,query,edit]
          The field text.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - wordWrap : ww                  (bool)          [create]
          Specify true to break lines at spaces, tabs, or newlines.  Text will continue on the following line.  A value of false
          will not break text between words, in which case text may disappear beyond the edge of the field.  This flag must be set
          at create time. Lines do not word wrap by default.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.scrollField`
    """

    pass


def hotkeyEditorPanel(*args, **kwargs):
    """
    A hotkeyEditor creates a new hotkey editor in the current layout. The hotkey editor lets you assign predefined commands,
    MEL scripts, or marking menus to keys and key combinations.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hotkeyEditorPanel`
    """

    pass


def gradientControl(*args, **kwargs):
    """
    This command creates a control that displays the gradient attribute specified. The gradient attribute must be of the
    correct form and naming. It should be a multi attribute with each entry a compound composed of: Either a color compound
    or a float value (the control will automatically detect which and display a ramp or graph accordingly).A single float
    attribute for position.An enum for the interpolation types.Currently the routines to get the value of a ramp structure
    (with interpolation) are not available through MEL, which limits the use of this control by end users. The MEL command
    AEaddRampControl should be used to attach this control to an attribute from attribute editor templates.
    
    Flags:
      - adaptiveScaling : adaptiveScaling (bool)          [create,query,edit]
          Allow the ramp widget display to scale vertically to accommodate values greater than 1.0. True if adaptive scaling is
          enabled, false (the default) if not.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attribute : at                 (PyNode)        [create]
          Specifies the name of the gradient attribute to control.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfControls : nc          (int)           [query]
          Returns the number of controls in the ramp widget
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - refreshOnRelease : ror         (int)           [create,query,edit]
          Define how updates are dispatched during interactive editing of the ramp widget. True causes updates to only dispatch
          after releasing the mouse button after editing. False (the default) causes updates to dispatch interactively during
          editing (e.g. while moving ramp curve points). Note that the global update mode, if set to on releasecan disable the
          effect of this option.
    
      - selectedColorControl : scc     (unicode)       [create,edit]
          Specifies the name of a color control to edit the selected color.
    
      - selectedInterpControl : sic    (unicode)       [create,edit]
          Specifies the name of an enum control to edit the selected interpolation.
    
      - selectedPositionControl : spc  (unicode)       [create,edit]
          Specifies the name of a float slider to edit the selected position.
    
      - staticNumberOfControls : snc   (bool)          [create,query,edit]
          When 'true', this flag disables the creation/deletion of ramp entries (control points) via ramp widget interaction.
          Default is false.
    
      - staticPositions : sp           (bool)          [create,query,edit]
          When 'true', this flag disables the interactive modification of ramp entry positions. Default is false.
    
      - upperLimitControl : ulc        (unicode)       [create,query,edit]
          Specify the name of a text control which is updated with the current upper display limit for the ramp. This option is
          only effective when adaptiveScaling is specified.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - verticalLayout : vl            (bool)          [create,query,edit]
          When 'true', this makes the control orient vertically rather than horizontally. The default is `false` or horizontal.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.gradientControl`
    """

    pass


def helpLine(*args, **kwargs):
    """
    This command creates a help line where tool help/hints are shown.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.helpLine`
    """

    pass


def attrFieldSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text, float field and
    float slider (for values with a min or max specified) The group also supports the notion of a larger secondary range of
    possible field values. If an attribute is specified for this object, then it will use any min and max values defined in
    the attribute.  The user-specified values can reduce the min and max, but cannot expand them. The field created here is
    an expression field -- while normally operating as a float field, the user can type in any expression starting with the
    character =.  This will expand the field to occupy the space previously taken by the slider. The field also has an
    automatic menu brought up by the right mouse button. The contents of this menu change depending on the state of the
    attribute being watched by the field.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attribute : at                 (unicode)       [create,query,edit]
          The name of a unique attribute of type double or int. This newly created field will be attached to the attribute, so
          that modifications to one will change the other.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          The command string is executed when the value of the slider or floatField changes.  It will be executed only once after
          a drag of the slider.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraButton : eb               (bool)          [create]
          Add an extra icon button to the end of this control.
    
      - extraButtonCommand : ebc       (script)        [create,edit]
          The command string is executed when the extra button is clicked.
    
      - extraButtonIcon : ebi          (unicode)       [create,query,edit]
          The icon file name of the extra button.
    
      - fieldMaxValue : fmx            (float)         [create,query,edit]
          Set the maximum value for the field.  This flag allows you to specify a maximum bound for the field higher than that of
          the slider.   (See note above about max and min values.)
    
      - fieldMinValue : fmn            (float)         [create,query,edit]
          Set the minimum value for the field.  This flag allows you to specify a minimum bound for the field lower than that of
          the slider.  (See note above about max and min values.)
    
      - fieldStep : fs                 (float)         [create,query,edit]
          Sets the increment for the float field.
    
      - forceAddMapButton : fmb        (bool)          [create]
          Force adding a map button to this control. If this option is true, option hideMapButton is suppressed.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - hideMapButton : hmb            (bool)          [create]
          Force the map button to remain hidden for this control.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with
          whatever string you want.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Sets the maximum value for both the slider and the field. (See note above about min and max values)
    
      - minValue : min                 (float)         [create,query,edit]
          Sets the minimum value for both the slider and the field. (by default max and min are set according to what is in the
          attribute, if anything.  If no max and min are specified, or if only one of the two are specified, then no slider is
          created.)
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,edit]
          Sets the number of digits to the right of the decimal. (If attached to an int attribute, this is automatically set to 0
          and cannot be overridden.)
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - sliderMaxValue : smx           (float)         [create,query,edit]
          Set the maximum value for the slider.  The slider max will be clipped to the field max.
    
      - sliderMinValue : smn           (float)         [create,query,edit]
          Set the minimum value for the slider.  The slider min will be clipped to the field min.
    
      - sliderStep : ss                (float)         [create,query,edit]
          On Linux the slider step value represents the amount the value will increase or decrease when you click either side of
          the slider.
    
      - step : s                       (float)         [create,query,edit]
          Sets the increment for both the slider and float field.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - vertical : vr                  (bool)          [create,query]
          Whether the orientation of the controls in this group are horizontal (default) or vertical.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrFieldSliderGrp`
    """

    pass


def picture(*args, **kwargs):
    """
    This command creates a static image.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          Sets the image given the .xpm file name.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - tile : tl                      (bool)          [create,query,edit]
          If true, the picture is tiled to fill the picture area. False by default. (Windows only flag)
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.picture`
    """

    pass


def symbolCheckBox(*args, **kwargs):
    """
    This command creates a symbol check box.  A symbol check box is a simple control containing a pixmap and a state of
    either on or off. Commands can be attached to any or all of the following events:  when the symbol check box is turned
    on, turned off, or simply when it's state is changed.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside
          the callback, or use onCommand and offCommand as separate callbacks.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disableOffImage : dfi          (unicode)       [create,query,edit]
          Image displayed when the check box is off and disabled.
    
      - disableOnImage : dni           (unicode)       [create,query,edit]
          Image displayed when the check box is on and disabled.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          Image of the check box.
    
      - innerMargin : im               (bool)          [create,query,edit]
          This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having a 2 pixel inner margin. This flag is
          for backward compatibility on Linux only, and will be removed in future releases.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,edit]
          Command executed when the symbol check box is turned off.
    
      - offImage : ofi                 (unicode)       [create,query,edit]
          Image displayed when the check box is off.
    
      - onCommand : onc                (script)        [create,edit]
          Command executed when the symbol check box is turned on.
    
      - onImage : oni                  (unicode)       [create,query,edit]
          Image displayed when the check box is on.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (bool)          [create,query,edit]
          Value of the check box.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.symbolCheckBox`
    """

    pass


def promptDialog(*args, **kwargs):
    """
    The promptDialog command creates a modal dialog with a message to the user, a text field in which the user may enter a
    response, and a variable number of buttons to dismiss the dialog.  The dialog is dismissed when the user presses any
    button or chooses the close item from the window menu.  In the case where a button is pressed then the name of the
    button selected is returned.  If the dialog is dismissed via the close item then the string returned is specified by the
    -ds/dismissStringflag. The default behaviour when no arguments are specified is to create an empty single button dialog.
    To obtain the text entered by the user simply query the -tx/textflag.
    
    Flags:
      - backgroundColor : bgc          (float, float, float) [create]
          The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. (Windows only flag)
    
      - button : b                     (unicode)       [create]
          Create a button with the given string as it's text.
    
      - cancelButton : cb              (unicode)       [create]
          The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply
          indicates which button created via the -b/buttonflag shall respond to the escape key.
    
      - defaultButton : db             (unicode)       [create]
          The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply
          indicates which button created via the -b/buttonflag shall respond to the enter key.
    
      - dismissString : ds             (unicode)       [create]
          The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then
          the string dismissis returned.
    
      - message : m                    (unicode)       [create]
          The message text appearing in the dialog.
    
      - messageAlign : ma              (unicode)       [create]
          Align the message left, center, or right.
    
      - parent : p                     (unicode)       [create]
          Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's
          parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
    
      - scrollableField : sf           (bool)          [create]
          By default a single line text field is used in the dialog. Specify true for a multi-line scroll field.
    
      - style : st                     (unicode)       [create]
          Specify the type of input expected in the input field. Vaid input types are integerfloattext. If this flag is not
          specified, we assume the input type is text.
    
      - text : tx                      (unicode)       [create,query]
          The field text.
    
      - title : t                      (unicode)       [create]
          The dialog title.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.promptDialog`
    """

    pass


def shelfButton(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates an iconTextButtonthat is designed to
    be on the shelf. The button contains a command that can be drag'n'dropped.
    
    Flags:
      - actionIsSubstitute : ais       (bool)          []
    
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,query,edit]
          Command executed when the control is pressed.
    
      - commandRepeatable : rpt        (bool)          [create,query,edit]
          Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut
          to repeat the last executed command.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,query,edit]
          Command executed when the control is double clicked.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enableCommandRepeat : ecr      (bool)          [create,query,edit]
          This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by
          executing the command repeatLast.  This flag is true by default for all items except for option box items.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flat : fla                     (bool)          [create,query,edit]
          Sets whether the control will be a flat button (0 false, 1 true).
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - handleNodeDropCallback : hnd   (script)        [create,edit]
          Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped
          will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - highlightImage : hi            (unicode)       [create,query,edit]
          Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with
          the -i/imageflag. This is a Windows only flag.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelEditingCallback : lec     (script)        [create,edit]
          Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new
          label string will be passed to the callback.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - menuItem : mi                  (unicode, unicode) [create,edit]
          Creates menu items for this button by passing in arguments for the menu item label and command for each item.  These
          should be passed as strings: labelcommandfor each use of this flag in the command. May be used mutliple times
    
      - menuItemPython : mip           (int)           []
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - noDefaultPopup : ndp           (bool)          [create]
          Disable the default popup menus.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - scaleIcon : sic                (bool)          [create,edit]
          For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the flag is specified, the icon will be
          scaled to the size of the control.
    
      - selectionImage : si            (unicode)       [create,query,edit]
          Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag.
          This is a Windows only flag.
    
      - sourceType : stp               (unicode)       [create,query,edit]
          Sets the language type for the command script. Can only be used in conjunction with the c/command or
          dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shelfButton`
    """

    pass


def fileDialog(*args, **kwargs):
    pass


def falloffCurve(*args, **kwargs):
    """
    This command creates a control for editing a 2D control curve. The control attaches to an optionVar used to store and
    retrieve the encoded control points stored in a string.
    
    Flags:
      - addControlVertex : acv         (unicode)       [edit]
          Used to add a control vertex for the curve.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - asString : asString            (unicode)       [query,edit]
          Used to query and set the value of the curve as a string of comma separated values
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [edit]
          Specifies a command to be executed whenever the value of this curve is modified. This option should not be used when
          specifying an optionVar.
    
      - currentKey : ck                (int)           [create,query,edit]
          Returns the index of the currently selected key.
    
      - currentKeyValue : ckv          (float, float)  [query,edit]
          Get or set the value of the currently selected key.
    
      - customCurveWidget : ccw        (bool)          [create,query,edit]
          Determines whether or not the curve widget is using a custom curve. When a custom curve is used, it is stored by a
          falloff curve in the brush tool settings, and the flag should be true.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteControlVertex : dcv      (int)           [edit]
          Used to delete a control vertex of the curve.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - optionVar : ov                 (unicode)       [create,query,edit]
          Specifies the name of the option var used to store and retrieve the string value capturing the curve.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - readOnly : ro                  (bool)          [create,query,edit]
          Specifies if the curve is read only or not. If true, the curve can't be edited.
    
      - snapToGrid : stg               (bool)          [create,query,edit]
          Specifies whether or not curve control points snap to grid when they are being moved.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.falloffCurve`
    """

    pass


def dynPaintEditor(*args, **kwargs):
    """
    Create a editor window that can be painted into
    
    Flags:
      - activeOnly : ao                (bool)          [query,edit]
          For Scene mode, this determines if only the active strokes will be refreshed.
    
      - autoSave : autoSave            (bool)          [query,edit]
          For Canvas mode, this determines if the buffer will be saved to a disk file after every stroke. Good for painting
          textures and viewing the results in shaded display in the model view.
    
      - camera : cam                   (unicode)       [query,edit]
          Sets the name of the camera which the Paint Effects panel looks through.
    
      - canvasMode : cm                (bool)          [query,edit]
          Sets the Paint Effects panel into Canvas mode if true.
    
      - canvasUndo : cu                (bool)          [edit]
          Does a fast undo in Canvas mode. This is a special undo because we are not using any history when we paint in Canvas
          mode so we provide a single level undo for the Canvas.
    
      - changeCommand : cc             (unicode, unicode, unicode, unicode) [create,query,edit]
          Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the
          command when something changes in the editor The command should have this prototype :  command(string $editor, string
          $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2:
          buffer (single/double)3: axis 4: image displayed5: image saved in memory
    
      - clear : cl                     (float, float, float) [edit]
          Clears the buffer (if in Canvas mode) to the floating point values (R,G,B).
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - currentCanvasSize : ccs        (bool)          [query]
          In Query mode, this returns the (X,Y) resolution of the current canvas.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - displayAppearance : dsa        (unicode)       [query,edit]
          Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded,
          flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and
          boundingBoxare valid for the interactive mode.
    
      - displayFog : dfg               (bool)          [query,edit]
          For Scene mode, this determines if fog will be displayed in the Paint Effects panel when refreshing the scene. If fog is
          on, but this is off, fog will only be drawn on the strokes, not the rest of the scene.
    
      - displayImage : di              (int)           [query,edit]
          Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack
          using the si/saveImageflag.
    
      - displayLights : dsl            (unicode)       [query,edit]
          Sets the lighting for shaded mode.  Possible values are selected, active, all, default.
    
      - displayStyle : dst             (unicode)       [create,query,edit]
          Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask
          channellumto display the luminance of the image
    
      - displayTextures : dtx          (bool)          [query,edit]
          Turns on or off display of textures in shaded mode
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - doubleBuffer : dbf             (bool)          [create,query,edit]
          Set the display in double buffer mode
    
      - drawAxis : da                  (bool)          [create,query,edit]
          Set or query whether the axis will be drawn.
    
      - drawContext : drc              (bool)          [query]
          Returns the name of the context.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fastUpdate : fu                (int)           []
    
      - fileName : fil                 (unicode)       [query,edit]
          This sets the file to which the canvas will be saved.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - iconGrab : ig                  (bool)          [edit]
          This puts the Paint Effects panel into Grab Icon mode where the user is expected to drag out a section of the screen to
          be made into an icon.
    
      - loadImage : li                 (unicode)       [edit]
          load an image from disk and set it as the current Editor Image
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - menu : mn                      (unicode)       [create]
          Sets the name of the script used to build a menu in the editor. The script takes the editor name as an argument.
    
      - nbImages : nim                 (bool)          [query]
          returns the number of images
    
      - newImage : ni                  (int, int, float, float, float) [query,edit]
          Starts a new image in edit mode, setting the resolution to the integer values (X,Y) and clearing the buffer to the
          floating point values (R,G,B). In Query mode, this returns the (X,Y) resolution of the current Image.
    
      - paintAll : pa                  (float)         [edit]
          Redraws the buffer in current refresh mode.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - redrawLast : rl                (bool)          [edit]
          Redraws the last stroke again. Useful when it's brush has just changed. This feature does a fast undo and redraws the
          stroke again.
    
      - refresh : ref                  (bool)          [edit]
          requests a refresh of the current Editor Image.
    
      - refreshMode : rmd              (int)           [query,edit]
          Sets the refresh mode to the specified value. 0 - Do not draw strokes on refresh, 1 - Redraw strokes in wireframe mode,
          2 - Redraw strokes in final rendered mode.
    
      - removeAllImages : ra           (bool)          [edit]
          remove all the Editor Images from the Editor Image Stack
    
      - removeImage : ri               (bool)          [edit]
          remove the current Editor Image from the Editor Image Stack
    
      - rollImage : rig                (float, float)  [edit]
          In Canvas mode, this rolls the image by the floating point values (X,Y). X and Y are between 0 (no roll) and 1 (full
          roll). A value of .5 rolls the image 50% (ie. the border moves to the center of the screen.
    
      - saveAlpha : sa                 (bool)          [query,edit]
          For Canvas mode, this determines if the alpha will be saved when storing the canvas to a disk file.
    
      - saveBumpmap : sbm              (unicode)       [query,edit]
          Saves the current buffer as a bump map to the specified file.
    
      - saveImage : si                 (bool)          [edit]
          save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently
          saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current
          Editor Image to a previously saved image use the di/displayImageflag.
    
      - scaleBlue : sb                 (float)         [create,query,edit]
          Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000
    
      - scaleGreen : sg                (float)         [create,query,edit]
          Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000
    
      - scaleRed : sr                  (float)         [create,query,edit]
          Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - singleBuffer : sbf             (bool)          [create,query,edit]
          Set the display in single buffer mode
    
      - snapShot : snp                 (bool)          [edit]
          Takes a snapshot of the current camera view.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - swap : swp                     (int)           []
    
      - tileSize : ts                  (int)           [edit]
          Sets the size of the tile for the hardware texture redraw of the display buffer.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - undoCache : uc                 (bool)          [edit]
          By default the last image is cached for undo. If this is set false, then undoing will be disabled in canvas mode and
          undo in scene mode will force a full refresh. Less memory will be used if this is set false before the first clear or
          refresh of the current scene.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - wrap : wr                      (bool, bool)    [query,edit]
          For Canvas mode, should the buffer wrap in U, and V (respectively) when painting.
    
      - writeImage : wi                (unicode)       [edit]
          write the current Editor Image to disk
    
      - zoom : zm                      (float)         [query,edit]
          Zooms the Canvas image by the specified value.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.dynPaintEditor`
    """

    pass


def savePrefs(*args, **kwargs):
    """
    This command saves preferences to disk. If no flags are specified then all pref types get saved out.
    
    Flags:
      - colors : c                     (bool)          [create]
          Save the color prefs to disk
    
      - general : g                    (bool)          [create]
          Save the general prefs to disk (optionVars)
    
      - hotkeys : hk                   (bool)          [create]
          Save the hotkeys to disk
    
      - menuSets : ms                  (bool)          [create]
          Save the menuSet preferences to disk
    
      - plugins : pl                   (bool)          [create]
          Save the plug-in prefs to disk
    
      - uiLayout : ui                  (bool)          [create]
          Save each window's size and position to disk                  Flag can have multiple arguments, passed either as a tuple
          or a list.
    
    
    Derived from mel command `maya.cmds.savePrefs`
    """

    pass


def multiTouch(*args, **kwargs):
    """
    Used to interact with the Gestura (multi-touch) library.                 In query mode, return type is based on queried
    flag.
    
    Flags:
      - gestures : g                   (bool)          [create,query]
          Enables/Disables multi touch gestures.
    
      - trackpad : t                   (int)           [create,query]
          Sets the trackpad mode.  Values can be: 1 - Cursor Control only2 - Multi-touch Gestures Only3 - Cursor and Multi-
          touchNote: this is a Maconly flag.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.multiTouch`
    """

    pass


def intSlider(*args, **kwargs):
    """
    Create a slider control that accepts only integer values and is bound by a minimum and maximum value.  The slider
    displays a marker indicating the current value of the slider relative to it's minimum and maximum values.  Click and
    drag the marker or on the slider itself to change the current value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the slider's value marker.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontal : hr                (bool)          [create,query]
          Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          Upper limit of the slider.
    
      - minValue : min                 (int)           [create,query,edit]
          Lower limit of the slider.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - step : s                       (int)           [create,query,edit]
          The step value represents the amount the value will increase or decrease when you click either side of the slider.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int)           [create,query,edit]
          Value of the slider.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.intSlider`
    """

    pass


def currentMenuParent():
    """
    shortcut for ``ui.PyUI(setParent(q=1, menu=1))``
    """

    pass


def nodeEditor(*args, **kwargs):
    """
    This command creates/edits/queries a nodeEditor editor. The optional argument is the name of the control.
    
    Flags:
      - activeTab : at                 (int)           [query,edit]
          Gets/sets the index of the tab widget's (active) visible tab. Note: the index is zero-based.
    
      - addNewNodes : ann              (bool)          [create,query,edit]
          New nodes should be added to the graph, default is on.
    
      - addNode : an                   (unicode)       [edit]
          Adds a specified node to the graph. Passing an empty string means the current model selection will be added to the
          graph.
    
      - additiveGraphingMode : agm     (bool)          [create,query,edit]
          When enabled, the graphing will add node networks to the existing graph instead of replacing it.
    
      - allAttributes : ala            (bool)          [create,query,edit]
          Attributes should not be filtered out of the graph, default is off.
    
      - allNodes : aln                 (bool)          [create,query,edit]
          Nodes should not be filtered out of the graph, default is off.
    
      - allowNewTabs : ant             (bool)          [query]
          Query only. Returns whether this Node Editor is allowed to have new tabs added, either by creating a new tab or
          duplicating an existing one.
    
      - allowTabTearoff : att          (bool)          [create,edit]
          Control whether or not the tabs can be torn off and floated. Defaults to true.
    
      - autoSizeNodes : asn            (bool)          [create,query,edit]
          When enabled, default node widths will be dynamically determined by the node name length, default is on.
    
      - backToParentView : bpv         (bool)          [edit]
          Show the contents of parent container node.
    
      - beginCreateNode : bcn          (bool)          [edit]
          Begin interactive node-creation at the mouse position. This will create a control which allows quick creation of a node
          in the editor.The actual creation is delegated to the createNodeCommand.
    
      - beginNewConnection : bnc       (unicode)       [edit]
          Begin a new interactive connection at the given attribute.
    
      - breakSelectedConnections : bsc (bool)          [edit]
          Break the selected attribute connections.
    
      - closeAllTabs : cat             (bool)          [edit]
          Close all tabs on the tab widget.
    
      - closeTab : clt                 (int)           [edit]
          Closes the tab on the tab widget at the specified index. Note: using this flag on a torn-off tab will close the node
          editor since there can be only a single tab. In this case the index argument is ignored.
    
      - consistentNameSize : cns       (bool)          [create,query,edit]
          When enabled, the size of the node name will consistently match the current zoom level. When disabled, the node name
          size will remain the same after zooming out past a certain level. Default is on.
    
      - contentsChangedCommand : cc    (script)        [create,query,edit]
          Specifies a function to be called whenever the contents of the node editor changes.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - createInfo : ci                (unicode)       [create,edit]
          Creates or modifies a hyperGraphInfo network to save the state of the editor.
    
      - createNodeCommand : cnc        (script)        [create,query,edit]
          Specifies a function to be used to create nodes through the editor. The function will be passed the name of the chosen
          node type. This is used by the tab-create workflow. By default createNodeis used.
    
      - createTab : ct                 (int, unicode)  [create,edit]
          Create a new tab inserting it into the tab widget at the specified index. If index is out of range (such as -1), the tab
          is simply appended. You can optionally (Python only) specify a tab label, otherwise it will be set with a default name.
          In Mel using an empty string () for the tab label will set it with a default name. The new tab becomes the current
          (active) tab. Note: Only certain Node Editors are allowed to create new tabs, which can be checked by using the
          -allowNewTabs flag.
    
      - customAttributeListEdit : cal  (unicode, unicode) [query,edit]
          Create/Edit the custom attribute list for the given node by entering a special Edit Modefor the node. Note: only one
          node in the node editor can be in this edit mode at a time. If another node is selected the edit mode will end
          automatically. To end the edit mode use an empty string for node.Takes an optional edit mode command which accepts:
          hideall(sets all the attributes to hidden), showall(sets all the attributes to visible), preview(temporarily shows only
          the visible attributes), revert(restores the visibility settings of the attributes to what they were before edit mode)
          and reset(the visible attributes are reset so that only the interesting attributes are displayed).In query mode returns
          the name of the node, if any, in edit mode. Note: the optional string argument is ignored in query mode.
    
      - cycleHUD : ch                  (bool)          [create,edit]
          Change the HUD to the next state.
    
      - defaultPinnedState : dps       (bool)          [create,query,edit]
          Sets default pinned state of all nodes, 1 for pinned, 0 for unpinned. default value 0
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteSelected : deleteSelected (bool)          [edit]
          Delete the selected nodes and break the selected connections.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - dotFormat : dot                (unicode)       [query,edit]
          In query mode:Get the graph information in DOT format. The flag argument specifies a file path to write to.If -is
          supplied, the data is returned as a string, otherwise the size in bytes of the written file is returned.In edit
          mode:Sets the positions of nodes in the graph from a Graphviz output file in plainformat. Only the node position, width
          and height information is used.If the argument starts with graph , it will be treated as the plain data instead of a
          filename.
    
      - downstream : ds                (bool)          [create,edit]
          Include nodes that are downstream of the root nodes.
    
      - duplicateTab : dpt             (int, int)      [create,edit]
          Duplicates the tab at the specified index, placing it at the second optional (Python only) specified index. To place
          duplicated tab at the end use -1. The duplicated tab becomes the current (active) tab. Note: Only certain Node Editors
          are allowed to duplicate tabs, which can be checked by using the -allowNewTabs flag.
    
      - editorMode : em                (unicode)       []
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extendToShapes : ets           (bool)          [create,query,edit]
          Include child shapes for each selected transform.
    
      - feedbackConnection : fbc       (bool)          [query]
          Returns a description of the connection(s) at the current mouse position in the editor view, if any. The connection(s)
          will be returned as a list of strings, which are pairs of plugs for each connection.
    
      - feedbackNode : fbn             (bool)          [query]
          Returns the name of the node at the current mouse position in the editor view, if any.
    
      - feedbackPlug : fbp             (bool)          [query]
          Returns the name of the plug (attribute) at the current mouse position in the editor view, if any.
    
      - feedbackTabIndex : fbi         (bool)          [query]
          Returns the index of the tab at the current mouse position in the editor view, if any.
    
      - feedbackType : fbt             (bool)          [query]
          Returns the most specific type of the feedback item (item at the current mouse position) in the editor view, if any.
          Will be one of plug, node, tab, connectionor an empty string. Use the other feedback\* flags to query the item
          description.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - filterCreateNodeTypes : fcn    (script)        [create,query,edit]
          Specifies a function to be used to filter the list of node types which appear in the inline-creation menu (tab key). The
          function should accept one string array argument and return a string array.
    
      - focusCommand : fc              (script)        [create,query,edit]
          Specifies a function to be called whenever focus changes for the node editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - frameAll : fa                  (bool)          [edit]
          Frame all the contents of the node editor.
    
      - frameModelSelection : fms      (bool)          [edit]
          Frame the current model selection.
    
      - frameSelected : fs             (bool)          [edit]
          Frame the selected contents of the node editor.
    
      - getNodeList : gnl              (bool)          [query]
          Returns a list of all nodes displayed in the editor.
    
      - graphSelectedConnections : gsc (bool)          [edit]
          Graph the nodes connected by the selected attribute connections.
    
      - graphSelection : gsl           (bool)          [edit]
          Graph the nodes that are currently selected.
    
      - gridSnap : gs                  (bool)          [create,query,edit]
          Toggle grid snapping on/off.
    
      - gridVisibility : gv            (bool)          [create,query,edit]
          Toggle grid visiblity on/off.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - hudMessage : hm                (unicode, int, float) [edit]
          Display the given message on the editor HUD. The flag arguments are (message, type, duration), where type is:upper-left
          corner.top center.upper-right corner.center.Duration 0 means the message stays until removed. Duration 0 means it stays
          for that number of seconds.An empty message erases whatever is currently displayed for the given type.
    
      - ignoreAssets : ia              (bool)          [create,query,edit]
          Deprecated. Do not use in scripts.
    
      - inContainerView : icv          (bool)          [query]
          Query only. Returns whether the current editor view is a display of the contents of a particular container. When in such
          a view, most graphing functionality will be blocked to maintain its accuracy.
    
      - isContainerNode : icn          (unicode)       [query]
          Query only. Returns whether or not the given node is a container node.
    
      - island : isl                   (bool)          [query,edit]
          Deprecated. Do not use in scripts.
    
      - keyPressCommand : kpc          (script)        [create,query,edit]
          Specifies a function to be called when a key is pressed and the editor has focus.The function will be passed the name of
          the editor and an (uppercase) string representation of the key that was pressed, and should return true if the key was
          handled, and false if it was not.Note: `getModifiers` can be used to query the current state of key modifiers.
    
      - keyReleaseCommand : krc        (script)        [create,query,edit]
          Specifies a function to be called when a key is released and the editor has focus.The function will be passed the name
          of the editor and an (uppercase) string representation of the key that was released, and should return true if the key
          was handled, and false if it was not.Note: `getModifiers` can be used to query the current state of key modifiers.
    
      - layout : lay                   (bool)          [edit]
          Perform an automatic layout of the graph.
    
      - layoutCommand : lc             (script)        [create,query,edit]
          Specifies a function to override the default action when a graph layout is required. The function will be passed the
          name of editor. The function should arrange the nodes in the graph.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - nodeSwatchSize : nss           (unicode)       [edit]
          Sets the icon swatch size of selected nodes in the active scene (all nodes if none are selected). Size values are
          smalland large.
    
      - nodeTitleMode : ntm            (unicode)       [create,query,edit]
          Gets/sets the node title display mode of the current scene. Mode values are: name(Display node names), type(Display node
          types), none(Do not display titles)
    
      - nodeViewMode : nvm             (unicode)       [edit]
          Sets the attribute view mode of selected nodes in the active scene (all nodes if none are selected). Mode values are:
          simple(no attributes displayed), connected(connected attributes only), all(all interesting attributes displayed) and
          custom(use custom attribute view).
    
      - openContainerView : ocv        (unicode, bool) [edit]
          Open a view of the contents of the given container node. The boolean argument determines whether or not to open it in a
          new tab (rather than as a child of the current container)
    
      - panView : pv                   (float, float)  [edit]
          Pan the view by the given amount. Arguments of 0 0 will reset the view translation.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - pinSelectedNodes : psn         (bool)          [edit]
          Pins or unpins the selected nodes. If no nodes are selected, this will apply to all displayed nodes.
    
      - popupMenuScript : pms          (script)        [create,query,edit]
          Set the script to be called to register the popup menu with the control for this editor. The script will be called with
          a string argument which gives the name of the editor whose control the popup menu should be parented to.
    
      - primary : pr                   (bool)          [query]
          Query only. Returns whether this node editor is the primaryone. The primary editor is the only one that will show and
          allow tabs.
    
      - redockTab : rdt                (bool)          [query,edit]
          If this tab was torn-off from the primary node editor, then the tab and all its data will be re-docked back into the
          primary editor and this node editor will be closed. In query mode returns whether this tab was torn-off and is available
          to be re-docked.
    
      - removeDownstream : rd          (bool)          [edit]
          Removes all items downstream to the currently active selection.
    
      - removeNode : rem               (unicode)       [edit]
          Removes a node from the graph. An empty string indicates that currently selected nodes should be removed.
    
      - removeUnselected : run         (bool)          [edit]
          Removes unselected nodes from graph.
    
      - removeUpstream : ru            (bool)          [edit]
          Removes all items upstream to the currently active selection.
    
      - renameNode : ren               (unicode)       [edit]
          Rename a node in the graph. Depending on the zoom level of the view, an edit field will either appear on the node item
          or in a popup dialog to allow the new name to be entered.
    
      - renameTab : rt                 (int, unicode)  [edit]
          Renames the tab at the specified index with the (optional) name. If no name is specified (Python only) or an empty
          string () is used then an inline edit field is opened to rename the tab.
    
      - restoreInfo : ri               (unicode)       [create,edit]
          Restores the editor state corresponding to supplied hyperGraphInfo node.
    
      - restoreLastClosedTab : rlt     (bool)          [query,edit]
          If this node editor is the primary one, then restore the last closed tab (if any). In query mode returns whether there
          is a tab available to restore.
    
      - rootNode : rn                  (unicode)       [create,edit]
          Add a node name as a root node of the graph. Passing an empty string clears the current root node list. When queried,
          returns the list of current root nodes.
    
      - rootsFromSelection : rfs       (bool)          [create,edit]
          Specify that the root nodes for the graph should taken from the currently active selection.
    
      - scaleView : sv                 (float)         [edit]
          Scales the graph view by the given factor. An argument of zero means reset to default.
    
      - selectAll : sa                 (bool)          [edit]
          Select all items in the graph.
    
      - selectConnectionNodes : scn    (bool)          [edit]
          Select the nodes connected by the selected attribute connections.
    
      - selectDownstream : sd          (bool)          [edit]
          Select all items downstream to the currently active selection.
    
      - selectFeedbackConnection : sfc (bool)          [edit]
          Select the feedback connection(s) in the editor view, if any.
    
      - selectNode : sln               (unicode)       [query,edit]
          Select a node in the graph. Passing an empty string clears the current selection. When queried, returns the list of
          currently selected nodes.
    
      - selectUpstream : su            (bool)          [edit]
          Select all items upstream to the currently active selection.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - settingsChangedCallback : scc  (script)        [create,query,edit]
          Specifies a function to be called whenever settings for the node editor get changed.
    
      - shaderNetworks : sns           (bool)          [edit]
          Graph the shader network for all the objects on the selection list that have shaders.
    
      - showAllNodeAttributes : saa    (unicode)       [edit]
          Display all attributes for the given node, not just primary attributes. Passing an empty string will apply this to all
          currently selected nodes. If no nodes are selected, this will be applied to all displayed nodes in the graph.
    
      - showNamespace : sn             (bool)          [create,query,edit]
          Specifies whether nodes will have their namespace displayed if they are not in the root namespace.
    
      - showSGShapes : ssg             (bool)          [create,query,edit]
          Show shapes that are connected to the network through a shading group.
    
      - showShapes : ss                (bool)          [create,query,edit]
          Show shape nodes.
    
      - showTabs : tab                 (bool)          [create]
          Creation time flag to explicitly control the visibility of the tabs. If this is set to true or false the tabs visibility
          will respect that setting. If this flag is not explicitly set then the tabs will be visible in the primary node editor
          and tear off tabs, but will not be visible for other editors that are not the primary editor.
    
      - showTransforms : st            (bool)          [create,query,edit]
          Show transforms.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - syncedSelection : ssl          (bool)          [create,query,edit]
          Keep the graph selection in sync with the model selection.
    
      - tabChangeCommand : tcc         (script)        [create,edit]
          Command executed when the current (active) tab is changed. Re-selecting the current tab will not invoke this command.
          NOTE: This command will also be executed when switching into, out of, and between compound views.
    
      - toggleAttrFilter : taf         (bool)          [edit]
          Toggles the display of the attribute filter field on selected nodes. If any of the selected nodes have the field
          displayed, this operation will hide the field for all nodes in the selection. If no nodes are selected, this will apply
          to all displayed nodes.
    
      - toggleSelectedPins : tsp       (bool)          [edit]
          Toggles pinned state on selected nodes. If any selected nodes are unpinned, this operation will choose to pin all nodes.
          If no nodes are selected, this will apply to all displayed nodes.
    
      - toggleSwatchSize : tss         (unicode)       [edit]
          Toggles the swatch size of the given node between small and large. If supplied node name was empty, this will be applied
          to selection, and if no nodes are selected this is applied to all nodes in editor. When selection is a combination of
          small and large swatch sizes, this will set selection to large swatch mode.
    
      - toolTipCommand : ttc           (script)        [create,query,edit]
          Specifies a function to override the tooltip that is displayed for a node. The function will be passed the name of the
          node under the cursor, and should return a text string to be displayed. A simple HTML 4 subset is supported.
    
      - traversalDepthLimit : tdl      (int)           [create,query,edit]
          Specify the maximum number of edges which will be followed from any root node when building the graph. A negative value
          means unlimited. Default is unlimited.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - upstream : ups                 (bool)          [create,edit]
          Include nodes that are upstream of the root nodes.
    
      - useAssets : ua                 (bool)          [create,query,edit]
          Use assets and published attributes instead of contents and actual attributes.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - vnnCompound : vc               (bool)          [query]
          Query only. Returns the path name of the currently viewed compound
    
      - vnnDgContainer : vd            (bool)          [query]
          Query only. Returns the name of the dg container that owns the currently viewed compound
    
      - vnnRuntime : vr                (bool)          [query]
          Query only. When in container view, returns the name of the runtime to which the dg container belongs. When not in
          container view this returns an empty string.                  Flag can have multiple arguments, passed either as a tuple
          or a list.
    
    
    Derived from mel command `maya.cmds.nodeEditor`
    """

    pass


def palettePort(*args, **kwargs):
    """
    This command creates an array of color cells. It could be used to to store an retrieve some colors you want to manage
    during your working session.
    
    Flags:
      - actualTotal : at               (int)           [create,query]
          Set the actual number of palette entries. This number must be greater than zero, but not be greater than maximum number
          of palette entries defined by the dimensionsflag.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          This command string will be executed when a color in the palette is changed.
    
      - colorEditable : ced            (bool)          [create,query,edit]
          If true then the user can modify the current index's color.
    
      - colorEdited : ce               (script)        [create,edit]
          This command string will be executed when a color in the palette is edited.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - dimensions : dim               (int, int)      [create,query]
          Set the dimensions of the array.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          If true then the user can change the current color.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (int, int, float, float, float) [create,query,edit]
          Set a color for a given cell, using HSV format. On query return the color of the current cell.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - redraw : r                     (bool)          [create,edit]
          Forces a redraw of the array
    
      - rgbValue : rgb                 (int, float, float, float) [create,query,edit]
          Set a color for a given cell, using RGB format. On query return the color of the current cell.
    
      - setCurCell : scc               (int)           [create,query,edit]
          Set the current cell in the array to the given index. Returns the current cell when queried.
    
      - topDown : td                   (bool)          [create]
          If this flag is true, it indicates that first entry should appear in top left as opposed to the bottom left.
    
      - transparent : t                (int)           [create,query,edit]
          Set a given cell to be the transparent color.  A cell value of -1 indicates that no cell is transparent.  On query
          returns the current transparent cell.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.palettePort`
    """

    pass


def _findLongName(name, type='None'):
    pass


def mayaDpiSetting(*args, **kwargs):
    """
    Provide Maya interface scaling based on system DPI or custom scale setting or no scaling. Please note that the change
    will only take effect after relaunching Maya.
    
    Flags:
      - mode : m                       (int)           [create,query]
          Specifies the interface scaling mode: 0 - System Dpi Based Scaling1 - Custom Scaling (Must provide the custom scale
          value with flag -scaleValue2 - No Scaling
    
      - realScaleValue : rsv           (bool)          [query]
          This is a query mode only flag which returns the real scale value depending on current scaling mode and defined scale
          value: mode 0 - Return the current real scale value which is the ratio of current system dpi to default system dpimode 1
          - Return the current real scale value which is the product of the defined scale value and the ratio of current system
          dpi to default system dpimode 2 - Always return 1.0 which indicates real scale is 100% when the scaling mode is no
          scaling.
    
      - scaleValue : sv                (float)         [create,query]
          Specifies the custom scale of the interface if scaling mode is 1. The allowed values are [1.0, 1.25, 1.5, 2.0]. In query
          mode, return the scale value depend on current scaling mode: mode 0 - Always return 1.0 which indicates 100% scalingmode
          1 - Return the custom scale value usedmode 2 - Always return 1.0 which indicates no custom scaling
    
      - systemDpi : sd                 (bool)          [query]
          This is a query mode only flag which returns the current system dpi value.                                 Flag can have
          multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.mayaDpiSetting`
    """

    pass


def showWindow(*args, **kwargs):
    """
    Make a window visible. If no window is specified then the current window (most recently created) is used. See also the
    windowcommand's vis/visibleflag. If the specified window is iconified, it will be opened.
    
    
    Derived from mel command `maya.cmds.showWindow`
    """

    pass


def promptForPath(**kwargs):
    """
    Prompt the user for a folder path
    """

    pass


def rangeControl(*args, **kwargs):
    """
    This command creates a control used for displaying and modifying the current playback range. Note: only one master
    rangeControl may exist. Any addition rangeControls that a user creates are slaved to the master range control widget.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changedCommand : cc            (script)        [create,edit]
          script to be executed when the range changes
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxRange : max                 (time)          [create,query,edit]
          Controls the max range displayable in the control
    
      - minRange : min                 (time)          [create,query,edit]
          Controls the max range displayable in the control
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - widthHeight : wh               (int, int)      [create,edit]
          Controls the dimensions of the control                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.rangeControl`
    """

    pass


def renderWindowEditor(*args, **kwargs):
    """
    Create a editor window that can receive the result of the rendering process
    
    Flags:
      - autoResize : ar                (bool)          [create,query,edit]
          Lets the render view editor automatically resize the viewport or not.
    
      - blendMode : blm                (int)           [create,query,edit]
          Sets the blend mode for the render view. New image sent to the render view will be blended with the previous image in
          the render view, and the composited image will appear.
    
      - caption : cap                  (unicode)       [create,query,edit]
          Sets the caption which appears at the bottom of the render view.
    
      - changeCommand : cc             (unicode, unicode, unicode, unicode) [create,query,edit]
          Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the
          command when something changes in the editor The command should have this prototype :  command(string $editor, string
          $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2:
          buffer (single/double)3: axis 4: image displayed5: image saved in memory
    
      - clear : cl                     (int, int, float, float, float) [create,query,edit]
          Clear the image with the given color at the given resolution. Argumnets are respecively: width height red green blue.
    
      - cmEnabled : cme                (bool)          [query,edit]
          Turn on or off applying color management in the View.  If set, the color management configuration set in the current
          view is used.
    
      - colorManage : com              (bool)          [edit]
          When used with the writeImage flag, causes the written image to be color-managed using the settings from the view color
          manager attached to the view.
    
      - compDisplay : cd               (int)           [create,query,edit]
          0 : disable compositing.1 : displays the composited image immediately. For example, when foreground layer tile is sent
          to the render view window, the composited tile is displayed in the render view window, and the original foreground layer
          tile is not displayed.2 : display the un-composited image, and keep the composited image for the future command. For
          example, when foreground layer tile is sent to the render view window, the original foreground layer tile is not
          displayed, and the composited tile is stored in a buffer.3 : show the current composited image. If there is a composited
          image in the buffer, display it.
    
      - compImageFile : cif            (unicode)       [create,query,edit]
          Open the given image file and blend with the buffer as if the image was just rendered.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - currentCamera : crc            (unicode)       [create,query,edit]
          Get or set the current camera. (used when redoing last render)
    
      - currentCameraRig : crg         (unicode)       [create,query,edit]
          Get or set the current camera rig name. If a camera rig is specified, it will be used when redoing the last render as
          opposed to the currentCamera value, as the currentCamera value will hold the child camera last used for rendering the
          camera rig.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - displayImage : di              (int)           [query,edit]
          Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack
          using the si/saveImageflag.
    
      - displayImageViewCount : dvc    (int)           [query]
          Query the number of views stored for a given image in the Editor Image Stack. This is not the same as querying using
          viewImageCountwhich returns the number of views for the current rendered image.
    
      - displayStyle : dst             (unicode)       [create,query,edit]
          Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask
          channellumto display the luminance of the image
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - doubleBuffer : dbf             (bool)          [create,query,edit]
          Set the display in double buffer mode
    
      - drawAxis : da                  (bool)          [create,query,edit]
          Set or query whether the axis will be drawn.
    
      - editorName : en                (bool)          [query]
          Returns the name of the editor, or an empty string if the editor has not been created yet.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - exposure : exp                 (float)         [query,edit]
          The exposure value used by the color management of the current view.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - frameImage : fi                (bool)          [create,query,edit]
          Frames the image inside the window.
    
      - frameRegion : fr               (bool)          [create,query,edit]
          Frames the region inside the window.
    
      - gamma : ga                     (float)         [query,edit]
          The gamma value used by the color management of the current view.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - loadImage : li                 (unicode)       [edit]
          load an image from disk and set it as the current Editor Image
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - marquee : mq                   (float, float, float, float) [create,query,edit]
          The arguments define the four corners of a rectangle: top left bottom right. The rectangle defines a marquee for the
          render computation.
    
      - nbImages : nim                 (bool)          [query]
          returns the number of images
    
      - nextViewImage : nvi            (bool)          [create,edit]
          The render editor has the capability to render multiple cameras within a single view. This is different from image
          binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-
          side. The nextViewImage flag tells the editor that it should prepare its internal image storage mechanism to store to
          the next view location.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - pcaption : pca                 (unicode)       [create,query,edit]
          Get or set the permanent caption which appears under the image that is currently showing in the render editor.
    
      - realSize : rs                  (bool)          [create,query,edit]
          Display the image with a one to one pixel match.
    
      - refresh : ref                  (bool)          [edit]
          requests a refresh of the current Editor Image.
    
      - removeAllImages : ra           (bool)          [edit]
          remove all the Editor Images from the Editor Image Stack
    
      - removeImage : ri               (bool)          [edit]
          remove the current Editor Image from the Editor Image Stack
    
      - resetRegion : rr               (bool)          [create,query,edit]
          Forces a reset of any marquee/region.
    
      - resetViewImage : rvi           (bool)          [create,edit]
          The render editor has the capability to render multiple cameras within a single view. This is different from image
          binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-
          side. The resetViewImage flag tells the editor that it should reset its internal image storage mechanism to the first
          image. This would happen at the very start of a render view render.
    
      - saveImage : si                 (bool)          [edit]
          save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently
          saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current
          Editor Image to a previously saved image use the di/displayImageflag.
    
      - scaleBlue : sb                 (float)         [create,query,edit]
          Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000
    
      - scaleGreen : sg                (float)         [create,query,edit]
          Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000
    
      - scaleRed : sr                  (float)         [create,query,edit]
          Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - showRegion : srg               (int, int)      [create,query,edit]
          Shows the current region at the given resolution. The two parameters define the width and height.
    
      - singleBuffer : sbf             (bool)          [create,query,edit]
          Set the display in single buffer mode
    
      - snapshot : snp                 (unicode, int, int) [create,query,edit]
          Makes a copy of the camera of the model editor at the given size. First argument is the editor name, second is the
          width, third is the height.
    
      - snapshotMode : snm             (bool)          []
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - stereo : s                     (int)           [create,query,edit]
          Puts the editor into stereo image mode.  The effective resolution of the output image is twice the size of the
          horizontal size. The orientation of the images can be set using the stereoOrientation flag.
    
      - stereoImageOrientation : sio   (unicode, unicode) [create,query,edit]
          Specifies the orientation of stereo camera renders.  The first argument specifies the orientation value for the
          firstleft image and the second argument specifies the orientation value for the right image. The orientation values are
          'normal', the image appears as seen throught he camera, or 'mirrored', the image is mirrored horizontally.
    
      - stereoMode : sm                (unicode)       [create,query,edit]
          Specifies how the image is displayed in the view.  By default the stereo is rendered with a side by side image.  The
          rendered image is a single image that is twice the size of a normal image, 'both'. Users can also choose to display as
          'redcyan', 'redcyanlum', 'leftonly', 'rightonly', or 'stereo'.  both - displays both the left and right redcyan -
          displays the images as a red/cyan pair. redcyanlum - displays the luminance of the images as a red/cyan pair. leftonly -
          displays the left side only rightonly - displays the right side only stereo - mode that supports Crystal Eyes(tm) or
          Zscreen (tm) renders
    
      - toggle : tgl                   (bool)          [create,query,edit]
          Turns the ground plane display on/off.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - viewImageCount : vic           (int)           [create,query,edit]
          The render editor has the capability to render multiple cameras within a single view. This is different from image
          binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-
          side. The viewImageCount flag tells the editor that it should prepare its internal image storage mechanism for a given
          number of views.
    
      - viewTransformName : vtn        (unicode)       [query,edit]
          Sets/gets the view transform to be applied if color management is enabled in the current view.
    
      - writeImage : wi                (unicode)       [edit]
          write the current Editor Image to disk                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.renderWindowEditor`
    """

    pass


def iconTextCheckBox(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates an iconTextCheckBox.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,query,edit]
          Command executed when the control's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the
          callback, or use onCommand and offCommand as separate callbacks.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flat : fla                     (bool)          [create,query,edit]
          Sets whether the control will be a flat button (0 false, 1 true).
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - highlightImage : hi            (unicode)       [create,query,edit]
          Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with
          the -i/imageflag. This is a Windows only flag.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,query,edit]
          Command executed when the control is turned off.
    
      - onCommand : onc                (script)        [create,query,edit]
          Command executed when the control is turned on.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - selectionHighlightImage : shi  (unicode)       [create,query,edit]
          Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the
          image specified with the -i/imageflag. This is a Windows only flag.
    
      - selectionImage : si            (unicode)       [create,query,edit]
          Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag.
          This is a Windows only flag.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (bool)          [create,query,edit]
          Sets or returns the state of the control.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextCheckBox`
    """

    pass


def workspaceLayoutManager(*args, **kwargs):
    """
    The Workspace Layout Manager loads and saves the layout of the various toolbars and windows in the user interface. This
    command allows listing and managing their properties.
    
    Flags:
      - collapseMainWindowControls : cmw (unicode, bool) [create]
          Saves main window layout and collapses all other controls in main window except the given one (first parameter) if it
          doesn't have any size constraint. Second parameter specifies if main window UI elements should be hidden or not.
    
      - current : cu                   (bool)          [create,query]
          Get the name of the current layout.
    
      - delete : d                     (unicode)       [create]
          Delete the given workspace. The string is the name of the layout, not the file name.
    
      - i : i                          (unicode)       [create]
          Import the given workspace file to the workspaces directory. The string is an absolute path.
    
      - listLayouts : ll               (bool)          [create]
          List the names of the registered layouts.
    
      - listUserLayouts : lul          (bool)          []
    
      - modified : m                   (unicode)       [create]
          Check whether or not the specified layout has been modified.
    
      - parentWorkspaceControl : pwc   (unicode)       [create]
          Returns the parent workspace control of the given UI (panel) or empty string if it doesn't exist.
    
      - reset : rs                     (bool)          [create]
          Reset the current workspace to its original layout. Factory layouts will be reverted to default while user layouts will
          be reloaded from disk.
    
      - restoreMainWindowControls : rmw (bool)          [create]
          Restores main window layout to the one saved with -cmw/-collapseMainWindowControlsflag . The loaded workspace file will
          be deleted once it is restored.
    
      - save : s                       (bool)          [create]
          Save the current layout.
    
      - saveAs : sa                    (unicode)       [create]
          Save the current layout under the specified name.
    
      - setCurrent : sc                (unicode)       [create]
          Load the given workspace.  The string is the name of the layout, not the file name.
    
      - setCurrentCallback : scc       (unicode)       [create]
          MEL only.  The string is interpreted as a MEL callback, which is called each time a layout is set as current (with
          -setCurrentflag). The callback is of the form: global proc MySetCurrentCallback(string $layoutName)
    
      - type : t                       (unicode)       [create]
          Get the type of the specified layout: FACTORY, FACTORY_OVERRIDE or USER.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspaceLayoutManager`
    """

    pass


def outlinerEditor(*args, **kwargs):
    """
    This command creates an outliner editor which can be used to display a list of objects.WARNING: some flag combinations
    may not behave as you expect.  The command is really intended for internal use for creating the outliner used by the
    various editors.
    
    Flags:
      - allowMultiSelection : ams      (bool)          [create,edit]
          If true then multiple selection will be allowed in the outliner.
    
      - alwaysToggleSelect : ats       (bool)          [create,edit]
          If true, then clicking on an item in the outliner will select or deselect it without affecting the selection of other
          items (unless allowMultiSelection is false). If false, clicking on an item in the outliner will replace the current
          selection with the selected item.
    
      - animLayerFilterOptions : alf   (unicode)       [create,query,edit]
          Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be allAffecting(no
          filter), active(only the active layers on the object will be displayed) and animLayerEditor(the settings will be taken
          from the animation layer editor).
    
      - attrAlphaOrder : aao           (unicode)       [create,query,edit]
          Specify how attributes are to be sorted. Current recognised values are defaultfor no sorting and ascendto sort
          attributes from 'a' to ''z' and descendto sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.
    
      - attrFilter : af                (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be placed on this editor. This filters the attributes displayed in the
          editor.
    
      - autoExpand : xpd               (bool)          [create,query,edit]
          This flag specifies whether or not objects that are loaded in should have their attributes automatically expanded.
    
      - autoExpandLayers : ael         (bool)          [create,query,edit]
          If true then when a node with animation layer is displayed, all the animation layers will show up in expanded form.
    
      - autoSelectNewObjects : autoSelectNewObjects (bool)          [create,query,edit]
          This flag specifies whether or not new objects added to the outliner should be automatically selected.
    
      - containersIgnoreFilters : cif  (bool)          [create,query,edit]
          This flag specifices whether or not filters should be ignored when displaying container contents.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - directSelect : ds              (bool)          [create,edit]
          If true then clicking on an item in the outliner will add or remove just that item from the selection connection. If
          false then clicking on an item in the outliner causes the selection connection to be reloaded with the currently
          selected items in the outliner.
    
      - displayMode : dm               (unicode)       [create,query,edit]
          Affects how the outliner displays when a filter is applied. List mode is a non-indented flat list. DAG mode indents to
          represent the hierarchical structure of the model.
    
      - doNotSelectNewObjects : dns    (bool)          [create,query,edit]
          If true this flag specifies that new objects added to the outliner will not be selected, even if they are active.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - dropIsParent : dip             (bool)          [create,query,edit]
          This flag specifies the mode for drag and drop. If the flag is true, dropping items will do a reparent. If it is false,
          dropping will reorder items. By default, the flag is true (parent).
    
      - editAttrName : ean             (bool)          [create,query,edit]
          This flag specifies whether or not attribute names can be edited. By default double-clicking on an attribute will open
          the expression editor for that attribute.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandAllItems : eai           (bool)          [create,edit]
          Expand or collapse all items in the outliner.
    
      - expandAllSelectedItems : eas   (bool)          [create,edit]
          Expand or collapse all selected items in the outliner.
    
      - expandAttribute : att          (bool)          [edit]
          Force the outliner to fill the selection list with only attributes.
    
      - expandConnections : xc         (bool)          [create,query,edit]
          This flag specifies whether or not attributes should be expanded to show their input connections. Note: currently the
          expansion will only show animCurves.
    
      - expandObjects : eo             (bool)          [create,query,edit]
          This flag specifies whether or not objects that are loaded in should be automatically expanded.
    
      - feedbackItemName : fbn         (bool)          [query]
          Returns the outliner item name at the current mouse position, if any.
    
      - feedbackRowNumber : fbr        (bool)          [query]
          Returns the outliner row number at the current mouse position, if any.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - getCurrentSetOfItem : gcs      (int)           [query]
          Returns the current set of item at the given row. As an item can belong to number of sets, current set is the set to
          which the item belongs to currently.
    
      - highlightActive : ha           (bool)          [create,query,edit]
          This flag specifies whether or not the outliner should highlight objects that are active. Note: if the outliner is
          driving the contents of another editor, setting highlightActive to true may produce unexpected behavior.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - highlightSecondary : hs        (bool)          [create,query,edit]
          This flag specifies whether or not the outliner should highlight objects that are contained in the highlightConnection.
    
      - ignoreDagHierarchy : hir       (bool)          [create,query,edit]
          This flag specifies whether or not DAG objects are displayed in their DAG hierarchy. Warning: using this flag without
          some other form of sensible filtering will lead to a very confusing outliner.
    
      - ignoreHiddenAttribute : iha    (bool)          [create,query,edit]
          Sets whether or not the outliner ignores the 'hidden in outliner' flag on nodes.
    
      - ignoreOutlinerColor : ioc      (bool)          [create,query,edit]
          Sets whether or not the outliner ignores the 'use outliner color' flag on nodes.
    
      - isChildSelected : ics          (PyNode)        [query]
          This flag allows you to query if one or more of the children of the specified item is selected in the outliner. The item
          should be specified using a unique DAG path. Note that if the specified item appears multiple times in the outliner, the
          result will be true if one or more children of any occurrence of the specified item in the outliner is/are selected.
    
      - isSet : isSet                  (int)           [query]
          Returns true if the item present at the given row is a set.
    
      - isSetMember : ism              (int)           [query]
          Returns true if the item present at the given row is a set member.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - longNames : ln                 (bool)          [query,edit]
          Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the
          -niceNames flag is set.  Default is short names. Queried, returns a boolean.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - mapMotionTrails : mmt          (bool)          [create,query,edit]
          Sets whether or not we replace the motion trail in the outliner with the object it is trailing.
    
      - masterOutliner : mst           (unicode)       [create,query,edit]
          This flag is the name of an outliner that this outliner will share the objects and state from. When an outliner is
          shared, all of its state information comes from, and is applied to, the master outliner.
    
      - niceNames : nn                 (bool)          [query,edit]
          Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the
          longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the
          longNames flag. Default is on. Queried, returns a boolean.
    
      - object : obj                   (PyNode)        [query]
          This flags is used together with the parentObjectflag to get the name of the parent object for the specified object.
    
      - organizeByLayer : obl          (bool)          [create,query,edit]
          If true then when a node with animation layer is displayed, attributes will be displayed according to the layer(s) it
          belongs to. eg:  Layer1 Attr1 Attr2 Layer2 Attr1  If it is false then the outliner will be organized primarily by
          attributes. eg:  Attr1 Layer1 Layer2 Attr2 Layer1
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - parentObject : po              (bool)          [query]
    
      - pinPlug : pin                  (PyNode)        [create,query,edit]
          Pins the named plug, so it always appears in the outliner, irrespective of the incoming selection connection. In query
          mode, returns a list of the pinned plugs.
    
      - refresh : rfs                  (bool)          [edit]
          Causes the outliner to refresh itself.
    
      - removeFromCurrentSet : rcs     (int)           [edit]
          Removes selected members of a set from their current set. Current set is the set to which item at the given row belongs
          to. If no selected items, the item at the given row is removed from its current set.
    
      - renameItem : rni               (int)           [edit]
          Renames the item at the given row index in the outliner.
    
      - renameSelectedItem : rsi       (bool)          [edit]
          Rename the first selected item in the outliner.
    
      - renderFilterActive : rfa       (bool)          [query]
          This is a query only flag which returns true if the render setup filter is Active, i.e one of the four render filters
          (Inside Selected, Outside Selected, Inside All Layers, Outside All Layers) is applied on the outliner currently, false
          otherwise.
    
      - renderFilterIndex : rfi        (int)           [create,query,edit]
          Sets the Render Setup Filter to the index passed. This only works if the filter is visible in outliner and its selection
          is not locked. Valid indices are: 0 - Scene2 - Inside Selected3 - Outside Selected4 - Inside All Layers5 - Outside All
          LayersDefault: Scene 0 In query mode returns current index of the filter.
    
      - renderFilterVisible : rfv      (bool)          [create,query,edit]
          Show/Hide the Render Setup Filter in outliner. In query mode returns whether the Render Setup Filter is visible or not.
    
      - selectCommand : sec            (script)        [create,query,edit]
          A command to be executed when an item is selected.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - selectionOrder : sod           (unicode)       [edit]
          Specify how objects are sorted in selection list. Current recognised values are selectionfor sorting in selection order
          and displayto sort objects in the same order that the outliner does.
    
      - setFilter : sf                 (unicode)       [create,query,edit]
          Specifies the name of a filter which is used to filter which (if any) sets to display.
    
      - setsIgnoreFilters : sif        (bool)          [create,query,edit]
          This flag specifies whether or not the filter should be ignored for expanding sets to show set members (default is
          true).
    
      - showAnimCurvesOnly : aco       (bool)          [create,query,edit]
          This flag modifies the showConnected flag.  If showConnected is set to true then this flag will cause display of only
          those attributes that are connected to an animCurve. If showConnected is set to false then this flag does nothing.
    
      - showAnimLayerWeight : saw      (bool)          [create,query,edit]
          If true then when a node with animation layer is displayed, the weight of the layer will be displayed if it is keyed.
    
      - showAssets : a                 (bool)          [create,query,edit]
          This flags specifies whether assets should be shown in the outliner.
    
      - showAssignedMaterials : sam    (bool)          [create,query,edit]
          Specifies whether to show assigned materials under shapes.
    
      - showAttrValues : av            (bool)          [create,query,edit]
          This flag specifies whether attribute values or attribute names should be displayed. Note: currently only string
          attributes can have their values displayed.
    
      - showAttributes : atr           (bool)          [create,query,edit]
          Specifies whether to show attributes or not.
    
      - showCompounds : cmp            (bool)          [create,query,edit]
          This flag specifies whether or not compound attributes should be displayed, or just the leaf attributes. Note: if
          showConnected is true, and the compound attribute is connected, it will still be displayed.
    
      - showConnected : con            (bool)          [create,query,edit]
          This flag modifies the showAttributes flag.  If showAttributes is set to true then this flag will cause display of only
          those attributes that are connected in the dependency graph. If showAttributes is set to false then this flag does
          nothing.
    
      - showContainedOnly : sco        (bool)          [create,query,edit]
          This flags specifies whether nodes belonging to containers should be show under the container node only. Otherwise, it
          will show up under the world as well.
    
      - showContainerContents : scc    (bool)          [create,query,edit]
          This flags specifies whether the contents of the container should be shown under the container node in the outliner.
    
      - showDagOnly : dag              (bool)          [create,query,edit]
          This flag specifies whether all dependency graph objects will be displayed, or just DAG objects.
    
      - showLeafs : laf                (bool)          [create,query,edit]
          This flag specifies whether or not leaf attributes should be displayed, or just the compound attributes. Note: if
          showConnected is true, and the leaf attribute is connected, it will still be displayed.
    
      - showMuteInfo : smi             (bool)          []
    
      - showNamespace : sn             (bool)          [create,query,edit]
          This flag specifies whether all objects will have their namespace displayed, if namespace different than root.
    
      - showNumericAttrsOnly : num     (bool)          [create,query,edit]
          This flag specifies whether or not all attributes should be displayed, or just numeric attributes. Note: if
          showConnected is true, and the attribute is connected, it will still be displayed.
    
      - showPinIcons : spi             (bool)          [create,query,edit]
          Sets whether pin icons are shown for unpinned plugs.
    
      - showPublishedAsConnected : spc (bool)          [create,query,edit]
          This flags enables attributes that are published to be displayed in italics. Otherwise, only attributes connected as a
          destination are shown in italics.
    
      - showReferenceMembers : rm      (bool)          [create,query,edit]
          Specifies whether to show reference node members under the reference node in the outliner.
    
      - showReferenceNodes : rn        (bool)          [create,query,edit]
          Specifies whether to show reference nodes or not.
    
      - showSelected : sc              (bool)          [create,edit]
          If true then the selected items are expanded in the outliner.
    
      - showSetMembers : ssm           (bool)          [create,query,edit]
          If true then when a set is expanded, the set members will be displayed. If false, then only other sets will be
          displayed.
    
      - showShapes : shp               (bool)          [create,query,edit]
          Specifies whether to show shapes or not.
    
      - showTextureNodesOnly : tno     (bool)          [create,query,edit]
          This flag modifies the showConnected flag. If showConnected is set to true then this flag will cause display of only
          those attributes that are connected to a texture node. If showConnected is set to false then this flag does nothing.
    
      - showTimeEditor : ste           (bool)          [create,query,edit]
          If true, all nodes related to the Time Editor will be shown as a hierarchy.
    
      - showUVAttrsOnly : uv           (bool)          [create,query,edit]
          This flag specifies whether or not all attributes should be displayed, or just uv attributes. Note: currently the only
          attribute which will be displayed is Shape.uvSet.uvSetName.
    
      - showUnitlessCurves : su        (bool)          [create,query,edit]
          This flag (in combination with -expandConnections) specifies whether or not connection expansion should show unitless
          animCurves.
    
      - showUpstreamCurves : suc       (bool)          [create,query,edit]
          Specifies exactly which attributes are displayed when showAttributes and expandConnections are both true. If true, the
          dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example
          in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve
          that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false,
          multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.
    
      - sortOrder : so                 (unicode)       [create,query,edit]
          Specify how objects are to be sorted.  Current recognised values are nonefor no sorting and dagNameto sort DAG objects
          by name. Notes: a) non-DAG objects are always sorted by nodeType and name. b) when sortOrder is set to dagName, objects
          cannot be reordered using drag-and-drop, they can however be reparented.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - transmitFilters : tf           (bool)          [create,query,edit]
          This flag specifies how the selectionConnection is populated when attribute filters are enabled.  If this flag is set to
          true, then all the attributes that pass the filter will be placed on the selectionConnection.  By default this flag is
          false.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - unpinPlug : unp                (PyNode)        [create,edit]
          Unpins the named plug.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.outlinerEditor`
    """

    pass


def popupMenu(*args, **kwargs):
    """
    This command creates a popup menu and attaches it to the current control if no parent is specified.  The popup menu is
    posted with the right mouse button by default. Popup menus can be added to any kind of control, however, on some
    widgets, only the standard menu button (3rd mouse button) can be used to trigger popup menus. This is to meet generally
    accepted UI guidelines that assign the 3rd mouse button and only this one to popup menus, and also to prevent unexpected
    behavior of controls like text fields, that expect 1st and 2nd button to be reserved for contextual operations like text
    or item selection...
    
    Flags:
      - allowOptionBoxes : aob         (bool)          [create,query]
          Indicate whether the menu will be able to support option box menu items.  An error results if an option box item is
          added to a menu that doesn't allow them.  This flag may be queried and must be specified when the popup menu is created.
          The default value is false.
    
      - altModifier : alt              (bool)          [create,query,edit]
          Specify this flag if the Alt modifier must be pressed when posting the popup menu.
    
      - button : b                     (int)           [create,query,edit]
          Indicate which button posts the popup menu.  Valid values range from 1 to 3 where 1 is the left most button on the
          mouse.
    
      - ctrlModifier : ctl             (bool)          [create,query,edit]
          Specify this flag if the Cntl modifier must be pressed when posting the popup menu.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteAllItems : dai           (bool)          [edit]
          Delete all the items in this menu.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - itemArray : ia                 (bool)          [query]
          Return string array of the menu item names.
    
      - markingMenu : mm               (bool)          [create,query,edit]
          Set the marking menu state of this popup menu.
    
      - numberOfItems : ni             (bool)          [query]
          Return number of items in the menu.
    
      - parent : p                     (unicode)       [create]
          Specify the control that the popup menu will appear in.
    
      - postMenuCommand : pmc          (script)        [create,edit]
          Specify a script to be executed when the popup menu is about to be shown.
    
      - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
          Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis
          invoked every time the popup menu is shown.
    
      - shiftModifier : sh             (bool)          [create,query,edit]
          Specify this flag if the Shift modifier must be pressed when posting the popup menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.popupMenu`
    """

    pass


def hyperShade(*args, **kwargs):
    """
    Commands for shader editing in the hypergraph
    
    Flags:
      - assign : a                     (unicode)       [create]
          Assign the specified shader node to renderable objects on the active list. The node can either be a shading group or the
          shader node attached to the shading group.
    
      - clearWorkArea : cwa            (bool)          [create]
          Push the current work area on to the stack and create a clear work area
    
      - collapse : clp                 (unicode)       [create]
          Hide the upstream nodes from the specified node.
    
      - createNode : rcn               (unicode)       [create]
          Create a node of the specified type.  This is called when a new rendering node is created using drag and drop from the
          image browser or from the RMB context sensitive menu on nodes in the Visor Create folders.
    
      - dependGraphArea : dg           (bool)          [create]
          When setting a work area, and the work area doesn't already exist this flag inicates a new graph should be created that
          is either a depend graph or a folder view.
    
      - downStream : ds                (bool)          [create]
          Show nodes downstream from the specified node
    
      - duplicate : dup                (bool)          [create]
          Duplicate upstream nodes.  If the node is a shader make sure duplicate include the shading group if there is one
    
      - fixRenderSize : fix            (bool)          [create]
          If set to true dont rerender swatches when they change size as the user zooms
    
      - incremental : inc              (bool)          [create]
          Enable or disable incremental layout when making new nodes or connections
    
      - listDownstreamNodes : ldn      (PyNode)        [create]
          List all the downstream render nodes from the specified nodes.
    
      - listDownstreamShaderNodes : lds (PyNode)        [create]
          List all the downstream shader nodes from the specified nodes.
    
      - listUpstreamNodes : lun        (PyNode)        [create]
          List all the upstream render nodes from the specified nodes.
    
      - name : n                       (unicode)       [create]
          Name for the work area created by this command
    
      - networks : net                 (bool)          [create]
          Do an incremental layout on all of the nodes in the current selection list and that are in the current work area.
    
      - noSGShapes : nsg               (bool)          [create]
          Display only shapes that are connected to nodes in the network other than a shading group.
    
      - noShapes : ns                  (bool)          [create]
          Display no shapes when graphing networks.
    
      - noTransforms : nt              (bool)          [create]
          Display no transforms when graphing networks.
    
      - objects : o                    (unicode)       [create]
          Select the objects which are attached to the specified shader node. The shader node can be either the shading group or
          the shader attached to the shading group.  When this flag's argument is the empty string, we will use the currently
          selected shder node as the input.
    
      - renderCreateAndDrop : rcd      (unicode)       [create]
          Create a render node of the specified type and put user into drag and drop mode to place or connect it.
    
      - reset : rst                    (bool)          [create]
          Reset the Hypershade panel to its initial state.  In particular delete all the work areas.
    
      - resetGraph : rsg               (bool)          [create]
          Reset the current graph.  Typically called prior to rebuilding a folder in a Hypershade view.
    
      - resetSwatch : rss              (bool)          [create]
          For all selected nodes remove user defined swatches if the node has one
    
      - setAllowsRegraphing : sar      (bool)          [create]
          For internal use only.
    
      - setWorkArea : swa              (unicode)       [create]
          Set the work area to the existing named work area
    
      - shaderNetwork : sn             (unicode)       [create]
          Show the shader network for the specified material node.  If the materials shading group has a displacement or volume
          map these will be shown.  If not then the shading group will not be shown.
    
      - shaderNetworks : sns           (bool)          [create]
          Show the shader network for all the objects on the selection list that have shaders.
    
      - shaderNetworksSelectMaterialNodes : smn (bool)          [create]
          Select the material nodes in the shader network for all the objects on the selection list that have shaders.
    
      - snapShot : snp                 (bool)          [create]
          Put hypergraph in snapshot mode.  This is only for testing
    
      - uncollapse : ucl               (unicode)       [create]
          Unhide the upstream nodes from the specified node.
    
      - upStream : ups                 (bool)          [create]
          Show nodes upstream from the specified node
    
      - userDefinedLayout : udl        (bool)          [create]
          Enable or disable remembrance of user defined layouts.  Default is disabled until this functionality is better tested.
    
      - workAreaAddCmd : waa           (unicode)       [create]
          Set the MEL procedure called when a new work area is added to HyperShade
    
      - workAreaDeleteCmd : wad        (unicode)       [create]
          Set the MEL procedure called when a work area is deleted in HyperShade
    
      - workAreaSelectCmd : was        (unicode)       [create]
          Set the MEL procedure called when a work area is selected in HyperShade                                    Flag can have
          multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hyperShade`
    """

    pass


def toolButton(*args, **kwargs):
    """
    This command creates a toolButton that is added to the most recently created tool button collection unless the
    cl/collectionflag is used. It also attaches the named tool, activating it when this control is selected. By default,
    this control only handles one tool at a time.  Using the t/toolflag to associate a new tool will simply override the
    previous attached tool.  If you use the amt/allowMultipleToolsflag then you will be able to attach more than one tool
    with this control.  Only one tool will be current within the control.  To access the other tools press the right mouse
    button to display a popup menu containing all the tools associated with this control.  If you set the
    piv/popupIndicatorVisibleflag then a small arrow will be drawn on the control to indicate that additional tools are
    attached to this control.
    
    Flags:
      - allowMultipleTools : amt       (bool)          [create,query]
          Indicates whether this control will allow you to attach more than one tool.  By default, this control accepts only one
          tool. You can add multiple tools by setting this flag to true. Only one tool will be current and displayed at any one
          time. Use the pop up menu attached to the right mouse button to view all the tools.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the control's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the
          callback, or use onCommand and offCommand as separate callbacks.
    
      - collection : cl                (unicode)       [create,edit]
          To explicitly add a tool button to a tool collection.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Command executed when the control is double clicked.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three images.  The image that best fits the current size of the control will be displayed.  This
          flag applies the image to the current tool.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string (5 characters) label that will be displayed on top of the icon.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,edit]
          Command executed when the control is turned off.
    
      - onCommand : onc                (script)        [create,edit]
          Command executed when the control is turned on.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupIndicatorVisible : piv    (bool)          [create,query,edit]
          Edit this flag to set the visibility of the popup tool indicator. The indicator is a simple image that appears in the
          top right corner of the button when more that one tool is associated with this control. This flag is queryable and true
          by default.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - select : sl                    (bool)          [create,edit]
          Will set this button as the selected one.  This flag also queries the select state of the control.
    
      - style : st                     (unicode)       [create,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.
    
      - tool : t                       (unicode)       [create,query,edit]
          The name of the tool to be attached to the button.  If the tool specified is already attached to this button then it
          will be selected.  Query this flag to return the current tool.  This flag may be specified more than once to attach more
          than one tool.
    
      - toolArray : ta                 (bool)          [query]
          This query only flag returns the names of all the tools attached to the toolButton control.
    
      - toolCount : tc                 (bool)          [query]
          This query only flag return the number of tools attached to the toolButton control.
    
      - toolImage1 : ti1               (unicode, unicode) [create,query,edit]
    
      - toolImage2 : ti2               (unicode, unicode) [create,query,edit]
    
      - toolImage3 : ti3               (unicode, unicode) [create,query,edit]
          This control supports three images.  The image that best fits the current size of the control will be displayed.  This
          flag applies the image to the specified tool.  The first argument is the name of the tool and the second is the name of
          the image.  When queried an array of tool icon pairs is returned.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this tool button feature was introduced. The argument should be given as a string of the
          version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be
          given as 2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.toolButton`
    """

    pass


def modelPanel(*args, **kwargs):
    """
    This command creates a panel consisting of a model editor. See the modelEditorcommand documentation for more
    information.
    
    Flags:
      - barLayout : bl                 (bool)          [query]
          This flag returns the name of the layout which is the parent of the panels icon bar.
    
      - camera : cam                   (unicode)       [query,edit]
          Query or edit the camera in a modelPanel.
    
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - modelEditor : me               (bool)          [query]
          This flag returns the name of the model editor contained by the panel.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.modelPanel`
    """

    pass


def getMainProgressBar():
    pass


def textFieldButtonGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command adds a button to the textFieldGrp command.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - buttonCommand : bc             (script)        [create,edit]
          Command attached to the button.
    
      - buttonLabel : bl               (unicode)       [create,query,edit]
          Label text of the button.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the field text changes and user presses Enter or Return.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the
          -tx/textflag regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enableButton : eb              (bool)          [create,query,edit]
          Enable state of the button.  By default, this flag is set to true and the button is enabled.  Specify true, and the
          button will appear dimmed or greyed-out indicating it is disabled.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fileName : fi                  (unicode)       [create,query,edit]
          Text in the field as a filename. This does conversions between internal and external (UI) file representation.
    
      - forceChangeCommand : fcc       (bool)          [create,edit]
          If used together with -text or -inserText flag, change command will be executed after text modification.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - insertText : it                (unicode)       [create,edit]
          Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
    
      - insertionPosition : ip         (int)           [create,query,edit]
          The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the
          field.  Position 0 may be used to specify the end of the field.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - placeholderText : pht          (unicode)       [create,query,edit]
          Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and
          the widget doesn't have focus. By default, this property contains an empty string.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - text : tx                      (unicode)       [create,query,edit]
          Text in the field.
    
      - textChangedCommand : tcc       (script)        [create,edit]
          Command executed immediately when the field text changes.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textFieldButtonGrp`
    """

    pass


def layoutDialog(*args, **kwargs):
    """
    The layoutDialog command creates a modal dialog containing a formLayout with 100 divisions. The formLayout can be
    populated with arbitrary UI elements through use of the '-ui/-uiScript' flag. NOTE:A layoutDialog is not a window and
    certain UI elements will not function properly within it. In particular menuBars and panels containing menuBars should
    not be used with the layoutDialog.
    
    Flags:
      - backgroundColor : bgc          (float, float, float) [create]
          The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. (Windows only flag)
    
      - dismiss : dis                  (unicode)       [create]
          Dismiss the current layoutDialog. The specified string will be set as the result of the initial layoutDialog command.
    
      - parent : p                     (unicode)       [create]
          Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's
          parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
    
      - title : t                      (unicode)       [create]
          The dialog title.
    
      - uiScript : ui                  (script)        [create]
          The specified MEL procedure name will be invoked to build the UI of the layoutDialog. This flag is required when
          creating a layoutDialog. The top-level control of a layoutDialog is a formLayout with 100 divisions. It can be accessed
          by calling 'setParent -q' at the beginning of the specified MEL procedure.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.layoutDialog`
    """

    pass


def headsUpMessage(*args, **kwargs):
    """
    This command draws a message in the 3d view.  The message is automatically erased at the next screen refresh.
    
    Flags:
      - horizontalOffset : ho          (int)           [create]
          If this flag is specified, the message will appear the specified distance (in pixels) to the right of the point.
          Otherwise, a default horizontal offset of 0 pixels is used.
    
      - object : o                     (unicode)       [create]
          If an object is specified, then the message is drawn just above the object's bounding-box centre point. If this flag is
          not specified, or the object is not found, then the message is centred in the current view.
    
      - selection : s                  (bool)          [create]
          If this flag is specified, the message will be centred among the currently selected objects.  This flag does nothing if
          the object flag is also specified.
    
      - time : t                       (float)         [create]
          If this flag is specified, the message will be displayed for a minimum of the given amount of time (in seconds).
          Otherwise a default time of 1.0 seconds is used.
    
      - uvTextureEditor : uve          (bool)          []
    
      - verticalOffset : vo            (int)           [create]
          If this flag is specified, the message will appear the specified distance (in pixels) above the point. Otherwise, a
          default vertical offset of 0 pixels is used.                  Flag can have multiple arguments, passed either as a tuple
          or a list.
    
      - viewport : vp                  (bool)          []
    
    
    Derived from mel command `maya.cmds.headsUpMessage`
    """

    pass


def rowLayout(*args, **kwargs):
    """
    This command creates a layout capable of positioning children into a single horizontal row.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.
    
      - adjustableColumn1 : ad1        (int)           [create]
          Specifies that the first column has an adjustable size that changes with the size of the parent layout. Ignored if there
          isn't exactly one column.
    
      - adjustableColumn2 : ad2        (int)           [create]
          Specifies which of the two columns has an adjustable size that changes with the size of the parent layout. Ignored if
          there isn't exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create]
          Specifies which of the three columns has an adjustable size that changes with the size of the parent layout. Ignored if
          there isn't exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create]
          Specifies which of the four columns has an adjustable size that changes with the size of the parent layout. Ignored if
          there isn't exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create]
          Specifies which of the five columns has an adjustable size that changes with the size of the parent layout. Ignored if
          there isn't exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create]
          Specifies which of the six columns has an adjustable size that changes with the size of the parent layout. Ignored if
          there isn't exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Text alignment for the specified column. Valid values are left, right, and center
    
      - columnAlign1 : cl1             (unicode)       [create]
          Text alignment for the first column. Valid values are left, right, and center. Ignored if there isn't exactly one
          column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create]
          Text alignment for both columns. Valid values are left, right, and center. Ignored if there isn't exactly two columns.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create]
          Text alignment for all three columns. Valid values are left, right, and center. Ignored if there isn't exactly three
          columns.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create]
          Text alignment for all four columns. Valid values are left, right, and center. Ignored if there isn't exactly four
          columns.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create]
          Text alignment for all five columns. Valid values are left, right, and center. Ignored if there isn't exactly five
          columns.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create]
          Text alignment for all six columns. Valid values are left, right, and center. Ignored if there isn't exactly six
          columns.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Horizontally attach a particular column.  The first argument is a 1-based index specifying the column.  The second
          argument is the attachment, valid values are left, right, and both.  The third argument is the offset value.
    
      - columnAttach1 : ct1            (unicode)       [create]
          Attachment type for the first column.  Ignored if there isn't exactly one column. Valid values are left, right, and
          both.
    
      - columnAttach2 : ct2            (unicode, unicode) [create]
          Attachment type for both columns.  Ignored if there isn't exactly two columns. Valid values are left, right, and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create]
          Attachment type for all three columns.  Ignored if there isn't exactly three columns. Valid values are left, right, and
          both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create]
          Attachment type for all four columns.  Ignored if there isn't exactly four columns. Valid values are left, right, and
          both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create]
          Attachment type for all five columns.  Ignored if there isn't exactly five columns. Valid values are left, right, and
          both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create]
          Attachment type for all six columns.  Ignored if there isn't exactly six columns. Valid values are left, right, and
          both.
    
      - columnOffset1 : co1            (int)           [create]
          Used in conjunction with the -columnAttach1 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for the first column.  The offsets applied are based on the attachments specified with the -columnAttach1 flag.
          Ignored if there isn't exactly one column.
    
      - columnOffset2 : co2            (int, int)      [create]
          Used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for both columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.
          Ignored if there isn't exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create]
          Used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for all three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.
          Ignored if there isn't exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create]
          Used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for all four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.
          Ignored if there isn't exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create]
          Used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for all five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.
          Ignored if there isn't exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create]
          Used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  Sets the
          offset for all six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.
          Ignored if there isn't exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Width of a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the
          width value.
    
      - columnWidth1 : cw1             (int)           [create]
          Width for the first column.  Ignored if there isn't exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create]
          Widths for both columns.  Ignored if there isn't exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create]
          Widths for all three columns.  Ignored if there isn't exactly three columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create]
          Widths for all four columns.  Ignored if there isn't exactly four columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create]
          Widths for all five columns.  Ignored if there isn't exactly five columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create]
          Widths for all six columns.  Ignored if there isn't exactly six columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfColumns : nc           (int)           [create,query]
          Number of columns in the row.  The specified number of columns must be a value greater than 0.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Vertically attach a particular column.  The first argument is a 1-based index specifying the column.  The second
          argument is the attachment, valid values are top, bottom, and both.  The third argument is the offset value.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.rowLayout`
    """

    pass


def saveMenu(*args, **kwargs):
    """
    This command is used for saving the contents of a menu, so that another instance of the menu may be recreated later. The
    command writes out a file which, when run as a script, will rebuild the menuItems contained in the original menu. Note
    that the fileName is relative to the user's marking menu preference directory. Note that this command is used solely by
    the Marking Menu Editor and is not intended to be used for general purposes. Note that this command doesn't work well
    with controls that have mixed mel and python command callbacks.  Also, because it saves the menu state to a mel file, it
    does not work with callbacks that are python callable objects. The first argument is the name of the manu to save, the
    second one is the name of the file.
    
    
    Derived from mel command `maya.cmds.saveMenu`
    """

    pass


def editorTemplate(*args, **kwargs):
    """
    The editorTemplate command allows the user to specify the conceptual layout of an attribute editor and leave the details
    of exactly which UI elements are used in the final result to the automatic dialog generation mechanism.
    
    Flags:
      - addAdskAssetControls : aac     (bool)          [create]
          Adds controls for dynamic attributes of adskMaterial nodes and organizes them in a layout according to the XML ui
          description specified in the asset library.
    
      - addComponents : acp            (bool)          [create]
          This flag will add a frameLayout with a channel box which will display any selected components for the object.
    
      - addControl : ac                (bool)          [create]
          The first argument is the name of the attribute for which you wish to add a control. You can assume that when the editor
          is created from the template, an appropriate type of control will be used. The second string argument is optional, and
          can be used to specify a command (or script) to be executed when the attribute is changed.
    
      - addDynamicControl : adc        (bool)          [create]
          As -addControl with the exception that the attribute for which the control is to be created/attached is dynamic. [Note:
          -addControl will also work for dynamic attributes, but will not preserve their order in the attribute editor].
    
      - addExtraControls : aec         (bool)          [create]
          By default, if there are attributes of a node which you do not -addControl or -suppress, then controls will be created
          automatically and appended to the end of editor created from the template. This flag allows you to specify a particular
          place in the template for such controls to be automatically inserted. If dynamic attributes have not already been
          addressed with -addControl, they will also be placed here.  A frameLayout will automatically be generated for you when
          you use this flag.
    
      - addSeparator : addSeparator    (bool)          [create]
          Adds a separator to the template.
    
      - annotateFieldOnly : afo        (bool)          [create]
          This flag can only be used with the -annotation flag.  By default, for any Attribute Editor controlGroups created by the
          -addControl flag, the -annotation flag displays its annotation string when the mouse hovers over any control that is
          part (the label, the value field, etc.) of the group.  Use this flag to limit display of the annotation to only the
          value field of the controlGroup.  This flag is ignored if the controlGroup has no value field (e.g., checkBoxGrp)
    
      - annotation : ann               (unicode)       [create]
          This flag can only be used with the -addControl or the -addDynamicControl flags. The string will be used as an
          annotation on the controls created in the attribute editor.
    
      - beginLayout : bl               (unicode)       [create]
          Begins a layout in the template with the title specified by the string argument. Items between this flag and    its
          corresponding -endLayout flag will be contained within the layout. You can assume that when the editor is created from
          the template, an appropriate type of layout will be used. (frameLayout).
    
      - beginNoOptimize : bn           (bool)          [create]
          Specifies that the layout of items between this flag and its corresponding -endNoOptimize flag is not to be optimized to
          minimize space.
    
      - beginScrollLayout : bsl        (bool)          [create]
          Begins a scrollLayout.  Items between this flag and its corresponding -endScrollLayout flag will be contained within the
          layout.
    
      - callCustom : ccu               (bool)          [create]
          Specifies that at this point in the template when building the dialog, the procedure specified by the first argument is
          to be called to create some UI objects when a new node type is edited. The procedure specified by the second argument is
          to be called if an attribute editor already exists and another node of the same type is now to be edited. The replacing
          procedure should connect any controls created by the creating procedure to the equivalent attributes in the new node. A
          list of zero or more attributes specifies the attributes which the two procedures will involve. The procedures should
          have the signature: proc AEcustomNew(string attributeName1, string attributeName2) The number of attributes specified in
          the call should correspond to the number of attributes in the procedure signature.
    
      - collapse : cl                  (bool)          [create]
          This flag is only valid when used in conjunction with a -bl/beginLayout flag.  It is used to specify the initial
          expand/collapse state of the layout.  A true value will cause the layout to be collapsed upon creation, while a false
          value will expand the layout.  The default is true (ie. collapsed).
    
      - debugMode : dbm                (bool)          []
    
      - dimControl : dc                (unicode, unicode, bool) [create]
          This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is
          the node name and the second is the attribute whose control you wish to affect.  The third argument is a boolean which
          specifies whether to dim (true) or undim (false) the associated control.
    
      - endLayout : el                 (bool)          [create]
          Ends a layout in the template started by -beginLayout.
    
      - endNoOptimize : en             (bool)          [create]
          Ends a set of non-optimized items.
    
      - endScrollLayout : esl          (bool)          [create]
          Ends a scrollLayout.
    
      - extraControlsLabel : ecl       (unicode)       [create]
          By default the label is Extra Attributes. Specify an alternate label or an empty string to hide the label. This flag
          must be used in conjuction with the -aec/addExtraControls flag.
    
      - interruptOptimize : io         (bool)          [create]
          Enforces a division between two sets of items whose layouts may be optimized.
    
      - label : l                      (unicode)       [create]
          This flag can only be used with the -addControl or the -addDynamicControl flags.  And it must be specified FIRST. The
          string will override the name of the attribute that will be displayed in the attribute editor.
    
      - listExtraAttributes : lea      (unicode)       [create]
          List extra attributes.This flag is only useful AFTER a control has already been created (using the -addControl flag).
          The first argument is the node name.
    
      - preventOverride : po           (bool)          [create]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - queryControl : qc              (unicode, unicode) [create]
          This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is
          the node name and the second is the attribute whose control you wish to query.  Note that in most cases, using this flag
          is identical to issuing a getAttr command, however, in the case of textFields (e.g. for message attributes), the text
          value currently being displayed will be returned, NOT the actual attribute value.
    
      - queryLabel : ql                (unicode, unicode) [create]
          This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is
          the node name and the second is the attribute whose control label you wish to query.  In most cases this flag returns
          the same value as the attribute's nice name, but when a -label flag was present on the -addControl command that created
          the control, -queryLabel will return that value instead
    
      - queryName : qn                 (unicode, unicode) [create]
          This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is
          the node name and the second is the attribute whose control name you wish to query.
    
      - removeControl : rc             (unicode, unicode) [create]
          This flag is obsolete and should no longer be used.
    
      - suppress : s                   (unicode)       [create]
          Prevent a control for the attribute specified by the string argument from appearing in the editor created from the
          template.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editorTemplate`
    """

    pass


def scriptedPanelType(*args, **kwargs):
    """
    This command defines the callbacks for a type of scripted panel.  The panel type created by this command is then used
    when creating a scripted panel.  See also the 'scriptedPanel' command.
    
    Flags:
      - addCallback : acb              (unicode)       [create,query,edit]
          This flag specifies the callback procedure for adding the panel to a particular control layout.  The parent layout is
          guaranteed to be the current default layout when the proc is called.  If its name is required then it can be queried
          with 'setParent -q'.  Any editors should be parented here. global proc procName (string $panelName) { .... }
    
      - copyStateCallback : ocb        (unicode)       [create,query,edit]
          This flag specifies the callback procedure for copying the state of the panel when a tear-off copy of the panel is made.
          The callback proc has the form: global proc procName (string $panelName, string $newPanelName) { .... } This procedure
          will be executed immediately after the addCallback procedure has finished executing. At that point, the copied panel
          will be fully created and accessible to facilitate copying of panel settings. Note: the addCallback procedure is called
          after the createCallback procedure has been called.
    
      - createCallback : ccb           (unicode)       [create,query,edit]
          This flag specifies the callback procedure for initially creating the panel object.  No UI should be created here.  Any
          editors owned by the panel should be created here unparented. The callback proc has the form: global proc procName
          (string $panelName) { .... }
    
      - customView : cv                (bool)          [create,query,edit]
          This flag specifies if this view is a custom 3d view for MPx3dModelView types. This flag should only be used for
          MPx3dModelView types.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteCallback : dcb           (unicode)       [create,query,edit]
          This flag specifies the callback procedure for final deletion of the panel.  The callback proc has the form: global proc
          procName (string $panelName) { .... }
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - initCallback : icb             (unicode)       [create,query,edit]
          This flag specifies the callback procedure for the initialize callback.  This will be called on file -new and file -open
          to give the panel an opportunity to re-initialize to a starting state, if required. The panel may be parented or
          unparented at this time. The callback proc has the form: global proc procName (string $panelName) { .... }
    
      - label : l                      (unicode)       [create,query,edit]
          Label for the panel
    
      - obsolete : o                   (bool)          [create,query,edit]
          This flag specifies that this type is no longer used in Maya.
    
      - removeCallback : rcb           (unicode)       [create,query,edit]
          This flag specifies the callback procedure for removing the panel from its current control layout.  Any editors should
          be unparented here. The callback proc has the form: global proc procName (string $panelName) { .... }
    
      - retainOnFileOpen : rfo         (bool)          [create,query,edit]
          This flag specifies if panels of this type should be retained after restoring panel cofiguration during file open.
          Default value is false.
    
      - saveStateCallback : scb        (unicode)       [create,query,edit]
          This flag specifies the callback procedure for saving the state of the panel.  The callback proc has the form: global
          proc string procName (string $panelName) { .... } Note that the proc returns a string.  This string will be executed
          after the createCallback has been called to facilitate restoring the panel state.
    
      - unique : u                     (bool)          [create,query,edit]
          This flag specifies if only one instance of this type of panel can exist at a given time.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scriptedPanelType`
    """

    pass


def floatField(*args, **kwargs):
    """
    Create a field control that accepts only float values and is bound by a minimum and maximum value.  An invisible slider
    is attached to the field and accessed by holding down the Ctrl modifier key while pressing one of the mouse buttons.
    Dragging the invisible slider to the right with the middle mouse button increases the field value by the amount
    specified with the -s/stepflag, while dragging to the left decreases the value by the same amount.  The left and right
    mouse buttons apply a factor of 0.1 and 10 to the step value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the field changes.  This command is not invoked when the value changes via the -v/valueflag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when dragging in the field.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field can not be changed interactively.  However, you can change the field text with the -v/valueflag
          regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enterCommand : ec              (script)        [create,edit]
          Command executed when the keypad 'Enter' key is pressed.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Upper limit of the field.
    
      - minValue : min                 (float)         [create,query,edit]
          Lower limit of the field.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,query,edit]
          Number of digits to the right of the decimal place.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - receiveFocusCommand : rfc      (script)        [create,edit]
          Command executed when the field receives focus.
    
      - showTrailingZeros : tze        (bool)          [create,query,edit]
          Show trailing zeros or not
    
      - step : s                       (float)         [create,query,edit]
          Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float)         [create,query,edit]
          Value of the field.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatField`
    """

    pass


def keyframeOutliner(*args, **kwargs):
    """
    This command creates/edits/queries a keyframe outliner control.
    
    Flags:
      - animCurve : ac                 (unicode)       [edit]
          Name of the animation curve for which to display keyframes.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - display : dsp                  (unicode)       [query,edit]
          narrow | wide What columns to display.  When narrow, time and value will be displayed, when widetangent information will
          be displayed as well
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeOutliner`
    """

    pass


def menuSetPref(*args, **kwargs):
    """
    Provides the functionality to save and load menuSets between sessions of Maya. For Internal Use Only! In query mode,
    return type is based on queried flag.
    
    Flags:
      - exists : e                     (bool)          [query]
          Returns whether the menuSet preferences file exists or not.
    
      - force : f                      (bool)          [create,edit]
          Forces a specified operation to continue even if errors are encountered (such as invalid preferences).
    
      - loadAll : la                   (bool)          [create]
          Loads all the menuSets from the preferences file only if the preferences version matches, or the -force flag is enabled.
          On successful load, of a prefs file, an empty string is returned, otherwise, a description of the problem encountered is
          returned.
    
      - removeAll : ra                 (bool)          [create]
          Removes all the menuSets from the preferences file (removes the whole file).
    
      - saveAll : sa                   (bool)          [create]
          Saves all the current menuSets into the preferences file.
    
      - saveBackup : sb                (bool)          [create]
          Saves a backup of the current menu set preferences file if one exists.  This backup will be saved in the same location
          as the current preferences file.
    
      - version : v                    (bool)          [query]
          The base version string which is saved out to file. It is also checked upon loading in order to indicate changes in the
          default prefs since the prefs were last saved out.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuSetPref`
    """

    pass


def devicePanel(*args, **kwargs):
    """
    This command is now obsolete. It is included only for the purpose of file compatibility. It creates a blank panel.
    
    
    Derived from mel command `maya.cmds.devicePanel`
    """

    pass


def attrEnumOptionMenu(*args, **kwargs):
    """
    This command creates an enumerated attribute control. It is usually an option menu.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attribute : at                 (PyNode)        [create,edit]
          Attribute that the menu controls.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          The command string is executed when the value of the option menu changes.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enumeratedItem : ei            (int, unicode)  [create]
          Enumerated item and the corresponding string.  If this flag is not supplied when the control is created, then the
          command will try to read the values from the attribute.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrEnumOptionMenu`
    """

    pass


def control(*args, **kwargs):
    """
    This command allows you to edit or query the properties of any control.                  In query mode, return type is
    based on queried flag.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.control`
    """

    pass


def soundControl(*args, **kwargs):
    """
    This command creates a control used for changing current time and scratching/scrubbing through sound files.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - beginScrub : bs                (bool)          [edit]
          Set this widget up for sound scrubbing. Subsequent changes to current time will result in sound scrubbingbehavior, until
          the -endScrubcommand is issued for this widget.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - displaySound : ds              (bool)          [query,edit]
          Turn sound display off.  Query returns int.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - endScrub : es                  (bool)          [edit]
          End sound scubbing for this widget.  This stops sound scrubbing behavior and should be issued before any subsequent
          -beginScrubflags
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxTime : max                  (time)          [create,query,edit]
          Controls the max time of the range displayed in the control. Query returns float.
    
      - minTime : min                  (time)          [create,query,edit]
          Controls the min time of the range displayed in the control. Query returns float.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressCommand : pc              (unicode)       [create,edit]
          script to run on mouse-down in this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - releaseCommand : rc            (unicode)       [create,edit]
          script to run on mouse-up in this control.
    
      - repeatChunkSize : rcs          (float)         [query,edit]
          How much sound (in the current time unit) is repeated when -repeatOnHold is true.  Default is 1.0.
    
      - repeatOnHold : roh             (bool)          [query,edit]
          Repeat sound during mouse-down events
    
      - resample : r                   (bool)          [edit]
          Resample the sound display to fit the widget
    
      - sound : s                      (unicode)       [query,edit]
          Name of audio depend node whose data should display in the sound-display widget. Query returns string.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - waveform : wf                  (unicode)       [query,edit]
          Determines what part of the sound waveform to display, when -displaySound is true. Valid values are top, bottom, and
          both.  Default is top. Query returns string.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.soundControl`
    """

    pass


def menuBarLayout(*args, **kwargs):
    """
    Create a layout containing a menu bar.  The menu bar will appear and behave similar to any menu bar created with the
    'window -menuBar true' command. Menus may be created with a menuBarLayout as their parent.  Child controls are simply
    positioned to fill the menuBarLayout area beneath the menu bar consequently, some other layout should be used as the
    immediate child.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - menuArray : ma                 (bool)          [query]
          Return a string array containing the names of the menus in the layout's menu bar.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Visibility of the menu bar.
    
      - menuIndex : mi                 (unicode, int)  [edit]
          Sets the index of a specified menu.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfMenus : nm             (bool)          [query]
          Return the number of menus attached to the layout's menu bar.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuBarLayout`
    """

    pass


def renameUI(*args, **kwargs):
    """
    This command renames the UI object passed as first arument to the new name specified as second argument. If the new name
    is a duplicate, or not valid, then re-naming fails and the old name is returned.
    
    
    Derived from mel command `maya.cmds.renameUI`
    """

    pass


def window(*args, **kwargs):
    """
    This command creates a new window but leaves it invisible. It is most efficient to add the window's elements and then
    make it visible with the showWindow command. The window can have an optional menu bar. Also, the title bar and
    minimize/maximize buttons can be turned on or off. If the title bar is off, then you cannot have minimize or maximize
    buttons. Note: The window will require a control layout of some kind to arrange the controls (buttons, sliders, fields,
    etc.).  Examples of control layouts are columnLayout, formLayout, rowLayout, etc. Note: This command will clear the
    uiTemplate stack.  Templates for a window need to be set after the window cmd.
    
    Flags:
      - backgroundColor : bgc          (float, float, float) [create,edit]
          The background color of the window. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - closeCommand : cc              (script)        [create,edit]
          Script executed after the window is closed.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attach a tag to the window.
    
      - dockCorner : dc                (unicode, unicode) [create]
          Specifies which docking areas occupied the four different corners of the window. By default docking windows on the
          bottom or top will span the whole window. Use multiple instances of this flag to allow the left and right docking areas
          to occupy the corners. This method has two arguments: docking corner and docking area. Possible values for docking
          corner are topLeft, topRight, bottomLeft, and bottomRight. Possible values for docking area are left, right, top, and
          bottom.
    
      - dockStation : ds               (bool)          [create]
          When set this flag specifies that this window can contain other docked sub-windows.
    
      - dockingLayout : dl             (unicode)       [create,query,edit]
          When queried this flag will return a string holding the docking layout information. This string can be set when creating
          or editing a docking station to restore the previous docking layout. This string is a hexadecimal representation of a
          binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to
          restore layouts across sessions of Maya.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - frontWindow : fw               (bool)          [query]
          Return the name of the front window.  Note: you must supply the name of any window (the window does not need to exist).
          Returns unknownif the front window cannot be determined.
    
      - height : h                     (int)           [create,query,edit]
          Height of the window excluding any window frame in pixels.
    
      - iconName : iconName            (unicode)       [create,query,edit]
          The window's icon title.  By default it is the same as the window's title.
    
      - iconify : i                    (bool)          [create,query,edit]
          Icon state of the window.
    
      - interactivePlacement : ip      (bool)          [create]
          Deprecated flag. Recognized but not implemented. This flag will be removed in a future version of Maya.
    
      - leftEdge : le                  (int)           [create,query,edit]
          Position of the left edge of the window.
    
      - mainMenuBar : mm               (bool)          []
    
      - mainWindow : mw                (bool)          [create,query,edit]
          Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first
          created window becomes the main window.
    
      - maximizeButton : mxb           (bool)          [create,query,edit]
          Turns the window's maximize button on or off.
    
      - menuArray : ma                 (bool)          [query]
          Return a string array containing the names of the menus in the window's menu bar.
    
      - menuBar : mb                   (bool)          [create,query]
          Adds an empty menu bar to the window. The Qt name of the object will be m_menubar_nameOfTheWindow.
    
      - menuBarCornerWidget : mcw      (unicode, unicode) [query,edit]
          This flag specify a widget to add to a corner of parent window. The first argument corresponds to the widget name and
          the second to the position of the widget. Possible values for widget position are topLeft, topRight, bottomLeft,
          bottomRight. In query mode this flag returns all the corner widget names in the following order: topLeft, topRight,
          bottomLeft, bottomRight. Add -mbr/-menuBarResizeflag to the changeCommandof widget passed (first argument) so that it
          will always have an appropriate size.
    
      - menuBarResize : mbr            (bool)          [edit]
          This flag should be used along with -mcw/-menuBarCornerWidgetflag. This is used to resize the menu bar so that the
          corner widgets are updated.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Visibility of the menu bar (if there is one).
    
      - menuIndex : mi                 (unicode, int)  [edit]
          Sets the index of a specified menu.
    
      - minimizeButton : mnb           (bool)          [create,query,edit]
          Turns the window's minimize button on or off.
    
      - minimizeCommand : mnc          (script)        [create,edit]
          Script executed after the window is minimized (iconified).
    
      - nestedDockingEnabled : nde     (bool)          [create]
          Controls whether nested docking is enabled or not.  Nested docking allows for docking windows next to other docked
          windows for more possible arrangement styles.
    
      - numberOfMenus : nm             (bool)          [query]
          Return the number of menus attached to the window's menu bar.
    
      - parent : p                     (unicode)       [create]
          Specifies a parent window or layout which the created window is always on top of. Note: If the parent is a window the
          created window is not modal, so events are still propagated to the parent window.
    
      - resizeToFitChildren : rtf      (bool)          [create,query,edit]
          The window will always grow/shrink to just fit the controls it contains.
    
      - restoreCommand : rc            (script)        [create,edit]
          Script executed after the window is restored from it's minimized (iconified) state.
    
      - retain : ret                   (bool)          [create]
          Retains the window after it has been closed.  The default is to delete the window when it is closed.
    
      - sizeable : s                   (bool)          [create,query,edit]
          Whether or not the window may be interactively resized.
    
      - state : st                     (unicode)       [create,query,edit]
          When queried this flag will return a string holding the window state information. This string is a hexadecimal
          representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the
          optionVar command to restore window state across sessions of Maya.
    
      - title : t                      (unicode)       [create,query,edit]
          The window's title.
    
      - titleBar : tb                  (bool)          [create,query,edit]
          Turns the window's title bar on or off.
    
      - titleBarMenu : tbm             (bool)          [create,query,edit]
          Controls whether the title bar menu exists in the window title bar. Only valid if -tb/titleBaris true. This Windows only
          flag is true by default.
    
      - toolbox : tlb                  (bool)          [create,query,edit]
          Makes this a toolbox style window.  A Windows only flag that makes the title bar smaller and uses a slightly different
          display style.
    
      - topEdge : te                   (int)           [create,query,edit]
          Position of the top edge of the window.
    
      - topLeftCorner : tlc            (int, int)      [create,query,edit]
          Position of the window's top left corner.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The window's visibility.
    
      - width : w                      (int)           [create,query,edit]
          Width of the window excluding any window frame in pixels.
    
      - widthHeight : wh               (int, int)      [create,query,edit]
          Window's width and height excluding any window frame in pixels.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.window`
    """

    pass


def toggleWindowVisibility(*args, **kwargs):
    """
    Toggle the visibility of a window. If no window is specified then the current window (most recently created) is used.
    See also the windowcommand's vis/visibleflag.
    
    
    Derived from mel command `maya.cmds.toggleWindowVisibility`
    """

    pass


def keyframeStats(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates, edits, queries a keyframe stats control.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - animEditor : ae                (unicode)       [query,edit]
          The name of the animation editor which is associated with the control
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - classicMode : cm               (bool)          []
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [query,edit]
          Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels.
          Default is 3.  Queried, returns an int.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - timeAnnotation : tan           (unicode)       [create,query,edit]
          Annotate the time field with an extra string value.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - valueAnnotation : van          (unicode)       [create,query,edit]
          Annotate the value field with an extra string value.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeStats`
    """

    pass


def nameField(*args, **kwargs):
    """
    This command creates an editable field that can be linked to the name of a Maya object. The field will always show the
    name of the object.
    
    (<function nameField at 0x000002073DE52438>, <function addCmdDocsCallback at 0x000002073D685588>, ('nameField', ''), {})
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,query,edit]
          This command is executed when the field text is changed by the user.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - drawInactiveFrame : dif        (bool)          [create,query,edit]
          Sets whether the name field draws itself with a frame when it is inactive. By default, this option is false.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - nameChangeCommand : ncc        (script)        [create,query,edit]
          This command is executed when the name of the node changes. NOTE: this will be executed when the node name changes,
          whether or not the name-change originated with the user typing into the field. If you want to attach a command to be
          executed when the user types into the field, use the -cc/changeCommand flag.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - object : o                     (unicode)       [create,query,edit]
          Attaches the field to the named dage object, so that the field will always display the object's name.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - receiveFocusCommand : rfc      (script)        [create,query,edit]
          Command executed when the field receives focus.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nameField`
    """

    pass


def _createClassCommands():
    pass


def radioButtonGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates from one to four radio buttons in a single row. By default
    the radio buttons will share a single collection, but they can also share the collection of another radio button group.
    The buttons can also have an optional text label.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - annotation1 : an1              (unicode)       [create,query,edit]
          specifies the tooptip of the first radiobutton
    
      - annotation2 : an2              (unicode)       [create,query,edit]
          specifies the tooptip of the second radiobutton
    
      - annotation3 : an3              (unicode)       [create,query,edit]
          specifies the tooptip of the third radiobutton
    
      - annotation4 : an4              (unicode)       [create,query,edit]
          specifies the tooptip of the fourth radiobutton
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and
          offCommand. That is, one should either use changeCommand and test the state of a radio button from inside the callback,
          or use onCommand and offCommand as separate callbacks.
    
      - changeCommand1 : cc1           (script)        [create,edit]
    
      - changeCommand2 : cc2           (script)        [create,edit]
    
      - changeCommand3 : cc3           (script)        [create,edit]
    
      - changeCommand4 : cc4           (script)        [create,edit]
          Specify a changed state command for each respective radio button.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - data1 : da1                    (int)           [create,query,edit]
    
      - data2 : da2                    (int)           [create,query,edit]
    
      - data3 : da3                    (int)           [create,query,edit]
    
      - data4 : da4                    (int)           [create,query,edit]
          Internal data associated with each radio button.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the group.  By default, this flag is set to true and the radio button values may be changed by
          clicking on them.  If false then the radio buttons are 'read only' and can not be clicked on. The value of the radio
          button can always be changed with the sl/selectflags regardless of the state of the ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enable1 : en1                  (bool)          [create,query,edit]
    
      - enable2 : en2                  (bool)          [create,query,edit]
    
      - enable3 : en3                  (bool)          [create,query,edit]
    
      - enable4 : en4                  (bool)          [create,query,edit]
          Enable state of the individual radio buttons.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          When present on creation an optional text label will be built with the group.  The string specifies the label text.
    
      - label1 : l1                    (unicode)       [create,query,edit]
    
      - label2 : l2                    (unicode)       [create,query,edit]
    
      - label3 : l3                    (unicode)       [create,query,edit]
    
      - label4 : l4                    (unicode)       [create,query,edit]
          Specify label strings for the respective radio buttons in the group.
    
      - labelAnnotation : la           (unicode)       [create,query,edit]
          when present on creation an optional text label will be built with the group . The string specifies the label tooltip
    
      - labelArray2 : la2              (unicode, unicode) [create,query,edit]
    
      - labelArray3 : la3              (unicode, unicode, unicode) [create,query,edit]
    
      - labelArray4 : la4              (unicode, unicode, unicode, unicode) [create,query,edit]
          Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfRadioButtons : nrb     (int)           [create]
          Number of radio buttons in the group (1 - 4).
    
      - offCommand : ofc               (script)        [create,edit]
          Command executed when any radio button turns off.
    
      - offCommand1 : of1              (script)        [create,edit]
    
      - offCommand2 : of2              (script)        [create,edit]
    
      - offCommand3 : of3              (script)        [create,edit]
    
      - offCommand4 : of4              (script)        [create,edit]
          Off command for each respective radio button.
    
      - onCommand : onc                (script)        [create,edit]
          Command executed when any radio button turns on.
    
      - onCommand1 : on1               (script)        [create,edit]
    
      - onCommand2 : on2               (script)        [create,edit]
    
      - onCommand3 : on3               (script)        [create,edit]
    
      - onCommand4 : on4               (script)        [create,edit]
          On command for each respective radio button.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - select : sl                    (int)           [create,query,edit]
          Selected radio button.  The argument is a 1 based integer.
    
      - shareCollection : scl          (unicode)       [create]
          Specify the radioButtonGrp that this radio group is to be associated with.  By default the radio group will be a
          separate collection.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - vertical : vr                  (bool)          [create,query]
          Whether the orientation of the radio buttons in this group are horizontal (default) or vertical.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.radioButtonGrp`
    """

    pass


def timeControl(*args, **kwargs):
    """
    This command creates a control that can be used for changing current time, displaying/editing keys, and
    displaying/scrubbing sound.Note: only one timeControl may be created.  The one Maya creates on startup can be accessed
    from the global string variable $gPlayBackSlider. Also, it is not a good idea to delete it.
    
    Flags:
      - animCurveNames : acn           (bool)          [create,query]
          When showKeysis not none, querying this flag will return the names of all the animCurves for which keyframe ticks are
          being displayed.  Query returns string[].
    
      - animLayerFilterOptions : alf   (unicode)       [create,query,edit]
          Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be allAffecting(no
          filter), active(only the active layers on the object will be displayed) and animLayerEditor(the settings will be taken
          from the animation layer editor).
    
      - animLayerShowWeight : asw      (bool)          [create,query,edit]
          Specifies or queries whether weights are to be shown when displaying animation layers.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - beginScrub : bs                (bool)          [edit]
          Set this widget up for sound scrubbing. Subsequent changes to current time will result in sound scrubbingbehavior, until
          the -endScrubcommand is issued for this widget.
    
      - currentFrameColor : cfc        (float, float, float, float) [edit]
          This flag is used to specify the rgba color of the current frame overlay rectangle in the timeControl.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - displaySound : ds              (bool)          [query,edit]
          Turn sound display off.  Query returns int.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - endScrub : es                  (bool)          [edit]
          End sound scubbing for this widget.  This stops sound scrubbing behavior and should be issued before any subsequent
          -beginScrubflags
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - forceRedraw : fd               (bool)          [create,edit]
          Force a redraw of the time control UI. Similiar to forceRefresh but does not rebuild key information.
    
      - forceRefresh : fr              (bool)          [create,edit]
          Force a refresh of the time control UI.
    
      - foregroundColor : fgc          (float, float, float) [edit]
          This flag is used to specify the rgb color of the vertical lines and numeric text in the timeControl.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - globalTime : gt                (bool)          [create,query,edit]
          truemeans this widget controls and displays the global, dependency graph time.  falsemeans time changes here do NOT
          affect the dependency graph. Query returns int.
    
      - greasePencilSequenceNames : gn (bool)          [query]
          Returns the names of all grease pencil sequences that have frames being displayed in the time line.  Query returns
          string[].
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the time slider will use as its source of content.  The time
          slider will only display keys for items contained in the selectionConnection object.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressCommand : pc              (script)        [create,edit]
          script to run on mouse-down in this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - range : rng                    (bool)          [create,query]
          Returns string representing the currently highlighted range visible on the time slider.  A range from 10 to 20 would be
          returned as 10:20.  When there's no range visible on the time slider, the query returns a range spanning the current
          time: for example, 10:11.  These values are in the current time unit.
    
      - rangeArray : ra                (bool)          [create,query]
          Returns a float array representing the currently highlighted range visible on the time slider.  A range from 10 to 20
          would be returned as { 10.0, 20.0 }.  When there's no range visible on the time slider, the query returns values
          spanning the current time: { 10.0, 11.0 }.  These values are in the current time unit.
    
      - rangeVisible : rv              (bool)          [create,query]
          Returns true if a currently highlighted range is visible on the time slider, false if no.
    
      - releaseCommand : rc            (script)        [create,edit]
          script to run on mouse-up in this control.
    
      - repeatChunkSize : rcs          (float)         [query,edit]
          How much sound (in the current time unit) is repeated when -repeatOnHold is true.  Default is 1.0.
    
      - repeatOnHold : roh             (bool)          [query,edit]
          Repeat sound during mouse-down events
    
      - resample : r                   (bool)          [edit]
          Resample the sound display to fit the widget
    
      - showGreaseFrames : sg          (unicode)       [create,query,edit]
          activewill show grease frames for the active camera.  noneshows no grease frames.  allwill show all grease frames.
          Default active.  Query returns string.
    
      - showKeys : sk                  (unicode)       [create,query,edit]
          activewill show tick marks for keyframes on all active objects.  noneshows no tick marks.  Any other name is taken as
          the name of a channel box whose selected attributes will display tick marks.  Default active.  Query returns string.
    
      - showKeysCombined : skc         (bool)          [create,query,edit]
          This flag can be used in conjunction with the showKeys flag to enable a combination of active+ channel boxbehavior.
          Specifically, if channel box attributes are selected, tick marks will be shown for those attributes. If no channel box
          attributes are selected, tick marks will be shown for keyframes on all active objects.
    
      - snap : sn                      (bool)          [create,query,edit]
          truemeans this widget is constrained to having values that are integers representing the current time unit.. falsemeans
          the current time indicator is free floatingand not constrained.
    
      - sound : s                      (unicode)       [query,edit]
          Name of audio depend node whose data should display in the sound-display widget. Query returns string.
    
      - tickSize : ts                  (int)           [create,query,edit]
          Specifies the width of keyframe ticks drawn in the time slider. The value will be clamped to the range [1, 63].
    
      - tickSpan : tsp                 (int)           [create,query,edit]
          Specifies the interval between keyframe ticks in the timeControl. For example, a value of 10, will place ticks at 0, 10,
          20, etc.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - waveform : wf                  (unicode)       [query,edit]
          Determines what part of the sound waveform to display, when -displaySound is true. Valid values are top, bottom, and
          both.  Default is top. Query returns string.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeControl`
    """

    pass


def confirmDialog(*args, **kwargs):
    """
    The confirmDialog command creates a modal dialog with a message to the user and a variable number of buttons to dismiss
    the dialog.  The dialog is dismissed when the user presses any button or chooses the close item from the window menu.
    In the case where a button is pressed then the name of the button selected is returned.  If the dialog is dismissed via
    the close item then the string returned is specified by the dismissStringflag. The default behaviour when no arguments
    are specified is to create an empty single button dialog.
    
    Flags:
      - annotation : ann               (unicode)       [create]
          set the annotation for the buttons
    
      - backgroundColor : bgc          (float, float, float) [create]
          The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. (Windows only flag)
    
      - button : b                     (unicode)       [create]
          Create a button with the given string as it's text.
    
      - cancelButton : cb              (unicode)       [create]
          The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply
          indicates which button created via the buttonflag shall respond to the escape key.
    
      - defaultButton : db             (unicode)       [create]
          The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply
          indicates which button created via the buttonflag shall respond to the enter key.
    
      - dismissString : ds             (unicode)       [create]
          The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then
          the string dismissis returned.
    
      - icon : icn                     (unicode)       [create]
          The user can specify one of the four standard icons -- question, information, warningand critical.  The question icon
          indicates that the messsage is asking a question.  The information icon indicates that the message is nothing out of the
          ordinary.  The warning icon indicates that the message is a warning, but can be dealt with.  The critical icon indicates
          that the message represents a critical problem. When no icon flag is present, we assume the user does not want to
          include any icon in the confirm dialog.
    
      - message : m                    (unicode)       [create]
          The message text appearing in the dialog.
    
      - messageAlign : ma              (unicode)       [create]
          Align the message left, center, or right.
    
      - parent : p                     (unicode)       [create]
          Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's
          parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
    
      - title : t                      (unicode)       [create]
          The dialog title.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.confirmDialog`
    """

    pass


def _createOtherCommands():
    pass


def thumbnailCaptureComponent(*args, **kwargs):
    """
    This command is used to generate a thumbnail/playblast sequence from the scene. In query mode, return type is based on
    queried flag.
    
    Flags:
      - capture : c                    (bool)          [create]
          Create a new component to capture a sequence of image for the current scene.
    
      - capturedFrameCount : cfc       (bool)          [query]
          Query only. Return the number of frames that have been captured.
    
      - closeCurrentSession : ccs      (bool)          [create]
          Delete the current thumbnail component (preview image will be destroyed).
    
      - delete : d                     (bool)          [create]
          Delete the generated image sequence and preview for the current capture session.
    
      - endFrame : ef                  (int)           [create,query]
          Set the end captured frame. Only valid when the -c/captureflag is set. If -sf/startFrameis set and not -ef/endFrame, or
          if endFrame is smaller than startFrame, endFrame will be automatically set to startFrame.
    
      - fileDialogCallback : fdc       (unicode)       [create]
          MEL only. Set the callback file dialog which is called after the capture component window has been closed. Only valid
          when the -c/captureflag is set.
    
      - fileDialogProcessing : fdp     (bool)          []
    
      - isSessionOpened : iso          (bool)          [query]
          Returns true if a thumbnail/playblast capture session is currently running (already opened and still not
          cancelled/saved).
    
      - launchedFromOptionsBox : lfo   (bool)          [query]
          Returns true if the thumbnail capture component was launched through the options dialog box, else false.
    
      - previewPath : pp               (bool)          [query]
          Returns the generated preview path (the first frame of generated sequence resized to 100x100 px).
    
      - removeProjectThumbnail : rpt   (unicode)       [create]
          Remove all captured thumbnail/playblast from the given project file path.
    
      - save : s                       (unicode)       [create]
          Save the generated image sequence for the given file to disk. The file path must be an absolute path.
    
      - selectedFileName : sfn         (bool)          []
    
      - startFrame : sf                (int)           [create,query]
          Set the start captured frame. Only valid when -c/captureflag is set.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.thumbnailCaptureComponent`
    """

    pass


def floatSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of controls containing a label
    text, an float field and a float slider. The text and field controls are optional.  Editing or querying the field range
    values has no effect if the -f/fieldflag was not specified when the group was created. This group also allows you to
    enter values into the field outside of the slider range which is limited by the -min/minValueand -max/maxValueflags.  To
    do this, use the -fmn/fieldMinValueand -fmx/fieldMaxValueflags to specify a greater range of values. Note that the
    command will not allow you to specify a -fmn/fieldMinValuegreater than the -min/minValuevalue nor a
    -fmx/fieldMaxValueless than the -max/maxValuevalue. If you do supply a larger field range with the -fmn/fieldMinValueand
    -fmx/fieldMaxValueflags then you will notice that entering a value in the field that is outside of the slider range will
    result in extending the slider range as well.  For example, if you create a slider group with the following command:
    floatSliderGrp -min -10 -max 10 -fieldMinValue -100 -fieldMaxValue 100; Then you will be able to use the slider to
    select any value from -10 to 10. At the same time you will be able to enter into the field any value from -100 to 100.
    If you enter a value, say 20, then the new slider range will grow such that this value is now accessible through the
    slider as well.  In fact, the new slider limit will become double of that what you entered.  Note that the slider limits
    will never grow beyond the field limits, in other words if you entered the value 80 then the slider will be clipped to
    the field limit of 100 and not doubled to 160.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed repeatedly during a drag of the slider.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to
          be the text for the extra label.
    
      - field : f                      (bool)          [create]
          Indicates whether the group will have an editable float field present that reflects the value of the slider.
    
      - fieldMaxValue : fmx            (float)         [create,query,edit]
          Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.
          By default, it is equal to the -max/maxValueflag.
    
      - fieldMinValue : fmn            (float)         [create,query,edit]
          Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By
          default, it is equal to the -min/minValueflag.
    
      - fieldStep : fs                 (float)         [create,query,edit]
          Increment for the field.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation the group will have static text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Maximum value for both the slider and the field.
    
      - minValue : min                 (float)         [create,query,edit]
          Minimum value for both the slider and the field.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,edit]
          Number of digits to the right of the decimal.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - sliderStep : ss                (float)         [create,query,edit]
          The slider step value represents the amount the value will increase or decrease when you click either side of the
          slider.
    
      - step : s                       (float)         [create,query,edit]
          Increment for both the slider and field.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float)         [create,query,edit]
          Value of the group.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatSliderGrp`
    """

    pass


def intField(*args, **kwargs):
    """
    Create a field control that accepts only integer values and is bound by a minimum and maximum value.  An invisible
    slider is attached to the field and accessed by holding down the Ctrl modifier key while pressing one of the mouse
    buttons.  Dragging the invisible slider to the right with the middle mouse button increases the field value by the
    amount specified with the -s/stepflag, while dragging to the left decreases the value by the same amount.  The left and
    right mouse buttons apply a factor of 0.1 and 10 to the step value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/valueflag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the invisible slider.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field is 'read only' and can not be typed into. The value of the field can always be changed with the
          -v/valueflag regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enterCommand : ec              (script)        [create,edit]
          Command executed when the keypad 'Enter' key is pressed.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          Upper limit of the field.
    
      - minValue : min                 (int)           [create,query,edit]
          Lower limit of the field.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - receiveFocusCommand : rfc      (script)        [create,edit]
          Command executed when the field receives focus.
    
      - step : s                       (int)           [create,query,edit]
          Increment for the invisible slider.  The field value will change by this amount when the invisible slider is dragged.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int)           [create,query,edit]
          Value of the field.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.intField`
    """

    pass


def intFieldGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text and editable integer
    fields. The label text is optional and one to four fields can be created.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when the value of any of the fields changes.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed when dragging the invisible slider in any of the fields.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enable1 : en1                  (bool)          [create,query,edit]
    
      - enable2 : en2                  (bool)          [create,query,edit]
    
      - enable3 : en3                  (bool)          [create,query,edit]
    
      - enable4 : en4                  (bool)          [create,query,edit]
          Enable state for the respective field.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text
          to the right of fields.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the
          label text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfFields : nf            (int)           [create]
          Set the number of fields on creation.  One to four fields are available.  The default is one field.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int, int, int, int) [create,query,edit]
          Values for all fields.
    
      - value1 : v1                    (int)           [create,query,edit]
    
      - value2 : v2                    (int)           [create,query,edit]
    
      - value3 : v3                    (int)           [create,query,edit]
    
      - value4 : v4                    (int)           [create,query,edit]
          Value for the respective field.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.intFieldGrp`
    """

    pass


def viewManip(*args, **kwargs):
    """
    Mel access to the view cube manipulator.                 In query mode, return type is based on queried flag.
    
    Flags:
      - bottomLeft : bl                (bool)          [create,query]
          Positions the cube in the bottom left of the screen.
    
      - bottomRight : br               (bool)          [create,query]
          Positions the cube in the bottom right of the screen.
    
      - compassAngle : ca              (float)         [create,query]
          Angle (in degrees) to rotate the compass.
    
      - dragSnap : ds                  (bool)          [create,query]
          Enable snapping of orbit direction to view cube part directions during drag operation.
    
      - drawCompass : dc               (bool)          [create,query]
          Show compass below the view cube.
    
      - fitToView : ftv                (bool)          [create]
          Fits the scene bounding box to the active view.
    
      - frontParameters : fp           (unicode)       []
    
      - goDefault : gd                 (bool)          []
    
      - goHome : gh                    (bool)          []
    
      - homeParameters : hp            (unicode)       []
    
      - levelCamera : lc               (bool)          [create]
          Flattens the camera view rotation relative to the ground plane.
    
      - minOpacity : mo                (float)         [create,query]
          Opacity level (in range [0,1]) on view cube when the cursor is away from it (it is fully opaque when the cursor is in
          the view cube area).
    
      - namespace : ns                 (unicode)       []
    
      - postCommand : p                (unicode)       []
    
      - preCommand : pr                (unicode)       []
    
      - preserveSceneUp : psu          (bool)          []
    
      - resetFront : rf                (bool)          []
    
      - resetHome : rh                 (bool)          []
    
      - restoreCenter : rc             (bool)          [create]
          Repositions the pivot point for orbiting/tumbling the scene to the center of the scene's bounding box.
    
      - selectionLockParameters : slp  (unicode)       []
    
      - setFront : sf                  (bool)          []
    
      - setHome : sh                   (bool)          []
    
      - size : s                       (unicode)       [create,query]
          Set or query the size of the View Cube, which can be one of tiny, small, normal, largeor auto. When set to autothe View
          Cube will be automatically set to the size most appropriate for the view.
    
      - toggleSelectionLock : tsl      (bool)          []
    
      - topLeft : tl                   (bool)          [create,query]
          Positions the cube in the top left of the screen.
    
      - topRight : tr                  (bool)          [create,query]
          Positions the cube in the top right of the screen.
    
      - visible : v                    (bool)          [create,query]
          Shows/hides the view manip.
    
      - zoomToFitScene : zf            (bool)          [create,query]
          Zoom the camera during animated transitions to fit the scene object in the viewport.                  Flag can have
          multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewManip`
    """

    pass


def loadPrefObjects(*args, **kwargs):
    """
    This command loads preference dependency nodes from userPrefObjects.ma, if it exists, from the user preference
    directory.
    
    
    Derived from mel command `maya.cmds.loadPrefObjects`
    """

    pass


def _lsUI(**kwargs):
    pass


def hotkeyCheck(*args, **kwargs):
    """
    This command checks if the given hotkey is mapped to a nameCommand object.  If so, the annotation of the nameCommand
    object is returned. Otherwise an empty string is returned.
    
    Flags:
      - altModifier : alt              (bool)          [create]
          Specifies if the Alt key is pressed.
    
      - commandModifier : cmd          (bool)          [create]
          Specifies if the command key is pressed.
    
      - ctrlModifier : ctl             (bool)          [create]
          Specifies if the Ctrl key is pressed.
    
      - isRepeatable : ir              (bool)          []
    
      - keyString : k                  (unicode)       [create]
          The key to check.
    
      - keyUp : kup                    (bool)          [create]
          Specifies if the hotkey is on keyup or keydown (i.e. Release or Press).
    
      - optionModifier : opt           (bool)          [create]
          Specifies if the option key is pressed.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
      - toBeRemovedInFutureMayaRelease : key (unicode)       []
    
    
    Derived from mel command `maya.cmds.hotkeyCheck`
    """

    pass


def hardwareRenderPanel(*args, **kwargs):
    """
    This command creates, edit and queries hardware render panels which contain only a hardware render editor.
    
    Flags:
      - camera : cam                   (unicode)       [query,edit]
          Query or edit the camera in a gl render panel.
    
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - glRenderEditor : gre           (bool)          [query]
          Query only. This flag returns the name of the gl render editor contained in the panel.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hardwareRenderPanel`
    """

    pass


def disable(*args, **kwargs):
    """
    This command enables or disables the control passed as argument.
    
    Flags:
      - value : v                      (bool)          [create]
          If true, this command disables the control. If false, this command enables the control. Default value is true (disable)
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.disable`
    """

    pass


def commandLine(*args, **kwargs):
    """
    This command creates a single line for command input/output.The left half is for input, the right half for output.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,edit]
          Command executed when the command line text changes.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enterCommand : ec              (script)        [create,edit]
          Command executed when the keypad 'Enter' key is pressed.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - holdFocus : hf                 (int)           [create,query,edit]
          Sets whether the command line should hold focus after exectuing a command.
    
      - inputAnnotation : ian          (unicode)       [create,query,edit]
          Annotate the input field with an extra string value.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfHistoryLines : nhl     (int)           [create,query,edit]
          Sets the maximum number of commands saved to the command line history. Up to -nhl/numberOfHistoryLines previous commands
          will be available by pressing the up-arrow from within the input field. The default value is 50.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - outputAnnotation : oan         (unicode)       [create,query,edit]
          Annotate the output field with an extra string value.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - sourceType : st                (unicode)       [create,query,edit]
          Sets the source type of this command line. Currently supports mel(enabled by default) and python.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.commandLine`
    """

    pass


def animCurveEditor(*args, **kwargs):
    """
    Edit a characteristic of a graph editor
    
    Flags:
      - acs : acs                      (areCurvesSelected) []
    
      - areCurvesSelected : acs        (bool)          [query]
          Returns a boolean to know if at least one curve is selected in the graph editor.
    
      - autoFit : af                   (unicode)       [query,edit]
          on | off | tgl Auto fit-to-view.
    
      - classicMode : cm               (bool)          [query,edit]
          When on, the graph editor is displayed in Classic Mode, otherwise Suites Modeis used.
    
      - clipTime : ct                  (unicode)       [query,edit]
          Valid values: onoffDisplay the clips with their offset and scale applied to the anim curves in the clip.
    
      - constrainDrag : cd             (int)           [create,query,edit]
          Constrains all Graph Editor animation curve drag operations to either the X-axis, the Y-axis, or to neither of those
          axes. Values to supply are: 0 for not constraining any axis, 1 for constraing the X-axis, or 2 for constraining the
          Y-axis. When used in queries, this flag returns the latter values and these values have the same interpretation as
          above. Note: when the shift key is pressed before dragging the animation curve, the first mouse movement will instead
          determine (and override) any prior set constrained axis.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - curvesShown : cs               (bool)          [query]
          Returns a string array containing the names of the animCurve nodes currently displayed in the graph editor.
    
      - curvesShownForceUpdate : csf   (bool)          [query]
          Returns a string array containing the names of the animCurve nodes currently displayed in the graph editor. Unlike the
          curvesShown flag, this will force an update of the graph editor for the case where the mainListConnection has been
          modified since the last refresh.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - denormalizeCurvesCommand : dcc (unicode)       [create,edit]
          Sets the script that is run to denormalize curves in the graph editor. This is intended for internal use only.
    
      - displayActiveKeyTangents : dat (unicode)       [edit]
          on | off | tgl Display active key tangents in the editor.
    
      - displayActiveKeys : dak        (unicode)       [edit]
          on | off | tgl Display active keys in the editor.
    
      - displayInfinities : di         (unicode)       [edit]
          on | off | tgl Display infinities in the editor.
    
      - displayKeys : dk               (unicode)       [edit]
          on | off | tgl Display keyframes in the editor.
    
      - displayNormalized : dn         (bool)          [query,edit]
          When on, display all curves normalized to the range -1 to +1.
    
      - displayTangents : dtn          (unicode)       [edit]
          on | off | tgl Display tangents in the editor.
    
      - displayValues : dv             (unicode)       [edit]
          on | off | tgl Display active keys and tangents values in the editor.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - keyingTime : kt                (unicode)       [query]
          The current time in the given curve to be keyed in the graph editor.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - lookAt : la                    (unicode)       [edit]
          all | selected | currentTime FitView helpers.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - menu : m                       (script)        [create]
          Specify a script to be run when the editor is created.  The function will be passed one string argument which is the new
          editor's name.
    
      - normalizeCurvesCommand : ncc   (unicode)       [create,edit]
          Sets the script that is run to normalize curves in the graph editor. This is intended for internal use only.
    
      - outliner : o                   (unicode)       [query,edit]
          The name of the outliner that is associated with the graph editor.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - preSelectionHighlight : psh    (bool)          [query,edit]
          When on, the curve/key/tangent under the mouse pointer is highlighted to ease selection.
    
      - renormalizeCurves : rnc        (bool)          [edit]
          This flag causes the curve normalization factors to be recalculated.
    
      - resultSamples : rs             (time)          [query,edit]
          Specify the sampling for result curves Note: the smaller this number is, the longer it will take to update the display.
    
      - resultScreenSamples : rss      (int)           [query,edit]
          Specify the screen base result sampling for result curves. If 0, then results are sampled in time.
    
      - resultUpdate : ru              (unicode)       [query,edit]
          Valid values: interactivedelayedControls how changes to animCurves are reflected in the result curves (if results are
          being shown).  If resultUpdate is interactive, then as interactive changes are being made to the animCurve, the result
          curves will be updated.  If modelUpdate is delayed (which is the default setting), then result curves are updated once
          the final change to an animCurve has been made.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - showActiveCurveNames : acn     (bool)          [query,edit]
          Display the active curve(s)'s name.
    
      - showBufferCurves : sb          (unicode)       [query,edit]
          Valid values: onofftglDisplay buffer curves.
    
      - showCurveNames : scn           (bool)          [query,edit]
          Display the curves's name.
    
      - showResults : sr               (unicode)       [query,edit]
          Valid values: onofftglDisplay result curves from expression or other non-keyed action.
    
      - showUpstreamCurves : suc       (bool)          [query,edit]
          If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves
          for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual
          animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that,
          even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.
    
      - smoothness : s                 (unicode)       [query,edit]
          Valid values: coarseroughmediumfineSpecify the display smoothness of animation curves.
    
      - snapTime : st                  (unicode)       [query,edit]
          none | integer | keyframe Keyframe move snap in time.
    
      - snapValue : sv                 (unicode)       [query,edit]
          none | integer | keyframe Keyframe move snap in values.
    
      - stackedCurves : sc             (bool)          [query,edit]
          Switches the display mode between normal (all curves sharing one set of axes) to stacked (each curve on its own value
          axis, stacked vertically).
    
      - stackedCurvesMax : scx         (float)         [query,edit]
          Sets the maximum value on the per-curve value axis when in stacked mode.
    
      - stackedCurvesMin : scm         (float)         [query,edit]
          Sets the minimum value on the per-curve value axis when in stacked mode.
    
      - stackedCurvesSpace : scs       (float)         [query,edit]
          Sets the spacing between curves when in stacked mode.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - valueLinesToggle : vlt         (unicode)       [edit]
          on | off | tgl Display the value lines for high/low/zero of selected curves in the editor                  Flag can have
          multiple arguments, passed either as a tuple or a list.
    
      - viewLeft : vl                  (float)         []
    
      - viewRight : vr                 (float)         []
    
    
    Derived from mel command `maya.cmds.animCurveEditor`
    """

    pass


def symbolButton(*args, **kwargs):
    """
    This command creates a symbol button.  A symbol button behaves like a regular button, the only difference is a symbol
    button displays an image rather that a text label.  A command may be attached to the button which will be executed when
    the button is pressed.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,query,edit]
          Command executed when the symbol button is pressed.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          Image for the button.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.symbolButton`
    """

    pass


def gradientControlNoAttr(*args, **kwargs):
    """
    This command creates a control for editing a ramp (2D control curve). The control attaches to an optionVar used to store
    and retrieve the encoded gradient control points stored in a string.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - asString : asString            (unicode)       [query,edit]
          Used to query and set the value of the ramp as a string of comma separated values
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [edit]
          Specifies a command to be executed whenever the value of this ramp is modified. This option should not be used when
          specifying an optionVar.
    
      - currentKey : ck                (int)           [create,query,edit]
          Returns the index of the currently selected key.
    
      - currentKeyChanged : ckc        (script)        [edit]
          Specifies a command to be executed whenever the selected key changes.
    
      - currentKeyColorValue : clv     (float, float, float) [query,edit]
          Get or set the color of the currently selected key. Only useful if the ramp is set to be a color ramp.
    
      - currentKeyCurveValue : cvv     (bool)          [query,edit]
          Get or set the value of the currently selected key. Only useful if the ramp is set to be a curve ramp.
    
      - currentKeyInterpValue : civ    (int)           [query,edit]
          Get or set the interpolation value for the current key.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [edit]
          Specifies a command to be executed while the ramp is being modified.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - optionVar : ov                 (unicode)       [create,query,edit]
          Specifies the name of the option var used to store and retrieve the string value capturing the curve.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rampAsColor : rac              (bool)          [create,query,edit]
          Sets whether the ramp should be viewed as a colour ramp or as a curve.  Default is as a curve.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - valueAtPoint : vap             (float)         [query]
          Used during query to specify the point at which to query the curve.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.gradientControlNoAttr`
    """

    pass


def attributeMenu(*args, **kwargs):
    """
    Action to generate popup connection menus for Hypershade. This command is used internally by the Hypershade panel.
    
    Flags:
      - beginMenu : beg                (bool)          [create]
          If true the menu will be used to start a connection edit so it will list all available attributes for either inputs or
          outputs.  If false the menu will be used to complete a connection so it will list only the attributes compatible with
          the attribute at the other end of the connection.  A plug must be supplied in this case.
    
      - editor : edt                   (unicode)       [create]
          Name of the Hypergraph, Hypershade or Visor editor for which this menu is being built.  This argument is no longer
          mandatory. If it is omitted, the inputs flag and the node must be used to specify the search targets. This allows
          attributeMenu to be used in the absence of a hypershade editor.
    
      - finishMenu : fsh               (bool)          [create]
          finishes the menu
    
      - inputs : inp                   (bool)          [create]
          If true only attributes which can be used as inputs will be listed.  If false only attributes which can be used as
          outputs will be listed
    
      - plug : p                       (PyNode)        [create]
          If inputs is false then we are completing a connection and the name of the plug at the other end of the connection must
          be supplied.
    
      - regPulldownMenuCommand : rpm   (unicode)       [create]
          This flag will register a callback that allows the user to define their own popup menu for a specific node type for use
          in the Hypershade and Hypergraph editor. The command signature should look like this: global proc int proc_name(string
          $editorName, string $nodeName, string $plug, string $mode, string $menuType) The method should return 0 if it does not
          recognize the node type and the default attributeMenu popup menu will be displayed. If the callback returns one then the
          menu is considered built and no other menuItems will be added to the popup. The return value from this flag will be the
          ID to use for the -unregPulldownMenuCommand flag.
    
      - unregPulldownMenuCommand : upm (int)           [create]
          This flag will unregister a callback procedure that was registered with the -regPulldownMenuCommand flag. The argument
          should be the integer identifier returned from the -regPulldownMenuCommand flag.                                    Flag
          can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attributeMenu`
    """

    pass


def timePort(*args, **kwargs):
    """
    This command creates a simple time control widget. See also the timeControlcommand.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - globalTime : gt                (bool)          [create,query,edit]
          truemeans this widget controls and displays the global, dependency graph time.  falsemeans time changes here do NOT
          affect the dependency graph. Query returns int.
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - snap : sn                      (bool)          [create,query,edit]
          truemeans this widget is constrained to having values that are integers representing the current time unit.. falsemeans
          the current time indicator is free floatingand not constrained.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timePort`
    """

    pass


def attrNavigationControlGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged label navigation button. The group is used to
    help the user manage connections to a particular attribute. When creating the control you have the opportunity to attach
    scripts to the control that are executed on various UI events.  You can define what happens when the navigation button
    is pressed, and when a node is dragged and dropped onto this attribute. The navigation button can traverse to the
    connected node or can bring up UI to create new connections to the attribute. The button also can show you state
    information: if there already exists a connection/if the connection is ignored.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attrNavDecision : attrNavDecision (PyNode, <type 'unicode'>) [create,query,edit]
          The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept
          in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the
          navigator implements.
    
      - attribute : at                 (PyNode)        [create,query,edit]
          The name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the
          attribute.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - connectAttrToDropped : cad     (script)        [create,query,edit]
          The script to execute when a node is dragged and dropped onto an attribute (multilister dnd attribute editor). Your
          script should take in two arguments: the source node and destination attribute respectively.
    
      - connectNodeToDropped : cnd     (script)        [create,query,edit]
          The script to execute when a node is dragged and dropped onto a node (the multilister issues this).  Your script should
          take in two arguments: the source node and destination node respectively.
    
      - connectToExisting : ce         (script)        [create,query,edit]
          The script to execute when a connection should be made to an existing node.
    
      - createNew : cn                 (script)        [create,query,edit]
          The script to execute when a new connectionis requested.
    
      - defaultTraversal : dtv         (script)        [create,query,edit]
          The script to execute to find out the name of the default traversal node.  The script you attach should be able to take
          in one argument (the attribute) and return the name of the node that is the default traversal node.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - delete : delete                (script)        [create,query,edit]
          The script to execute when the connection (and the node connected to) should be deleted.
    
      - disconnect : d                 (script)        [create,query,edit]
          The script to execute when a disconnectionis requested.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraButton : eb               (bool)          [create]
          Add an extra icon button to the last of this control.
    
      - extraButtonCommand : ebc       (script)        [create,edit]
          The command string is executed when the extra button is clicked.
    
      - extraButtonIcon : ebi          (unicode)       [create,query,edit]
          The icon file name of the extra button.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - ignore : i                     (script)        [create,query,edit]
          The script to execute when the connection should be ignored.
    
      - ignoreNotSupported : ins       (bool)          []
          Obsolete flag; has no effect.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Text for the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - noIgnorableMenu : nim          (bool)          [create,edit]
          Not show ignorable related popup menu when right click the label.
    
      - noKeyableMenu : nkm            (bool)          [create,edit]
          Not show keyable related popup menu when right click the label.
    
      - notIgnorableMenu : nim         (bool)          []
    
      - notKeyableMenu : nkm           (bool)          []
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - relatedNodes : ren             (script)        [create,query,edit]
          The script to execute to find out what the related nodes are.  The script you attach should be able to take in one
          argument (the attribute) and return a list of strings that are the name of the nodes that are related.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - unignore : u                   (script)        [create,query,edit]
          The script to execute when the connection should be unignored.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrNavigationControlGrp`
    """

    pass


def falloffCurveAttr(*args, **kwargs):
    """
    This command creates a control for editing a 2D control curve. This control attaches to a curve attribute, which must be
    a multi attribute where each entry is a compound composed of: A single float for control point positionA single float
    for control point valueThe MEL command AEaddCurveControl should be used to attach this control to an attribute in the
    attribute editor templates.
    
    Flags:
      - addControlVertex : acv         (unicode)       [edit]
          Used to add a control vertex for the curve.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - asString : asString            (unicode)       [query,edit]
          Used to query and set the value of the curve as a string of comma separated values
    
      - attribute : at                 (PyNode)        [create]
          Specifies the name of the curve attribute to control.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [edit]
          Specifies a command to be executed whenever the value of this curve is modified.
    
      - currentKey : ck                (int)           [create,query,edit]
          Returns the index of the currently selected key.
    
      - currentKeyValue : ckv          (float, float)  [query,edit]
          Get or set the value of the currently selected key.
    
      - customCurveWidget : ccw        (bool)          [create,query,edit]
          Determines whether or not the curve widget is using a custom curve. When a custom curve is used, it is stored by a
          falloff curve in the brush tool settings, and the flag should be true.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteControlVertex : dcv      (int)           [edit]
          Used to delete a control vertex of the curve.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - readOnly : ro                  (bool)          [create,query,edit]
          Specifies if the curve is read only or not. If true, the curve can't be edited.
    
      - selectedPositionControl : spc  (unicode)       [create,edit]
          Specifies the name of a float slider to edit the selected key position.
    
      - selectedValueControl : svc     (unicode)       [create,edit]
          Specifies the name of a float slider to edit the selected key value.
    
      - snapToGrid : stg               (bool)          [create,query,edit]
          Specifies whether or not curve control points snap to grid when they are being moved.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.falloffCurveAttr`
    """

    pass


def uiTemplate(name='None', force='False', exists='None'):
    """
    This command creates a new command template object. Template objects can hold default flag arguments for multiple UI
    commands. The command arguments are specified with the individual commands using the -defineTemplate flag and the
    desired flags and arguments.  See also setUITemplate.
    
    Flags:
      - defineTemplate : dt            (unicode)       []
    
      - exists : ex                    (bool)          [create]
          Returns true|false depending upon whether the specified uiTemplate exists.  Other flags are ignored.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
      - useTemplate : ut               (unicode)       []
    
    
    Derived from mel command `maya.cmds.uiTemplate`
    """

    pass


def scmh(*args, **kwargs):
    """
    Set the current manipulator handle value(s).  In UI units (where applicable), though the syntax is set to handle the
    unit type of the current manipulator handle (if available).
    
    Flags:
      - absolute : a                   (bool)          [create]
          The values are absolute
    
      - ignore : i                     (int)           [create]
          This is a multiuse flag which specifies that the index-th (1-based) entry is to be ignored
    
      - quiet : q                      (bool)          [create]
          This flag suppresses all error messages
    
      - relative : r                   (bool)          [create]
          The values are relative                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scmh`
    """

    pass


def setNodeTypeFlag(*args, **kwargs):
    """
    This command sets static data on the specified node type. This will affect the class of node type as a whole.  The
    argument passed may be the name of the node type or the node type tag.  Node type tags may be found using the objectType
    command.
    
    Flags:
      - display : dsp                  (bool)          [create]
          Sets whether the node type will appear in the UI or not.  Setting display to false will cause the node type to not
          appear in the UI.
    
      - threadSafe : ts                (bool)          [create,query]
          Sets whether the node type will evaluate in parallel when using the parallel DG evaluation option in Viewport 2.0. In
          query mode returns true if the node type will evaluate in parallel when using the parallel DG evaluation option in
          Viewport 2.0.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setNodeTypeFlag`
    """

    pass


def hudSlider(*args, **kwargs):
    """
    This command creates a Heads-up Display (HUD) slider control which is placed in a 2D inactive overlay plane on the 3D
    viewport. It is to be used to provide hands-on interaction designated by a user script. The HUD slider is derived from a
    generic HUD object and thus inherits a similar workflow. Although this command provides much of the same functionality
    as the headsUpDisplay command, it does not provide headsUpDisplay layout controls such as layoutVisibility,
    nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality, please use the headsUpDisplay
    command. This command is focused solely around the creation and management of HUD sliders. Similarly, all operations
    performed by this command are limited to HUDs that are sliders. The only mandatory flags, on creation are the section
    and block flags. Like the headsUpDisplay command, upon creation of a HUD slider, an ID number will be assigned to it.
    This can be used to remove the HUD slider via the headsUpDisplay command (-rid/removeID [int IDNumber]), if desired.
    Alternatively, the headsUpDisplay command can remove HUD objects via their position (section and block), or their unique
    name.
    
    Flags:
      - allowOverlap : ao              (bool)          [create,query,edit]
          Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag
          description for more details).
    
      - block : b                      (int)           [create,query,edit]
          Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column
          of blocks. The total number of blocks contained within each section is variable. The number of blocks that will be
          visible within each section is dependent on the size of blocks contained in each section and the current size of the
          window. Blocks begin enumerating from 0 and flexibly increase based on need. For HUD sliders, the format differs from
          that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify,
          padding, labelWidth, valueWidth) is shown below: __________________________________________________________________ |
          |     |        |            |      |             |     |     | |  P  |  J  |   LW   |   Slider   |  IP  | SliderValue |
          J  |  P  | |_____|_____|________|____________|______|_____________|_____|_____| P = Sub-block of width, padding J =
          Justification of the entire block LW = Sub-block of width, labelWidth Slider = Length of the slider SliderValue = Sub-
          block of width, valueWidth IP = Internal padding Block PositioningBlocks on the top section begin from the top edge of
          the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility
          from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport. Lastly, there can
          be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error.
          Keep this in mind when positioning the HUD.
    
      - blockAlignment : ba            (unicode)       [create,query,edit]
          Specifies the alignment of the block within its respective column. Available alignments are: center, leftand right. The
          default alignment is left.
    
      - blockSize : bs                 (unicode)       [create,query,edit]
          Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds
          to a 20, 35 or 50 pixel height, respectively.
    
      - decimalPrecision : dp          (int)           [create,query,edit]
          Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are
          1 to 8.
    
      - dragCommand : dc               (script)        [create,query,edit]
          Specifies the procedure or script to run during a mouse drag event.
    
      - internalPadding : ip           (int)           [create,query,edit]
          Specifies the amount of padding between the internal elements of the HUD. For the hudSlider, this represents the padding
          between the slider bar and the slider value. The default padding is 10.
    
      - label : l                      (unicode)       [create,query,edit]
          Text label of the HUD.
    
      - labelFontSize : lfs            (unicode)       [create,query,edit]
          Sets the font size of the label. Available sizes are: small and large.
    
      - labelWidth : lw                (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold the label. The contents of this textboxwill be left
          justified. If the width of the actual label exceeds the width of the textbox,the label will be truncated to fit within
          the dimensions of the textbox.(To see a layout of a block, see the description of the -block flag.)
    
      - maxValue : max                 (float)         [create,query,edit]
          Specify the maximum value of the slider. Note:Although this flag takes in a FLOAT as an argument, if the HUD type is
          int, the value will be automatically converted internally to an integer.
    
      - minValue : min                 (float)         [create,query,edit]
          Specify the minimum value of the slider. Note:Although this flag takes in a FLOAT as an argument, if the HUD type is
          int, the value will be automatically converted internally to an integer.
    
      - padding : p                    (int)           [create,query,edit]
          Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
    
      - pressCommand : pc              (script)        [create,query,edit]
          Specifies the procedure or script to run during a mouse click event.
    
      - releaseCommand : rc            (script)        [create,query,edit]
          Specifies the procedure or script to run during a mouse release event.
    
      - section : s                    (int)           [create,query,edit]
          Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows
          make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.
          ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |
          |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  |
          |    |    |    |    |    | |____|____|____|____|____|Each section is denoted by a number from 0 to 9 as illustrated
          above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1 To prevent
          HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility
          precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen
          space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically
          compensates for this by removing the sections of least priority. These sections are made invisible and a warning is
          issued to inform the user of the removal. This continues until only the section of highest priority remains. For each
          row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority,
          followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly
          Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well.
          The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two
          sections are of lowest priority. This means that as the viewport gradually decreases in width to the point where
          sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and
          finally section 4. A similar note is provided below for the block layout.
    
      - sliderIncrement : si           (float)         [create,query,edit]
          Specify the number of increments along the slider. If not specified or set to 0 or less, the slider will be linearly
          even and continuous from minValue to maxValue. Note:Although this flag takes in a FLOAT as an argument, if the HUD type
          is int, the value will be automatically converted internally to an integer.
    
      - sliderLength : sl              (int)           [create,query,edit]
          Specifies the length of the slider in pixels.
    
      - type : t                       (unicode)       [create,query,edit]
          Specify the numeric type of the HUD. Available types are: floatand int.
    
      - value : v                      (float)         [create,query,edit]
          Set/Return the slider value if the HUD is a valid HUD slider. Note:Although this flag takes in a FLOAT as an argument,
          if the HUD type is int, the value will be automatically converted internally to an integer.
    
      - valueAlignment : va            (unicode)       [create,query,edit]
          Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: leftand
          right. The default alignment is left.
    
      - valueFontSize : vfs            (unicode)       [create,query,edit]
          Sets the font size of the slider value. Available sizes are: small and large.
    
      - valueWidth : vw                (int)           [create,query,edit]
          Specifies the pixel width of the virtual textboxwhich will hold the slider value. (To see a layout of a block, see the
          description of the -block flag.)
    
      - visible : vis                  (bool)          [create,query,edit]
          Sets the visibility of the Heads-Up Display on and off.                                    Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hudSlider`
    """

    pass


def switchTable(*args, **kwargs):
    """
    This command creates/edits/queries the switch table control. The optional argument is the name of the control.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label1 : l1                    (unicode)       [edit]
          Set the label of the first column
    
      - label2 : l2                    (unicode)       [edit]
          Set the label of the second column
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - selectedRow : sr               (bool)          [query]
          The current row selected.
    
      - switchNode : sn                (PyNode)        [query,edit]
          The switch node to be displayed in the control.
    
      - underPointerRow : upr          (bool)          [query]
          The row under the pointer.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.switchTable`
    """

    pass


def artBuildPaintMenu(*args, **kwargs):
    """
    ??
    
    
    Derived from mel command `maya.cmds.artBuildPaintMenu`
    """

    pass


def flowLayout(*args, **kwargs):
    """
    This command creates a layout that arranges its children along a single line (either horizontal or vertical). Depending
    on the value of the -wrap boolean flag (default is false), if the layout's parent cannot fit all the children on one
    line, the children will either wrap onto the next line(s) or be truncated.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - columnSpacing : cs             (int)           [create,query,edit]
          Sets the space between children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - vertical : v                   (bool)          [create,query]
          Whether the orientation of the layout is horizontal (default) or vertical.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - wrap : wr                      (bool)          [create,query,edit]
          When set to true, if the layout's parent cannot fit all the children in a single line, the children will wrap onto the
          next line(s). Default setting is false.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.flowLayout`
    """

    pass


def glRenderEditor(*args, **kwargs):
    """
    Create a glRender view. This is a special view used for hardware rendering. This command is used to create and reparent
    the view as needed to support panels. See the glRender command for controlling the specific behavior of the hardware
    rendering. In query mode, return type is based on queried flag.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - lookThru : lt                  (unicode)       [create,query,edit]
          Specify which camera the glRender view should be using.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - viewCameraName : vcn           (bool)          [query]
          Returns the name of the current camera used by the glRenderPanel. This is a query only flag.                  Flag can
          have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.glRenderEditor`
    """

    pass


def optionMenu(*args, **kwargs):
    """
    This command creates a popup menu control.  The command creates the control and provides its menu.  Subsequent calls to
    the menuItem command will place them in the popup.  Note that commands attached to menu items will not get called.
    Attach any commands via the -cc/changedCommand flag.
    
    Modifications:
      - returns an empty list when the result is None for flags: (query and (itemListLong or itemListShort))
    
    Flags:
      - alwaysCallChangeCommand : acc  (bool)          []
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - beforeShowPopup : bsp          (script)        [create,edit]
          Callback that is called just before we show the drop down menu.
    
      - changeCommand : cc             (script)        [create,edit]
          Adds a callback that is called when a new item is selected. The MEL script will have the newly selected item's value
          substituted for #1. For Python, the callback should be a callable object which accepts one argument, which is the newly
          selected item's value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteAllItems : dai           (bool)          []
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - itemListLong : ill             (bool)          [query]
          The long names of the menu items.
    
      - itemListShort : ils            (bool)          [query]
          The short names of the menu items.
    
      - label : l                      (unicode)       [create,query,edit]
          The optional label text to the left of the popup menu.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfItems : ni             (bool)          [query]
          The number of menu items.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - select : sl                    (int)           [create,query,edit]
          The current menu item.  The argument and return value is 1-based.  Note that the current menu item can only be set if it
          is enabled.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (unicode)       [create,query,edit]
          The text of the current menu item.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.optionMenu`
    """

    pass


def horizontalLayout(*args, **kwargs):
    pass


def radioCollection(*args, **kwargs):
    """
    This command creates a radio button collection. Collections are parented to the current default layout if no parent is
    specified with the -p/parentflag.  As children of the layout they will be deleted when the layout is deleted.
    Collections may also span more than one window if the -gl/globalflag is used. In this case the collection has no parent
    and must be explicitly deleted with the deleteUIcommand when it is no longer wanted.
    
    Flags:
      - collectionItemArray : cia      (bool)          [query]
          Return a string list giving the long names of all the items in this collection.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - gl : gl                        (bool)          [create,query]
          Set the collection to have no parent layout.  Global collections must be explicitly deleted.
    
      - numberOfCollectionItems : nci  (bool)          [query]
          Return the number of items in this collection.
    
      - parent : p                     (unicode)       [create]
          The parent of the collection.  The collection will be deleted along with the parent.
    
      - select : sl                    (unicode)       [create,query,edit]
          Select the specified collection item.  If queried will return the name of the currently selected collection item.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.radioCollection`
    """

    pass


def componentBox(*args, **kwargs):
    """
    This command creates a component box, which is sensitive to the active list.  It displays certain components of the last
    node on the active list, and provides a two-way connection to keep the widget up to date.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - execute : exe                  (unicode, bool) [edit]
          Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in
          the component box, for every matching selected object (ie, for every object would be affected if you changed a cell
          value.)  Before the command is executed, #Ais substituted with the name of the attribute, and #Nwith the name of the
          node, and #Pwith the full path name of the node.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - labelWidth : lw                (int)           [query,edit]
          An optional flag which is used to modify the width assigned to labels appearing in the componentBox.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxHeight : mh                 (int)           [query,edit]
          An optional flag which is used to limit the height of the componentBox.
    
      - maxWidth : mw                  (int)           [query,edit]
          An optional flag which is used to limit the width of the componentBox.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [query,edit]
          Controls the number of digits to the right of the decimal point that will be displayed for float-valued components.
          Default is 3.  Queried, returns an int.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowHeight : rh                 (int)           [edit]
          An optional flag which is used to set the height of all rows in the componentBox.
    
      - selectedAttr : sla             (bool)          [query]
          Returns a list of names of all the attributes that are selected. This flag is ignored when not being queried.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.componentBox`
    """

    pass


def textManip(*args, **kwargs):
    """
    Shows/hides the text manip.              In query mode, return type is based on queried flag.
    
    Flags:
      - visible : v                    (bool)          [create,query]
          Shows/hides the text manip.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textManip`
    """

    pass


def textCurves(*args, **kwargs):
    """
    The textCurves command creates NURBS curves from a text string using the specified font. A single letter can be made up
    of more than one NURBS curve. The number of curves per letter varies with the font.
    
    Flags:
      - caching : cch                  (bool)          []
    
      - constructionHistory : ch       (bool)          []
    
      - deprecatedFontName : dfn       (bool)          []
    
      - font : f                       (unicode)       [create]
          The font to use.
    
      - frozen : fzn                   (bool)          []
    
      - name : n                       (unicode)       [create]
          Sets the name of the newly-created node. If it contains namespace path, the new node will be created under the specified
          namespace; if the namespace does not exist, it will be created.
    
      - nodeState : nds                (int)           []
    
      - object : o                     (bool)          [create]
          Create the result, or just the dependency node.
    
      - text : t                       (unicode)       [create]
          The string to create the curves for.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.textCurves`
    """

    pass


def floatSliderButtonGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a float slider component with optional button and symbol
    buttons. TelfFloatSliderGrpCmd.cpp
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - buttonCommand : bc             (script)        [create,edit]
          Command string to be executed when the button is pressed.
    
      - buttonLabel : bl               (unicode)       [create,query,edit]
          The button text.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed repeatedly during a drag of the slider.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to
          be the text for the extra label.
    
      - field : f                      (bool)          [create]
          Indicates whether the group will have an editable float field present that reflects the value of the slider.
    
      - fieldMaxValue : fmx            (float)         [create,query,edit]
          Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.
          By default, it is equal to the -max/maxValueflag.
    
      - fieldMinValue : fmn            (float)         [create,query,edit]
          Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By
          default, it is equal to the -min/minValueflag.
    
      - fieldStep : fs                 (float)         [create,query,edit]
          Increment for the field.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          Image displayed on the symbol button.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation the group will have static text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Maximum value for both the slider and the field.
    
      - minValue : min                 (float)         [create,query,edit]
          Minimum value for both the slider and the field.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,edit]
          Number of digits to the right of the decimal.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - sliderStep : ss                (float)         [create,query,edit]
          The slider step value represents the amount the value will increase or decrease when you click either side of the
          slider.
    
      - step : s                       (float)         [create,query,edit]
          Increment for both the slider and field.
    
      - symbolButtonCommand : sbc      (script)        [create,edit]
          Command string executed when the symbol button is pressed.
    
      - symbolButtonDisplay : sbd      (bool)          [create,query,edit]
          Visibility of the symbol button.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float)         [create,query,edit]
          Value of the group.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatSliderButtonGrp`
    """

    pass


def autoPlace(*args, **kwargs):
    """
    This command takes a point in the centre of the current modeling pane and projects it onto the live surface. This
    produces a point in 3 space which is returned. If the um/useMouseflag is set the current mouse position is used rather
    than the centre of the modeling pane.
    
    Flags:
      - useMouse : um                  (bool)          [create]
          Use the current mouse position rather than the centre of the active view.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.autoPlace`
    """

    pass


def fontDialog(*args, **kwargs):
    """
    Displays a dialog of available fonts for the user to select from. The name of the selected font is returned, or an empty
    string if no font was selected. When the FontListflag is used, no dialog is displayed. Instead the command returns an
    array of the available fonts.
    
    Flags:
      - FontList : fl                  (bool)          [create]
          Returns an array of all available font names. No dialog is displayed.
    
      - scalable : sc                  (bool)          [create]
          Limits the fonts returned or displayed to just those that are scalable.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.fontDialog`
    """

    pass


def inViewEditor(*args, **kwargs):
    """
    Mel access to the In-View Editor. In-View Editors display a customizable subset of a node's attributes, letting you
    adjust attributes directly in a scene instead of opening the Channel Box or Attribute Editor. In query mode, return type
    is based on queried flag.
    
    Flags:
      - visible : v                    (bool)          [create,query]
          Shows/hides the In-View Editor outside the Show Manips context.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.inViewEditor`
    """

    pass


def verticalLayout(*args, **kwargs):
    pass


def formLayout(*args, **kwargs):
    """
    This command creates a form layout control. A form layout allows absolute and relative positioning of the controls that
    are its immediate children. Controls have four edges: top, left, bottom and right. There are only two directions that
    children can be positioned in, right-left and up-down. The attach flags take the direction of an attachment from the
    argument that names the edge to attach (the second argument). Any or all edges of a child may be attached. There are six
    ways to attach them: Attach to Form - Attaches an edge to the relevant side of the form layout. Thus -attachForm button3
    leftwill attach the left edge of the button to the left edge of the form.Attach to Opposite Side of Form - Attaches an
    edge relative to the furthest side of the form layout.Attach to Another Control - Attaches an edge to the closest edge
    of the other control named.Attach to Opposite Side of Another Control - Attaches an edge relative to the furthest side
    of another control.Attach to Position - Attaches an edge to a position on the form layout.  The position is given as a
    fixed fraction of the -nd/numDivisions value and as this value defaults to 100 it is easiest to think of it as a
    percentage of the form's size.Attach to Nothing - Attaches an edge to nothing. The size of the child control will
    determine this edge's position.Each edge attachment may have an offset that acts to separate controls visually. There is
    no default positioning relationship so to have children appear in the form they must have at least one edge attached in
    each direction. Note:In the flag definitions the arguments follow these rules: controlmust be the name of an immediate
    child of the form layout.edgemust be one of top, left, bottom, or right.positionmay range from 0 to the number of
    divisions as specified with the -nd/numberOfDivisions flag and gives the fraction of the width of the form as a
    measurement. This normally means 0-100 so  positionmay be thought of as a percentage.offsetis an integer value in
    pixels.These are multi-use flags so any number of attachments may be made in a single command. Note:Avoid making control
    attachments that form a loop in control dependencies. For example: window; string $form = `formLayout`; string $btn1 =
    `button`; string $btn2 = `button`; string $btn3 = `button`;formLayout -edit-attachControl $btn2 top2 $btn1-attachControl
    $btn3 top2 $btn2-attachControl $btn1 right2 $btn3 $form;showWindow; $btn2 is attached to $btn1, $btn3 is attached to
    $btn2, and $btn1 is attached to $btn3. Thus, the placement of $btn1 is dependent on the placement of $btn3, which is
    dependent on the placement of $btn2, which is dependent on the placement of $btn1. The last control attachment will have
    created a loop in the dependencies. To prevent runtime errors, Maya will ignore this attachment and instead issue a
    warning that a cyclical control attachment has been detected in the script.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attachControl : ac             (unicode, unicode, int, unicode) [create,edit]
          Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to
          another control.
    
      - attachForm : af                (unicode, unicode, int) [create,edit]
          Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach the specified control to
          the form, offset by the specified amount.
    
      - attachNone : an                (unicode, unicode) [create,edit]
          Arguments are: control, edge Valid edge values are: top| bottom| left| right. Attach a control to nothing.
    
      - attachOppositeControl : aoc    (unicode, unicode, int, unicode) [create,edit]
          Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to the
          opposite side of another control.
    
      - attachOppositeForm : aof       (unicode, unicode, int) [create,edit]
          Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach a control to the opposite
          side of the form.
    
      - attachPosition : ap            (unicode, unicode, int, int) [create,edit]
          Arguments are: control, edge, offset, position Valid edge values are: top| bottom| left| right. Attach a control to a
          position in the form.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfDivisions : nd         (int)           [create,query,edit]
          Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.formLayout`
    """

    pass


def createEditor(*args, **kwargs):
    """
    This command creates a property sheet for any dependency node. The second argument is the name of the node, and the
    first is the name of a layout into which the property sheet controls should be placed. The property sheets created by
    this command can by user-customized using the editorTemplatecommand.
    
    Flags:
      - noCloseOnDelete : nc           (bool)          []
    
      - queueForDelete : qfd           (bool)          [create]
          The specified layout is put on a queue.  When the queue is full, layouts past the end of the queue are automatically
          deleted.  If the layout is already on the queue, it is moved to the front.  This allows us to dispose of editors when
          they are no longer being used.  This flag should only be used by the showEditor.mel script.                  Flag can
          have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.createEditor`
    """

    pass


def inViewMessage(*args, **kwargs):
    """
    Used for displaying in-view messages. Note: On Linux, the alphaand textAlphaflags for inViewMessage are only supported
    when running a window manager that supports compositing (transparency and opacity).  Otherwise, they are ignored.  In
    addition, the flags for message fading: -fade, -fadeInTime, -fadeStay and -fadeOutTimeare supported, but the message
    will display without a fade effect if the window manager doesn't support compositing.
    
    Flags:
      - alpha : a                      (float)         [create]
          Sets the maximum alpha transparency for the message box.
    
      - assistMessage : amg            (unicode)       [create]
          The user assistance message to be displayed, can be html format.
    
      - backColor : bkc                (int)           [create]
          Sets the background color for the message using the format 0xAARRGGBB, alpha is not taken into account.
    
      - clear : cl                     (unicode)       [create]
          Use this flag to clear the message at a specified position. The supported positions are the same as for the
          -pos/position flag.
    
      - dragKill : dk                  (bool)          [create]
          Use this flag if the message needs to be deleted on mouse drag.
    
      - fade : f                       (bool)          [create]
          Whether the message will fade after a time interval or not.
    
      - fadeInTime : fit               (int)           [create]
          Sets how long it takes for the image to fade in (milliseconds).
    
      - fadeOutTime : fot              (int)           [create]
          Sets how long it takes for the image to fade out (milliseconds).
    
      - fadeStayTime : fst             (int)           [create]
          Sets how long the image stays at max opacity  (milliseconds).
    
      - font : ft                      (unicode)       [create]
          Sets the message to a font (eg. Arial).
    
      - fontSize : fts                 (int)           [create]
          Sets the message font size.
    
      - frameOffset : fof              (int)           [create]
          Sets how far the message appears from the edge of the viewport in pixels.
    
      - hide : hd                      (bool)          [create]
          Hides all messages.
    
      - message : msg                  (unicode)       [create]
          The message to be displayed, can be html format. General message, inherited by -amg/assistMessageand -smg/statusMessage.
    
      - minimize : min                 (bool)          [create]
          Minimize all messages.
    
      - position : pos                 (unicode)       [create]
          The position that the message will appear at relative to the active viewport. The supported positions
          are:topLefttopCentertopRightmidLeftmidCentermidCenterTopmidCenterBotmidRightbotLeftbotCenterbotRight
    
      - restore : res                  (bool)          [create]
          Restore all messages.
    
      - show : sh                      (bool)          [create]
          Shows all messages.
    
      - statusMessage : smg            (unicode)       [create]
          The status info message to be displayed, can be html format.
    
      - textAlpha : ta                 (float)         [create]
          Sets the maximum alpha transparency for the message text.
    
      - textOffset : tof               (int)           [create]
          Sets how far the text appears from the edge of the message box in pixels.
    
      - uvEditor : uv                  (bool)          [create]
          Show the message in the active UV editor view.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.inViewMessage`
    """

    pass


def checkBoxGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates from one to four check boxes in a single row. They can have
    an optional text label. TelfBaseGrpCmd.cpp
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and
          offCommand. That is, one should either use changeCommand and test the state of a check box from inside the callback, or
          use onCommand and offCommand as separate callbacks.
    
      - changeCommand1 : cc1           (script)        [create,edit]
    
      - changeCommand2 : cc2           (script)        [create,edit]
    
      - changeCommand3 : cc3           (script)        [create,edit]
    
      - changeCommand4 : cc4           (script)        [create,edit]
          Specify a changed state command for each respective check box.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the group.  By default, this flag is set to true and the check box values may be changed by clicking
          on them.  If false then the check boxes are 'read only' and can not be clicked on. The value of the check boxes can
          always be changed with the -v/valueflags regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enable1 : en1                  (bool)          [create,query,edit]
    
      - enable2 : en2                  (bool)          [create,query,edit]
    
      - enable3 : en3                  (bool)          [create,query,edit]
    
      - enable4 : en4                  (bool)          [create,query,edit]
          Enable state of the individual check boxes.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          When present on creation an optional text label will be built with the group.  The string specifes the label text.
    
      - label1 : l1                    (unicode)       [create,query,edit]
    
      - label2 : l2                    (unicode)       [create,query,edit]
    
      - label3 : l3                    (unicode)       [create,query,edit]
    
      - label4 : l4                    (unicode)       [create,query,edit]
          Specify label strings for the respective check boxes in the group.
    
      - labelArray2 : la2              (unicode, unicode) [create,query,edit]
    
      - labelArray3 : la3              (unicode, unicode, unicode) [create,query,edit]
    
      - labelArray4 : la4              (unicode, unicode, unicode, unicode) [create,query,edit]
          Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfCheckBoxes : ncb       (int)           [create]
          Number of check boxes in the group (1 - 4).
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,edit]
          Command executed when any check box turns off.
    
      - offCommand1 : of1              (script)        [create,edit]
    
      - offCommand2 : of2              (script)        [create,edit]
    
      - offCommand3 : of3              (script)        [create,edit]
    
      - offCommand4 : of4              (script)        [create,edit]
          Off command for each respective check box.
    
      - onCommand : onc                (script)        [create,edit]
          Command executed when any check box turns on.
    
      - onCommand1 : on1               (script)        [create,edit]
    
      - onCommand2 : on2               (script)        [create,edit]
    
      - onCommand3 : on3               (script)        [create,edit]
    
      - onCommand4 : on4               (script)        [create,edit]
          On command for each respective check box.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value1 : v1                    (bool)          [create,query,edit]
    
      - value2 : v2                    (bool)          [create,query,edit]
    
      - value3 : v3                    (bool)          [create,query,edit]
    
      - value4 : v4                    (bool)          [create,query,edit]
          Values for the respective check boxes in the group.
    
      - valueArray2 : va2              (bool, bool)    [create,query,edit]
    
      - valueArray3 : va3              (bool, bool, bool) [create,query,edit]
    
      - valueArray4 : va4              (bool, bool, bool, bool) [create,query,edit]
          Specifies multiple values in a single flag.  These flags are ignored if the number of check boxes doesn't match.
    
      - vertical : vr                  (bool)          [create,query]
          Whether the orientation of the checkbox controls in this group are horizontal (default) or vertical.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.checkBoxGrp`
    """

    pass


def intSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of controls containing a label
    text, an integer field and an integer slider. The text and field controls are optional.  Editing or querying the field
    range values has no effect if the -f/fieldflag was not specified when the group was created. This group also allows you
    to enter values into the field outside of the slider range which is limited by the -min/minValueand -max/maxValueflags.
    To do this, use the -fmn/fieldMinValueand -fmx/fieldMaxValueflags to specify a greater range of values. Note that the
    command will not allow you to specify a -fmn/fieldMinValuegreater than the -min/minValuevalue nor a
    -fmx/fieldMaxValueless than the -max/maxValuevalue. If you do supply a larger field range with the -fmn/fieldMinValueand
    -fmx/fieldMaxValueflags then you will notice that entering a value in the field that is outside of the slider range will
    result in extending the slider range as well.  For example, if you create a slider group with the following command:
    intSliderGrp -min -10 -max 10 -fieldMinValue -100 -fieldMaxValue 100; Then you will be able to use the slider to select
    any value from -10 to 10. At the same time you will be able to enter into the field any value from -100 to 100.  If you
    enter a value, say 20, then the new slider range will grow such that this value is now accessible through the slider as
    well.  In fact, the new slider limit will become double of that what you entered.  Note that the slider limits will
    never grow beyond the field limits, in other words if you entered the value 80 then the slider will be clipped to the
    field limit of 100 and not doubled to 160. TelfBaseGrpCmd.cpp
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          The command string executed when the value of the slider changes.  It will be executed only once after a drag of the
          slider.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          The command string executed repeatedly during a drag of the slider.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to
          be the text for the extra label.
    
      - field : f                      (bool)          [create]
          If true on creation the group will have an editable int field present that reflects the value of the slider.
    
      - fieldMaxValue : fmx            (int)           [create,query,edit]
          Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.
          By default, it is equal to the -max/maxValueflag.
    
      - fieldMinValue : fmn            (int)           [create,query,edit]
          Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By
          default, it is equal to the -min/minValueflag.
    
      - fieldStep : fs                 (int)           [create,query,edit]
          Increment for the field.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation the group will have static text. Returns a string on query.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          Sets the maximum value for both the slider and the field.
    
      - minValue : min                 (int)           [create,query,edit]
          Sets the minimum value for both the slider and the field.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - sliderStep : ss                (int)           [create,query,edit]
          On Linux the slider step value represents the amount the value will increase or decrease when you click either side of
          the slider.
    
      - step : s                       (int)           [create,query,edit]
          Increment for both the slider and field.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int)           [create,query,edit]
          Value of the group.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.intSliderGrp`
    """

    pass


def colorSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a color Slider group consisting of a label, a color canvas
    and a slider.  Clicking on the canvas will bring up the color editor dialog.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when slider value changes.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed when slider value marker is dragged.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - forceDragRefresh : fdr         (bool)          []
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (float, float, float) [create,query,edit]
          Color in hue, saturation, and value format.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rgbValue : rgb                 (float, float, float) [create,query,edit]
          Color in red, green, and blue format.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorSliderGrp`
    """

    pass


def runTimeCommand(*args, **kwargs):
    """
    Flags:
      - annotation : ann               (unicode)       []
    
      - category : cat                 (unicode)       []
    
      - categoryArray : caa            (bool)          []
    
      - command : c                    (callable)      []
    
      - commandArray : ca              (bool)          []
    
      - commandLanguage : cl           (unicode)       []
    
      - default : d                    (bool)          []
    
      - defaultCommandArray : dca      (bool)          []
    
      - delete : delete                (bool)          []
    
      - exists : ex                    (bool)          []
    
      - hotkeyCtx : hc                 (unicode)       []
    
      - numberOfCommands : nc          (bool)          []
    
      - numberOfDefaultCommands : ndc  (bool)          []
    
      - numberOfUserCommands : nuc     (bool)          []
    
      - save : s                       (bool)          []
    
      - showInHotkeyEditor : she       (bool)          []
    
      - userCommandArray : uca         (bool)          []
    
    
    Derived from mel command `maya.cmds.runTimeCommand`
    """

    pass


def floatFieldGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text and editable float
    fields.  The label text is optional and one to four float fields can be created.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when the value of any of the fields changes.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed when dragging the invisible slider in any of the fields.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enable1 : en1                  (bool)          [create,query,edit]
    
      - enable2 : en2                  (bool)          [create,query,edit]
    
      - enable3 : en3                  (bool)          [create,query,edit]
    
      - enable4 : en4                  (bool)          [create,query,edit]
          Enable state for the respective field.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text
          to the right of fields.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the
          label text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfFields : nf            (int)           [create]
          Set the number of fields on creation. One to four fields are available.  The default is one field.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,edit]
          Set the number of digits to the right of the decimal.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - showTrailingZeros : tze        (bool)          [create,edit]
          Show trailing zeros or not
    
      - step : s                       (float)         [create,query,edit]
          Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in LMB , delta in MMB,delta\*10.0 in RMB.
          Default is 10.0
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float, float, float, float) [create,query,edit]
          Values for all fields.
    
      - value1 : v1                    (float)         [create,query,edit]
    
      - value2 : v2                    (float)         [create,query,edit]
    
      - value3 : v3                    (float)         [create,query,edit]
    
      - value4 : v4                    (float)         [create,query,edit]
          Value for the respective field.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatFieldGrp`
    """

    pass


def layerButton(*args, **kwargs):
    """
    Creates a layer bar button widget.  This widget contains both the name of the layer to which it refers and a color
    swatch indicating it's color assignment.  It is used primarily in the construction of the layerBar and layer Editor
    window, being the widget used for each layer in the respective lists.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (callable)      []
    
      - color : cl                     (float, float, float) [create,edit]
          Layer color, specified with normalized real numbers in R, G, B space.
    
      - command : c                    (script)        [create,edit]
          Set the command to call on a single click.
    
      - current : cr                   (bool)          [create,edit]
          Set this button to display as the current layer.  The current layer is the one which the user has the option of adding
          all newly created objects into.  NB: Setting the layer button to this state has no effect on the actual current layer.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Set the command to call on a double click.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - hideOnPlaybackCommand : hpc    (script)        [create,edit]
          Command that is called when the hide on playback indicator of the layer button is pressed.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - identification : id            (int)           [create,query,edit]
          This is the integer identification number associated with the layer.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the button.
    
      - labelWidth : lw                (bool)          [query]
          Query the width of the label part so as to determine if button clicks are in the label part or the colour swatch part.
    
      - layerHideOnPlayback : hp       (bool)          [create,query,edit]
          Indicates whether the layer is visible or invisible during the playback.
    
      - layerState : ls                (unicode)       [create,query,edit]
          Describes the state of the layer.  This may be one of normal, template, or reference.
    
      - layerVisible : lv              (bool)          [create,query,edit]
          Indicates whether the layer is visible or invisible.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - name : n                       (unicode)       [create,query]
          Name of the layer.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - renameCommand : rc             (unicode)       [create,edit]
          Set the command to call when the layer gets renamed. The string '#1' will be substituted with the control's name and
          '#2' will be replaced with the layer's new name.
    
      - select : s                     (bool)          [create,query,edit]
          Set this button to display as a selected layer.
    
      - transparent : t                (bool)          [create,query,edit]
          Indicate whether the layer color is visible or transparent.
    
      - typeCommand : tc               (script)        [create,edit]
          Command that is called when the type indicator of the layer button is pressed.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - visibleCommand : vc            (script)        [create,edit]
          Command that is called when the visibility indicator of the layer button is pressed.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.layerButton`
    """

    pass


def loadUI(*args, **kwargs):
    """
    loadUI command allows loading of a user interface created in Trolltech Qt Designer. Some Qt classes have equivalents in
    Maya.  If a widget's class is recognized, the Maya-equivelent will be created instead. Any dynamic properties on a
    widget which start with a '-' character will be treated as a MEL flag/value pair.  Similarly, any which start with a '+'
    will be treated as a Python flag/value pair.  Such pairs will be applied to the widget upon creation.
    
    Flags:
      - listTypes : lt                 (bool)          [create]
          Returns the list of recognized UI types and their associated Maya command.
    
      - uiFile : f                     (unicode)       [create]
          Full path to a user interface file to load.
    
      - uiString : s                   (unicode)       [create]
          Load UI from a formated string.
    
      - verbose : v                    (bool)          [create]
          Extra information about created controls will be printed.
    
      - workingDirectory : wd          (unicode)       [create]
          Sets the working directory, the loader looks for resources such as icons and resouce files in paths relative to this
          directory.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.loadUI`
    """

    pass


def annotate(*args, **kwargs):
    """
    This command is used to create an annotation to be attached to the specified objects at the specified point.
    
    Modifications:
      - <lambda>(result)
    
    Flags:
      - point : p                      (float, float, float) [create]
          Specifies the point about which the annotation text is to be centered.
    
      - text : tx                      (unicode)       [create]
          Specifies the annotation text.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.annotate`
    """

    pass


def floatSlider(*args, **kwargs):
    """
    Create a slider control that accepts only float values and is bound by a minimum and maximum value.  The slider displays
    a marker indicating the current value of the slider relative to it's minimum and maximum values.  Click and drag the
    marker or on the slider itself to change the current value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the slider's value marker.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontal : hr                (bool)          [create,query]
          Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Upper limit of the slider.
    
      - minValue : min                 (float)         [create,query,edit]
          Lower limit of the slider.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - step : s                       (float)         [create,query,edit]
          The step value represents the amount the value will increase or decrease when you click either side of the slider.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float)         [create,query,edit]
          Value of the slider.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatSlider`
    """

    pass


def canvas(*args, **kwargs):
    """
    Creates a control capable of displaying a color swatch. This control can also accept a command to be called when the
    colour swatch is pressed by the user. Note: The -dgc/dragCallback and -dpc/dropCallback are not available for this
    control.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (float, float, float) [create,query,edit]
          Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0
          to 360.0 and the saturation and value components range from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - pressCommand : pc              (script)        [create,edit]
          Command to be executed when there is a mouse press.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rgbValue : rgb                 (float, float, float) [create,query,edit]
          Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.canvas`
    """

    pass


def scriptEditorInfo(*args, **kwargs):
    """
    Use this command to directly manipulate and query the contents of the Command Window window. Note: Due to recent
    changes, certain flags will no longer work on the Script Editor Window.  All flags will continue to work with the
    CommandWindow (old Script Editor).Note: This command cannot be used to create a new script editor window.
    
    Flags:
      - clearHistory : ch              (bool)          [edit]
          Clears the read-only text in the upper field of the Command Window.
    
      - clearHistoryFile : chf         (bool)          [edit]
          Clear the file defined by the -hf/historyFilename flag, but only if -wh/writeHistory is true. Use this flag to start a
          new history file, since the default behaviour of the Command Window is to append to the existing file.
    
      - historyFilename : hfn          (unicode)       [query,edit]
          Sets or returns the name of the file that the Command Window will use to echo all of its history to. If this is an empty
          string when the -wh/writeHistory flag is set to true, then it will automatically be set to the default file.
    
      - input : i                      (unicode)       [edit]
          Sets the text in the lower field of the Command Window. Set this value to an empty string to clear the field.  Note:
          this flag only affects the Command Window and not the new script editor. To find out how to manipulate the new script
          editor please refer to the documentation on the cmdScrollFieldExecuter and cmdScrollFieldReporter.
    
      - suppressErrors : se            (bool)          [query,edit]
          When true, Command Window and Script Editor will not display error messages.
    
      - suppressInfo : si              (bool)          [query,edit]
          When true, Command Window and Script Editor will not display info messages generated by Maya.
    
      - suppressResults : sr           (bool)          [query,edit]
          When true, Command Window and Script Editor will not display command results.
    
      - suppressStackWindow : ssw      (bool)          [query,edit]
          When true and when the stackTrace mechanism is on, this flag will suppress the display of the stack window. If stack
          trace is enabled then results will be returned to the output window instead of a separate stack window.
    
      - suppressWarnings : sw          (bool)          [query,edit]
          When true, Command Window and Script Editor will not display warning messages.
    
      - writeHistory : wh              (bool)          [query,edit]
          When true, Command Window will echo all of its history to the file defined by the -hf/historyFilename flag. This flag
          effectively turns file writing on/off.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.scriptEditorInfo`
    """

    pass


def spreadSheetEditor(*args, **kwargs):
    """
    This command creates a new spread sheet editor in the current layout.
    
    Flags:
      - allAttr : aa                   (bool)          [query]
          Returns a list of all the attribute names currently being displayed.  This flag is ignored when not being queried.
    
      - attrRegExp : are               (unicode)       [create,query,edit]
          Filter the current displayed attribute names. This expression matches the case-insensitive substring of attribute names.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - execute : exe                  (unicode)       [edit]
          Immediately executes the command string once for every selected cell in the spreadSheet.  Before the command is
          executed, #Ais substituted with the name of the cell's attribute, #Nis substituted with the name of the cell's node, and
          #Pis substituted with the full path name of the node.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - fixedAttrList : fal            (<type 'unicode'>, ...) [create,query,edit]
          Forces the editor to only display attributes with the specified names.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - keyableOnly : ko               (bool)          [create,query,edit]
          Limits the displayed attributes to be those that are keyable. True by default
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - longNames : ln                 (bool)          [create,query,edit]
          Controls whether the attributes are displayed using their long names or their short names.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - niceNames : nn                 (bool)          [create,query,edit]
          Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the
          longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the
          longNames flag. Default is on. Queried, returns a boolean.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - precision : pre                (int)           [create,query,edit]
          Specifies the maximum number of digits displayed to the right of the decimal place.  Can be 0 to 20.
    
      - selectedAttr : sla             (bool)          [query]
          Returns a list of all the attribute names that are selected.  This flag is ignored when not being queried.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - showShapes : ss                (bool)          [create,query,edit]
          If true, when transforms are selected their shapes will be displayed instead.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.spreadSheetEditor`
    """

    pass


def editor(*args, **kwargs):
    """
    Edit the characteristic of an editor
    
    Flags:
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editor`
    """

    pass


def attrEnumOptionMenuGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label and option menu button
    associated with an attribute of a node. The attribute should be an integer, and this control allows a UI association of
    strings to the integers of the attribute. When a new menu item is choosen the corresponding integer will be assigned to
    the attribute. This control will automatically read the enumeration values from the attribute if none are provided.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attribute : at                 (PyNode)        [create,edit]
          The name of an attribute.  The button will be attached to the attribute so the button can be kept in synch with the
          attribute.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enumeratedItem : ei            (int, unicode)  [create]
          Enumerated item and the corresponding string. If this flag is not supplied when the control is created, then the command
          will try to read the values from the attribute.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Text for the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
    """

    pass


def attrFieldGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text, plus two to four
    float fields.  These fields will be attached to the specified vector attribute, so that changes in either will be
    reflected in the other. The fields created here are expression fields -- while normally operating as a float field, the
    user can type in any expression starting with the character -. The field also has an automatic menu brought up by the
    right mouse button.  The contents of this menu change depending on the state of the attribute being watched by the
    field.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attribute : at                 (unicode)       [create,query,edit]
          The name of a unique attribute of type vector.  This newly created field will be attached to the attribute, so that
          modifications to one will change the other.  A vectorattribute is any compound attribute whose children consist of two
          to four double-valued attributes.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          The command string is executed when the value of any of the floatFields change.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraButton : eb               (bool)          [create]
          Add an extra icon button to the end of this control (before extra label).
    
      - extraButtonCommand : ebc       (script)        [create,edit]
          The command string is executed when the extra button is clicked.
    
      - extraButtonIcon : ebi          (unicode)       [create,query,edit]
          The icon file name of the extra button.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          set an optional string that will be positioned to the right of all the fields.
    
      - forceAddMapButton : fmb        (bool)          [create]
          Force adding a map button to this control. If this option is true, option hideMapButton is suppressed.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - hideMapButton : hmb            (bool)          [create]
          Force the map button to remain hidden for this control.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with
          whatever the user wants.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Sets the maximum value for all fields.
    
      - minValue : min                 (float)         [create,query,edit]
          Sets the minimum value for all fields.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfFields : nf            (int)           [create]
          sets the number of fields.  Only allowed values are 2 to 4.  If not specified, defaults to 3.  NOTE: if the -at flag is
          used when this widget is created, the number of children in the attribute will determine the number of fields.  Also
          note:  after creation, the number of fields cannot be changed with the -e flag.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [create,edit]
          Sets the precision for all fields
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - step : s                       (float)         [create,query,edit]
          Sets the increment for all fields
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrFieldGrp`
    """

    pass


def scriptedPanel(*args, **kwargs):
    """
    This command will create an instance of the specified scriptedPanelType. A panel is a collection of UI objects (buttons,
    fields, graphical views) that are grouped together. A panel can be moved around as a group within the application
    interface, and torn off to exist in its own window. The panel takes care of maintaining the state of its UI when it is
    relocated, or recreated. A scripted panel is a panel that is defined in MEL, with all of the required callbacks
    available as MEL proc's.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - type : typ                     (unicode)       [create,query]
          This flag specifies the type of scripted panel to create.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scriptedPanel`
    """

    pass


def menuEditor(*args, **kwargs):
    """
    A menuEditor displays the contents of a popup menu and allows the menu's items to be edited. Menu items are represented
    by labelled icons which can be dragged around within the editor to change the menu's layout.  Various objects can be
    dragged and dropped into the menuEditor to create new menu items: toolButtons from the shelf or toolbox, shelfButtons
    from the shelf, iconTextButtons with attached commands, and scripts from the command window. When editing a Marking
    Menu, the radial menu items correspond to 8 icons arranged in a circle within the menuEditor.  Overflow items in the
    Marking Menu (or linear items in a normal menu) are displayed in a column below the radial items. To edit a submenu of a
    popup menu, a new menuEditor instance must be created (typically within its own window) and attached to its parent
    menuEditor. Some flags require the position of a menu item to be passed in as an argument.  For these, positions are
    specified with a (string,int) pair, where the string corresponds to a radial position (possibily None) and the int
    corresponds to a linear position (possibly equal to 0 for none).  Radial positions are specified by one of (N,0),
    (NE,0), (E,0), (SE,0), (S,0), (SW,0), (W,0) or (NW,0).  Overflow, or linear positions, are specified with (None,i),
    where i is a 1-based index giving the position of the item within the overflow column.Note:This command is not meant to
    be called explicitly. It was created to support the Marking Menu editor. It is recommended that you use that editor to
    modify marking menus.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - cellHeight : ch                (int)           [query,edit]
          The height of the icons in the menuEditor.
    
      - cellWidth : cw                 (int)           [query,edit]
          The width of the icons in the menuEditor.
    
      - cellWidthHeight : cwh          (int, int)      [edit]
          The width and height of the icons in the menuEditor.
    
      - checkBoxPresent : cbp          (bool, unicode, int) [query,edit]
          This controls whether a menu item has a check box or not. The arguments are a flag indicating presence, followed by the
          position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is
          returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ...
          NW), and all later entries correspond to overflow (or linear) menu items.
    
      - checkBoxState : cbs            (bool, unicode, int) [query,edit]
          The state of the check box associated with a menu item. The arguments are a flag indicating state, followed by the
          position of the menu item. This flag is ignored if the menu item does not have a check box. If queried, an array of
          booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N,
          NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - command : c                    (unicode, unicode, int) [query,edit]
          The command or script executed by a menu item. The arguments are the command string or script name, followed by the
          position of the menu item. This flag is ignored if the menu item is a submenu item or a separator item. If queried, an
          array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items
          (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - delete : d                     (unicode, int)  [edit]
          Deletes the menu item at the given position, removing it from the menu.  If the menu item has a submenu, and a sub-
          menuEditor is open and attached to it, then the sub-menuEditor's window and all its child menuEditor windows will be
          closed recursively.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - iconMenuCallback : imc         (unicode)       [create]
          This is the name of a MEL callback procedure that is called to create the popup menus attached to icons in the
          menuEditor.  The callback is called once for each newly created icon, and once each time an icon is moved within the
          menuEditor.  Popup menus created by the callback should contain commands for editing the menu item associated with the
          icon.  Operations accessible through the menu should include deletion of the item, editing of the item's
          label/command/image/checkbox/optionbox, creation of a submenu, and popping up a sub-menuEditor. The arguments to the
          callback must match this form: callbackProc(string $menuEditorName, string $parentIconName, string $menuTitle, string
          $radialPosition, int $overflowRow); The popup menu's parent should be $parentIconName. Note that when a sub-menuEditor
          is created, this flag need not be re-specified as it adopts a default value equal to the value of its parent
          menuEditor's -imc/iconMenuCallback flag.
    
      - image : i                      (unicode, unicode, int) [query,edit]
          The filename of the icon associated with a menu item. This icon is displayed by the menuEditor to represent the menu
          item. The arguments are the icon filename, followed by the position of the menu item. If queried, an array of strings is
          returned containing all the icon filenames. The first 8 entries of the array correspond to radial items (in order, N,
          NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode, unicode, int) [query,edit]
          The label of a menu item. The arguments are the label text, followed by the position of the menu item. If queried, an
          array of strings is returned containing all the labels. The first 8 entries of the array correspond to radial items (in
          order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - menuItemTypes : mit            (bool)          [query]
          This is a query only flag.  Returns an array of strings indicating the type of contents in each cell of the menuEditor.
          Cells can be vacant, or may contain a regular menu item, or a separator, or a submenuitem.  In each case, the
          corresponding string is returned. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW),
          and all later entries correspond to overflow (or linear) menu items.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - optionBoxCommand : obc         (unicode, unicode, int) [query,edit]
          The command or script executed by a menu item's associated option box item. The arguments are the command string or
          script name, followed by the position of the menu item. This flag is ignored if the menu item does not have an
          associated option box item. If queried, an array of strings is returned containing all the commands. The first 8 entries
          of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or
          linear) menu items.
    
      - optionBoxPresent : obp         (bool, unicode, int) [query,edit]
          This controls whether a menu item has an associated option box item or not. The arguments are a flag indicating
          presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If
          queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to
          radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - radioButtonPresent : rbp       (bool, unicode, int) [query,edit]
          This controls whether a menu item has a radio button or not. The arguments are a flag indicating presence, followed by
          the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans
          is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ...
          NW), and all later entries correspond to overflow (or linear) menu items.
    
      - radioButtonState : rbs         (bool, unicode, int) [query,edit]
          The state of the radio button associated with a menu item. The arguments are a flag indicating state, followed by the
          position of the menu item. This flag is ignored if the menu item does not have a radio button. If queried, an array of
          booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N,
          NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - separator : sp                 (unicode, int)  [query,edit]
          In edit mode this adds a separator to the menuEditor at the specified position. The parameters are the radialPosition
          and the overflowRow. If queried, an array of booleans is returned indicating if the item is a separator item. The first
          8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to
          overflow (or linear) menu items.
    
      - style : st                     (unicode)       [query,edit]
          This is the style of icons within the menuEditor. Valid styles are iconOnly, textOnly, iconAndTextHorizontaland
          iconAndTextVertical.
    
      - subMenuAt : sma                (unicode, int)  [edit]
          Creates a submenu item at the given position.  A submenu item created within the radial portion of a menu will overwrite
          whatever item (if any) is currently at the given position. A submenu item created within the overflow (linear) portion
          of a menu will be inserted before the item currently at the given position.
    
      - subMenuEditorWindow : sew      (unicode)       [create]
          The name of the window which contains a sub-menuEditor.  Only use when creatitg a sub-menuEditor. This window will
          automatically be closed if a parent menuEditor is closed or if a parent menu item is deleted.
    
      - subMenuEditorsOpen : seo       (bool)          [query]
          This is a query only flag.  Returns an array of booleans, each of which indicates if a sub-menuEditor is open and
          attached to the menu item in a particular cell.  One boolean is returned for each cell in the menuEditor, even if the
          cell is vacant or contains a non-submenu item (false will be returned in both these cases).  Only when a cell contains a
          submenu item can true possibily be returned. The first 8 entries of the array correspond to radial items (in order, N,
          NE, ... NW), and all later entries correspond to overflow (or linear) menu items.
    
      - subMenuOf : smo                (unicode, unicode, int) [create]
          Attaches a sub-menuEditor to its parent menuEditor.  Only use when creatitg a sub-menuEditor. The arguments are the name
          of the parent menuEditor, followed by the position of a submenu item within the parent. A submenu item must already
          exist within the parent at the given position. A submenu item cannot have multiple sub-menuEditors attached to it.
    
      - topLevelMenu : tlm             (unicode)       [query,edit]
          The popup menu to attach to the editor.  All editing operations performed in the editor (i.e. inserting/deleting/moving
          an item) will be immediately reflected in this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor
          will update gracefully if the value of the flag is changed from its initial value.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuEditor`
    """

    pass


def savePrefObjects(*args, **kwargs):
    """
    This command saves preference dependency nodes to userPrefObjects.main the user preference directory.
    
    
    Derived from mel command `maya.cmds.savePrefObjects`
    """

    pass


def dimWhen(*args, **kwargs):
    """
    This method attaches the named UI object (first argument) to the named condition (second argument) so that the object
    will be dimmed when the condition is in a particular state. This command will fail if the object does not exist. If the
    condition does not exist (yet), that's okay --- a placeholder will be used until such a condition comes into existence.
    The UI object should be one of two things, either a control or a menu item.
    
    Flags:
      - clear : c                      (bool)          [create]
          Remove the condition on the specified dimmable.
    
      - false : f                      (bool)          [create]
          Dim the object when the condition is false.
    
      - true : t                       (bool)          [create]
          Dim the object when the condition is true. (default)                  Flag can have multiple arguments, passed either as
          a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dimWhen`
    """

    pass


def floatSlider2(*args, **kwargs):
    """
    This command creates a float slider containing two handles. The two handles are arranged such that they cannot pass one
    another, thus handle 1 will always have a value less than or or equal to handle 2 when you adjust the values. Each
    handle may have a MEL command associated with it which is issued when the handle moves and thus can be used to update
    the values of plugs such as via a setAttr command. Each handle can also be associated with a float textfield to display
    the current value of the handle. Note: the floatSlider2 widget currently only supports vertical (columnLayout)
    orientation.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand1 : cc1           (unicode)       [create,edit]
          Command to be associated with handle 1 and issued whenever the value of the handle is changed (except when values are
          changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 1 were to move
          to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.
    
      - changeCommand2 : cc2           (unicode)       [create,edit]
          Command to be associated with handle 2 and issued whenever the value of the handle is changed (except when values are
          changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 2 were to move
          to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maximum : max                  (float)         [create,query,edit]
          Maximum limit of the slider. The default value is 10.0. The maximum value occurs at the top(right) end of the slider
          unless -polarity was specified. Note: you cannot set the maximum value greater than or equal to the current minimum.
    
      - minimum : min                  (float)         [create,query,edit]
          Minimum limit of the slider. The default value is 0.0. The minimum value occurs at the bottom end of the slider unless
          -polarity was specified. Note: you cannot set the minimum value greater than or equal to the current maximum.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - polarity : pol                 (int)           [create,query,edit]
          Specifies the polarity of the slider. If 0 (the default), the minimum value (specified by the -minimum flag) occurs at
          the bottom end of the slider and maximum at the top(right), with values increasing as the slider handles are moved
          towards the upper end of the slider. If the polarity is specified as 1, the reverse behaviour occurs, with the maximum
          occurring at the bottom end, the mimimum occuring at the top(right) end and values decreasing as the handles are moved
          towards the upper end.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - positionControl1 : pc1         (unicode)       [create,edit]
          Set the name of the control (if any) which is associated with handle 1 of this slider. The control must be a floatField.
          The control always displays the value of the handle, and is updated as the handle moves.
    
      - positionControl2 : pc2         (unicode)       [create,edit]
          Set the name of the control (if any) which is associated with handle 2 of this slider. The control must be a floatField.
          The control always displays the value of the handle, and is updated as the handle moves.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value1 : v1                    (float)         [create,query,edit]
          Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error will occur if the value specified is too
          large. If you wish to set both handles simultaneously, use the -values flag.
    
      - value2 : v2                    (float)         [create,query,edit]
          Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error will occur if the value specified is too
          large. If you wish to set both handles simultaneously, use the -values flag.
    
      - values : vs                    (float, float)  [create,edit]
          Sets the value for handles 1 and 2 simulteneously. The first argument is applied to handle 1 and must be less than or
          equal to the second (handle 2) argument or an error will be issued.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatSlider2`
    """

    pass


def radioMenuItemCollection(*args, **kwargs):
    """
    This command creates a radioMenuItemCollection.  Attach radio menu items to radio menu item collection objects to get
    radio button behaviour.  Radio menu item collections will be parented to the current menu if no parent is specified with
    the -p/parentflag. As children of the menu they will be deleted when the menu is deleted. Collections may also span more
    than one menu if the -g/globalflag is used. In this case the collection has no parent menu and must be explicitly
    deleted with the deleteUIcommand when it is no longer wanted.
    
    Flags:
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - gl : gl                        (bool)          [create,query]
          Set the collection to have no parent menu.  Global collections must be explicitly deleted.
    
      - parent : p                     (unicode)       [create]
          The parent of the collection.  The collection will be deleted along with the parent.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.radioMenuItemCollection`
    """

    pass


def text(*args, **kwargs):
    """
    Create a simple text label control.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if
          the control is wider than the label length. By default, the label is aligned center.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - dropRectCallback : drc         (script)        [edit]
          Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of
          the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the
          callback is of the form: global proc int[] callbackName(string $dropControl, int $x, int $y) The return value is an
          array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn,
          followed by the width and height. This functionality is currently only implemented in MEL.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hyperlink : hl                 (bool)          [create,query,edit]
          Sets the label text to be a hyperlink if the argument is true.  The label text must be a proper HTML link. In MEL,
          double quotes in the link will most likely have to be protected from the MEL interpreter by preceding them with a
          backslash.  Clicking on the link will open it in an external Web browser.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.  The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - recomputeSize : rs             (bool)          [create,query,edit]
          If true then the control will recompute it's size to just fit the size of the label.  If false then the control size
          will remain fixed as you change the size of the label.  The default value of this flag is true.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - wordWrap : ww                  (bool)          [create,query]
          If true then label text is wrapped where necessary at word-breaks. If false, it is not wrapped at all. The default value
          of this flag is false.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.text`
    """

    pass


def panelConfiguration(*args, **kwargs):
    """
    This command creates a panel configuration object. Typically you would not call this method command directly. Instead
    use the Panel Editor. Once a panel configuration is created you can make it appear in the main Maya window by selecting
    it from any panel's Panels-Saved Layoutsmenu.
    
    Flags:
      - addPanel : ap                  (bool, unicode, unicode, unicode, unicode) [create,edit]
          Adds the specified panel to the configuration.  Arguments are: isFixed, label string, type string, create string, edit
          string.
    
      - configString : cfs             (unicode)       [create,query,edit]
          Specifies the string that arranges the panels.
    
      - createStrings : cs             (bool)          [query]
          Returns an string array of the panel creation strings.
    
      - defaultImage : di              (unicode)       [create,query]
          The default image for this configuration. Once the default image is set it may not be changed. If an image is set with
          the -i/imageflag then it's value will take precedence.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - editStrings : es               (bool)          [query]
          Returns an string array of the panel edit strings.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - image : i                      (unicode)       [create,query,edit]
          The user specified image for this configuration. Use this flag to override the default image.
    
      - isFixedState : isFixedState    (bool)          [query]
          Returns an integer array of whether the panels have fixed states or not.
    
      - label : l                      (unicode)       [create,query,edit]
          Configuration label.
    
      - labelStrings : ls              (bool)          [query]
          Returns an string array of the panel labels.
    
      - numberOfPanels : np            (bool)          [query]
          Returns the number of panels in the configuration.
    
      - removeAllPanels : rap          (bool)          [edit]
          Removes the last panel in the config.
    
      - removeLastPanel : rlp          (bool)          [edit]
          Removes the last panel in the config.
    
      - replaceCreateString : rcs      (int, unicode)  [edit]
          Replaces the specified create string.  The index is 1 based.
    
      - replaceEditString : res        (int, unicode)  [edit]
          Replaces the specified edit string.  The index is 1 based.
    
      - replaceFixedState : rfs        (int, bool)     [edit]
          Replaces the specified fixed state value (true|false).  The index is 1 based.
    
      - replaceLabel : rl              (int, unicode)  [edit]
          Replaces the specified label.  The index is 1 based.
    
      - replacePanel : rp              (int, bool, unicode, unicode, unicode, unicode) [create,edit]
          Replaces the specified panel in the configuration.  Arguments are: index, isFixed, label string, type string, create
          string, edit string. The index is 1 based.
    
      - replaceTypeString : rts        (int, unicode)  [edit]
          Replaces the specified type string.  The index is 1 based.
    
      - sceneConfig : sc               (bool)          [create,query,edit]
          Specifies whether the configuration is associated with the scene. Scene configurations are created when the scene is
          opened and deleted when the scene is closed.
    
      - typeStrings : ts               (bool)          [query]
          Returns an string array of the panel types.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
      - userCreated : uc               (bool)          []
    
    
    Derived from mel command `maya.cmds.panelConfiguration`
    """

    pass


def rowColumnLayout(*args, **kwargs):
    """
    This command creates a rowColumn layout. A rowColumn layout positions children in either a row or column format. A
    column layout, specified with the -nc/numberOfColumnsflag, allows you set text alignment, attachments and offsets for
    each column in the layout. Every member of a column will have the same alignment, attachment and offsets.  Likewise the
    row format, specified by the -nr/numberOfRowsflag, allows setting of these attributes for each row in the layout. Every
    member of a row will have the same attributes. The layout must be either a row or column format. This layout does not
    support both, or the specification of attributes on an individual child basis. Some flags only make sense for one of
    either the row format or the column format.  For example the -rh/rowHeightflag can only be specified in row format. In
    column format the row height is determined by the tallest child in the row, plus offsets.
    
    Flags:
      - adjustableColumn : adj         (int)           []
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Alignment for text and pixmaps in the specified column.  Values are: left, rightand center.  Only valid for column
          format, ie. number of columns specified with -nc/numberOfColumnsflag.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          The attachements and offsets for the children in the specified column.  The first argument is the 1-based column index.
          The second argument is the attachment, valid values are left, rightand both.  The third argument must be greater than 0
          and specifies the offset.
    
      - columnOffset : co              (int, unicode, int) [create,edit]
          The attachment offset for the specified column.  The first argument is the 1-based column index.  The second argument is
          the attachment, valid values are left, rightand both.  The third argument must be greater than 0 and specifies the
          offset.
    
      - columnSpacing : cs             (int, int)      [create,edit]
          The space between columns in pixels.  In column format this flag specifies that the space be to the left of the given
          column.  In row format it specifies the space between all columns, however a valid column index is still required.  The
          first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the spacing.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Width of a column. This flag is valid only in column format.  The column width must be greater than 0.  The first
          argument is the 1-based column index.  The second argument must be greater than 0 and specifies the column width.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfColumns : nc           (int)           [create,query]
          Number of columns. This flag is mutually exclusive to the -nr/numRowsflag.  Either one or the other can be specified.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfRows : nr              (int)           [create,query]
          Number of rows. This flag is mutually exclusive to the -nc/numColumnsflag. Either one or the other can be specified.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAlign : ral                 (int, unicode)  [create,edit]
          Alignment for text and pixmaps in the specified row. Values are: left, rightand center.  Only valid for row format, ie.
          number of rows specified with -nr/numberOfRowsflag.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          The attachements and offsets for the children in the specified row.  The first argument is the 1-based row index.  The
          second argument is the attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and
          specifies the offset.
    
      - rowHeight : rh                 (int, int)      [create,edit]
          Height of a row. This flag is only valid in row format. The row height must be greater than 0. The first argument is the
          1-based row index.  The second argument must be greater than 0 and specifies the row height.
    
      - rowOffset : ro                 (int, unicode, int) [create,edit]
          The attachment offset for the specified row.  The first argument is the 1-based row index.  The second argument is the
          attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and specifies the offset.
    
      - rowSpacing : rs                (int, int)      [create,edit]
          The space between rows, in pixels.  In row format this specifies the space above the specified row.  In column format it
          specifies the space between all rows, however a valid row index is still required.  The first argument is the 1-based
          row index.  The second argument must be greater than 0 and specifies the spacing.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.rowColumnLayout`
    """

    pass


def clipEditor(*args, **kwargs):
    """
    Create a clip editor with the given name.
    
    Flags:
      - allTrackHeights : th           (int)           []
          OBSOLETE flag. Use clipStyle instead.
    
      - autoFit : af                   (unicode)       [query,edit]
          on | off | tgl Auto fit-to-view.
    
      - characterOutline : co          (unicode)       []
    
      - clipDropCmd : cd               (unicode)       [edit]
          Command executed when clip node is dropped on the TraX editor
    
      - clipStyle : cs                 (int)           [query,edit]
          Set/return the clip track style in the specified editor. Default is 2. Valid values are 1-3.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteCmd : dc                 (unicode)       [edit]
          Command executed when backspacekey is pressed
    
      - deselectAll : da               (bool)          [edit]
          Deselect all clips and blends in the editor.
    
      - displayActiveKeyTangents : dat (unicode)       [edit]
          on | off | tgl Display active key tangents in the editor.
    
      - displayActiveKeys : dak        (unicode)       [edit]
          on | off | tgl Display active keys in the editor.
    
      - displayInfinities : di         (unicode)       [edit]
          on | off | tgl Display infinities in the editor.
    
      - displayKeys : dk               (unicode)       [edit]
          on | off | tgl Display keyframes in the editor.
    
      - displayTangents : dtn          (unicode)       [edit]
          on | off | tgl Display tangents in the editor.
    
      - displayValues : dv             (unicode)       [edit]
          on | off | tgl Display active keys and tangents values in the editor.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - frameAll : fa                  (bool)          [edit]
          Frame view around all clips in the editor.
    
      - frameRange : fr                (float, float)  [query,edit]
          The editor's current frame range.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - highlightedBlend : hb          (unicode, unicode) [query]
          Returns the highlighted blend, listed as scheduler and index
    
      - highlightedClip : hc           (unicode, unicode) [query]
          Returns the highlighted clip, listed as scheduler and index
    
      - initialized : it               (bool)          [query]
          Returns whether the clip editor is fully initialized, and has a port to draw through. If not, the -frameRange and
          -frameAll flags will fail.
    
      - listAllCharacters : lac        (bool)          [edit]
          List all characters in the editor and outliner.
    
      - listCurrentCharacters : lc     (bool)          [edit]
          List only the characters in the editor and outliner.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - lookAt : la                    (unicode)       [edit]
          all | selected | currentTime FitView helpers.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - manageSequencer : ms           (bool)          [create,query,edit]
          Sets/returns whether the clip editor should manage sequencer nodes.  If so, animation clips and characters are not
          represented.
    
      - menuContext : mc               (unicode)       [query]
          Returns a string array denoting the type of data object the cursor is over.  Returned values are: timeSlider nothing
          track, track index, character node name, group name clip, clip node name
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - selectBlend : sb               (unicode, unicode, unicode) [query,edit]
          Select the blends specified by the scheduler name and the indicies of the two clips used in the blend. When queried, a
          string containing the scheduler name and the two clip indicies for all of the selected blends is returned.
    
      - selectClip : sc                (unicode, unicode) [query,edit]
          Selects the clip specified by the scheduler name and the clip index. When queried, a string containing the scheduler and
          clip index of all of the selected clips is returned.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - snapTime : st                  (unicode)       [query,edit]
          none | integer | keyframe Keyframe move snap in time.
    
      - snapValue : sv                 (unicode)       [query,edit]
          none | integer | keyframe Keyframe move snap in values.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipEditor`
    """

    pass


def checkBox(*args, **kwargs):
    """
    This command creates a check box.  A check box is a simple control containing a text label and a state of either on or
    off.  Commands can be attached to any or all of the following events:  when the check box is turned on, turned off, or
    simply when it's state is changed.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          This flag is obsolete and should no longer be used. The check box label will always be left-aligned.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,query,edit]
          Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside
          the callback, or use onCommand and offCommand as separate callbacks.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the check box.  By default, this flag is set to true and the check box value may be changed by
          clicking on it.  If false then the check box is 'read only' and can not be clicked on. The value of the check box can
          always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text. The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,query,edit]
          Command executed when the check box is turned off.
    
      - onCommand : onc                (script)        [create,query,edit]
          Command executed when the check box is turned on.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - recomputeSize : rs             (bool)          [create,query,edit]
          If true then the control will recompute it's size to just fit the size of the label.  If false then the control size
          will remain fixed as you change the size of the label.  The default value of this flag is true.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (bool)          [create,query,edit]
          State of the check box.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.checkBox`
    """

    pass


def textFieldGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text and editable text
    field.  The label text is optional.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the field text changes and user presses Enter or Return.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the
          -tx/textflag regardless of the state of the -ed/editableflag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fileName : fi                  (unicode)       [create,query,edit]
          Text in the field as a filename. This does conversions between internal and external (UI) file representation.
    
      - forceChangeCommand : fcc       (bool)          [create,edit]
          If used together with -text or -inserText flag, change command will be executed after text modification.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - insertText : it                (unicode)       [create,edit]
          Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
    
      - insertionPosition : ip         (int)           [create,query,edit]
          The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the
          field.  Position 0 may be used to specify the end of the field.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - placeholderText : pht          (unicode)       [create,query,edit]
          Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and
          the widget doesn't have focus. By default, this property contains an empty string.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - text : tx                      (unicode)       [create,query,edit]
          Text in the field.
    
      - textChangedCommand : tcc       (script)        [create,edit]
          Command executed immediately when the field text changes.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textFieldGrp`
    """

    pass


def modelEditor(*args, **kwargs):
    """
    Create, edit or query a model editor. Note that some of the flags of this command may have different settings for normal
    mode and for interactive/playback mode.  For example, a modelEditor can be set to use shaded mode normally, but to use
    wireframe during playback for greater speed.  Some flags also support having defaults set so that new model editors will
    be created with those settings.
    
    Modifications:
      - returns a PyNode object for flags: (query and camera)
    
    Flags:
      - activeComponentsXray : acx     (bool)          [query,edit]
          Turns on or off Xray mode for active components.
    
      - activeCustomEnvironment : ace  (unicode)       [edit]
          Specifies a path to an image file to be used as environment map. It is only enabled when a valid scene render filter is
          specified.
    
      - activeCustomGeometry : acg     (unicode)       [query,edit]
          Specifies an identifier for custom geometry to override the geometry to display. It is only enabled when a valid scene
          render filter is specified.
    
      - activeCustomLighSet : acl      (unicode)       [query,edit]
          Specifies an identifier for the light set to use with a scene render filter. It is only enabled when a valid scene
          render filter is specified.
    
      - activeCustomOverrideGeometry : aog (unicode)       [query,edit]
          Specifies an identifier for an override on the custom geometry for a scene render filter.
    
      - activeCustomRenderer : acr     (unicode)       [query,edit]
          Specifies an identifier for custom renderer to use when a valid scene render filter is also specified.
    
      - activeOnly : ao                (bool)          [query,edit]
          Sets whether only active objects should appear shaded in shaded display.
    
      - activeShadingGraph : asg       (unicode)       [query,edit]
          Specifies the shading graph to use to override material display. Only enabled when a valid scene render filter is
          specified.
    
      - activeView : av                (bool)          [query,edit]
          Sets this model editor to be the active view.  Returns true if successful.  On query this flag will return whether the
          view is the active view.
    
      - addObjects : aob               (unicode)       [edit]
          This flag causes the objects contained within the selection connection to be added to the list of objects visible in the
          view (if viewSelected is true).
    
      - addSelected : addSelected      (bool)          [edit]
          This flag causes the currently active objects to be added to the list of objects visible in the view (if viewSelected is
          true).
    
      - addSelectedObjects : aso       (bool)          []
    
      - allObjects : alo               (bool)          [query,edit]
          Turn on/off the display of all objects for the view of the model editor. This excludes NURBS, CVs, hulls, grids and
          manipulators.
    
      - backfaceCulling : bfc          (bool)          [query,edit]
          Turns on or off backface culling for the whole view.  This setting overrides the culling settings of individual objects.
          All objects draw in the view will be backface culled.  When backface culling is turned on, surfaces becomes invisible in
          areas where the normal is pointing away from the camera.
    
      - bufferMode : bm                (unicode)       [query,edit]
          Sets the graphic buffer mode.  Possible values are singleor double.
    
      - bumpResolution : brz           (int, int)      [query,edit]
          Set the resolution for bakedbump map textures when using the hardware renderer. The default value is 512, 512
          respectively.
    
      - camera : cam                   (unicode)       [query,edit]
          Change or query the name of the camera in model editor.
    
      - cameraName : cn                (unicode)       [create,edit]
          Set the name of the panel's camera transform and shape. The shape name is computed by appending the string Shapeto the
          transform name. This flag may not be queried.
    
      - cameraSet : cst                (unicode)       []
    
      - cameraSetup : cs               (bool)          [query]
          Based on the model editor name passed in will returns a string list containing camera setups. A camera setup can contain
          one or more cameras which are associated with each other. Camera setups are defined as pairs of consecutive strings in
          the list. Each pair is comprised of: a string which identifies an active camera, and a string which defines a script to
          set up a given active camera. As many pairs of strings can be returned as the number of active cameras. If nothing is
          returned then it is assumed that no set up is required to activate a given camera.
    
      - cameras : ca                   (bool)          [query,edit]
          Turn on/off the display of cameras for the view of the model editor.
    
      - capture : cpt                  (unicode)       [query,edit]
          Perform an one-time capture of the viewport to the named image file on disk.
    
      - captureSequenceNumber : csn    (int)           [query,edit]
          When a number greater or equal to 0 is specified each subsequent refresh will save an image file to disk if the capture
          flag has been enabled.  The naming of the file is:  {root name}.#.{extension}  if the name {root name}.{extension} is
          used for the capture flag argument.  The value of # starts at the number specified to for this argument and increments
          for each subsequent refresh.  Sequence capture can be disabled by specifying a number less than 0 or an empty file name
          for the capture flag.
    
      - clipGhosts : cg                (bool)          []
    
      - cmEnabled : cme                (bool)          [query,edit]
          Turn on or off applying color management in the editor.  If set, the color management configuration set in the current
          editor is used.
    
      - colorMap : cm                  (bool)          [query]
          Queries the color map style for the model panel. Possible values are colorIndexand rgb.
    
      - colorResolution : crz          (int, int)      [query,edit]
          Set the resolution for bakedcolor textures when using the hardware renderer. The default value is 256, 256 respectively.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - controlVertices : cv           (bool)          [query,edit]
          Turn on/off the display of NURBS CVs for the view of the model editor.
    
      - cullingOverride : cov          (unicode)       [query,edit]
          Set whether to override the culling attributes on objects when using the hardware renderer. The options are: none: Use
          the culling object attributes per object.doubleSided: Force all objects to be double sided.singleSided: Force all
          objects to be single sided.The default value is none.
    
      - default : d                    (bool)          [query,edit]
          Causes this command to modify the default value of this setting. Newly created model editors will inherit the values.
          This flag may be used with the -interactive to set default interactive settings.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deformers : df                 (bool)          [query,edit]
          Turn on/off the display of deformer objects for the view of the model editor.
    
      - depthOfFieldPreview : dof      (bool)          []
    
      - dimensions : dim               (bool)          [query,edit]
          Turn on/off the display of dimension objects for the view of the model editor.
    
      - displayAppearance : da         (unicode)       [query,edit]
          Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded,
          flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and
          boundingBoxare valid for the interactive mode.
    
      - displayLights : dl             (unicode)       [query,edit]
          Sets the lighting for shaded mode.  Possible values are selected, active, all, default, none.
    
      - displayTextures : dtx          (bool)          [query,edit]
          Turns on or off display of textures in shaded mode
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - dynamicConstraints : dc        (bool)          [query,edit]
          Turn on/off the display of dynamicConstraints for the view of the model editor.
    
      - dynamics : dy                  (bool)          [query,edit]
          Turn on/off the display of dynamics objects for the view of the model editor.
    
      - editorChanged : ec             (script)        [create,query,edit]
          An optional script callback which is called when the editors options have changed.  This is useful in a situation where
          a scripted panel contains a modelEditor and wants to be notified when the contained editor changes its options.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - exposure : exp                 (float)         [query,edit]
          The exposure value used by the color management of the current editor.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - filteredObjectList : fol       (bool)          [query]
          For model editors with filtering on (either using an object filter, or isolate select), this flag returns a string list
          of the objects which are displayed in this editor. Note that this list does not take into account visibility (based on
          camera frustum or flags), it purely captures the objects which are considered when rendering the view.
    
      - fluids : fl                    (bool)          [query,edit]
          Turn on/off the display of fluids for the view of the model editor.
    
      - fogColor : fcl                 (float, float, float, float) [query,edit]
          The color used for hardware fogging.
    
      - fogDensity : fdn               (float)         [query,edit]
          Determines the density of hardware fogging.
    
      - fogEnd : fen                   (float)         [query,edit]
          The end location of hardware fogging.
    
      - fogMode : fmd                  (unicode)       [query,edit]
          This determines the drop-off mode for fog. The possibilities are: linear: linear drop-offexponent: exponential drop-
          offexponent2: squared exponential drop-off
    
      - fogSource : fsc                (unicode)       [query,edit]
          Set the type of fog algorithm to use. If the argument is fragment(default) then fog is computed per pixel. If the
          argument is coordinatethen if the geometry has specified vertex fog coordinates, and the OpenGL extension for vertex fog
          is supported by the graphics system, then fog is computed per vertex.
    
      - fogStart : fst                 (float)         [query,edit]
          The start location of hardware fogging.
    
      - fogging : fg                   (bool)          [query,edit]
          Set whether hardware fogging is enabled or not.
    
      - follicles : fo                 (bool)          [query,edit]
          Turn on/off the display of follicles for the view of the model editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - gamma : ga                     (float)         [query,edit]
          The gamma value used by the color management of the current editor.
    
      - greasePencils : gp             (bool)          []
    
      - grid : gr                      (bool)          [query,edit]
          Turn on/off the display of the grid for the view of the model editor.
    
      - hairSystems : hs               (bool)          [query,edit]
          Turn on/off the display of hairSystems for the view of the model editor.
    
      - handles : ha                   (bool)          [query,edit]
          Turn on/off the display of select handles for the view of the model editor.
    
      - headsUpDisplay : hud           (bool)          [query,edit]
          Sets whether the model panel will draw any enabled heads up display     elements in this window (if true).  Currently
          this requires the HUD elements to be globally enabled.
    
      - height : h                     (int)           [query]
          Return the height of the associated viewport in pixels
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - holdOuts : hos                 (bool)          []
    
      - hulls : hu                     (bool)          [query,edit]
          Turn on/off the display of NURBS hulls for the view of the model editor.
    
      - ignorePanZoom : ipz            (bool)          [query,edit]
          Sets whether the model panel will ignore the 2D pan/zoom value to give an overview of the scene.
    
      - ikHandles : ikh                (bool)          [query,edit]
          Turn on/off the display of ik handles and end effectors for the view of the model editor.
    
      - imagePlane : imp               (bool)          [query,edit]
          Turn on/off the display of image plane for the view
    
      - interactive : i                (bool)          [query,edit]
          Causes this command to modify the interactive refresh settings of the view.  In this way it is possible to change the
          behavior of the model editor during playback for improved performance.
    
      - interactiveBackFaceCull : ibc  (bool)          []
    
      - interactiveDisableShadows : dis (bool)          []
    
      - isFiltered : isFiltered        (bool)          [query]
          Returns true for model editors with filtering applied to their view of the scene. This could either be an explicit
          object filter, or a display option such as isolate select which filters the objects that are displayed.
    
      - jointXray : jx                 (bool)          [query,edit]
          Turns on or off Xray mode for joints.
    
      - joints : j                     (bool)          [query,edit]
          Turn on/off the display of joints for the view of the model editor.
    
      - lights : lt                    (bool)          [query,edit]
          Turn on/off the display of lights for the view of the model editor.
    
      - lineWidth : lw                 (float)         [query,edit]
          Set width of lines for display
    
      - locators : lc                  (bool)          [query,edit]
          Turn on/off the display of locator objects for the view of the model editor.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - lowQualityLighting : lql       (bool)          [query,edit]
          Set whether to use low quality lightingwhen using the hardware renderer. The default value is false.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - manipulators : m               (bool)          [query,edit]
          Turn on/off the display of manipulator objects for the view of the model editor.
    
      - maxConstantTransparency : mct  (float)         [query,edit]
          Sets the maximum constant transparency.  Setting this value remaps constant transparency values from the range [0.0,
          1.0] to the range [0.0, maxConstantTransparency]. All transparency values are shifted linearly to the new range, so a
          fully transparency object (transparency 1.0) would appear with a transparency of maxConstantTransparency in the
          viewport, allowing highly transparent objects to be made visible.  This flag only affects constant (non-textured)
          transparent objects.
    
      - maximumNumHardwareLights : mhl (bool)          []
    
      - modelPanel : mp                (unicode)       [create]
          Allows the created model editor to be embedded in the named model panel. Intended for use with custom model editors
          created via the API (i.e. the flag would be used on the derived MPxModelEditorCommand), though the flag may also be used
          on the base modelEditor command to restore a default Maya model editor to the panel. Note that the model editor
          previously owned by the panel is deleted.
    
      - motionTrails : mt              (bool)          [query,edit]
          Turn on/off the Motion Trail display in the Viewport.
    
      - nCloths : ncl                  (bool)          [query,edit]
          Turn on/off the display of nCloths for the view of the model editor.
    
      - nParticles : npa               (bool)          [query,edit]
          Turn on/off the display of nParticles for the view of the model editor.
    
      - nRigids : nr                   (bool)          [query,edit]
          Turn on/off the display of nRigids for the view of the model editor.
    
      - noUndo : nud                   (bool)          [edit]
          This flag prevents some viewport operations (such as isolate select) from being added to the undo queue.
    
      - nurbsCurves : nc               (bool)          [query,edit]
          Turn on/off the display of nurbs curves for the view of the model editor.
    
      - nurbsSurfaces : ns             (bool)          [query,edit]
          Turn on/off the display of nurbs surfaces for the view of the model editor.
    
      - objectFilter : obf             (script)        [query,edit]
          Set or query the current object filter name. An object filter is required to have already been registered.
    
      - objectFilterList : ofl         (script)        [query]
          Return a list of names of registered filters.
    
      - objectFilterListUI : ofu       (script)        [query]
          Return a list of UI names of registered filters.
    
      - objectFilterShowInHUD : ofs    (bool)          [query,edit]
          Sets whether or not to display the object filter UI name in the heads up display when an object filter is active. This
          string is concatenated with the camera name.
    
      - objectFilterUI : obu           (script)        [query]
          Query the current object filter UI name. The object filter is required to have already been registered.
    
      - occlusionCulling : ocl         (bool)          [query,edit]
          Set whether to enable occlusion culling testing when using the hardware renderer. The default value is false.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - particleInstancers : pi        (bool)          []
    
      - pivots : pv                    (bool)          [query,edit]
          Turn on/off the display of transform pivots for the view of the model editor.
    
      - planes : pl                    (bool)          [query,edit]
          Turn on/off the display of sketch planes for the view of the model editor.
    
      - pluginObjects : po             (unicode, bool) [edit]
          Turn on/off the display of plugin objects for the view. It depends on the plugin implementation whether to respect this
          flag.
    
      - pluginShapes : ps              (bool)          [edit]
          Turn on/off the display of plugin shapes for the view. It depends on the plugin implementation whether to respect this
          flag.
    
      - polymeshes : pm                (bool)          [query,edit]
          Turn on/off the display of polygon meshes for the view of the model editor.
    
      - queryPluginObjects : qpo       (unicode)       [query]
          Query the on/off state of plugin objects display for the view. To set the on/off state, use -pluginObjects instead.
    
      - removeSelected : rs            (bool)          [edit]
          This flag causes the currently active objects to be removed from the list of objects visible in the view (if
          viewSelected is true).
    
      - rendererDeviceName : rdn       (bool)          [query]
          Query for the name of the draw API used by the Viewport 2.0 renderer for a 3d modeling viewport. The possible return
          values are VirtualDeviceGLif Maya is set to use OpenGL for Viewport 2.0 or VirtualDeviceDx11if Maya is set to use
          DirectX for Viewport 2.0. If the renderer for the 3d modeling viewport is not Viewport 2.0, an empty string will be
          returned.
    
      - rendererList : rls             (bool)          [query]
          Query for a list of the internal names for renderers available for use with the 3d modeling viewport. The default list
          contains at least base_OpenGL_Renderer, and hwRender_OpenGL_Renderer, if supported. See rendererName for more details on
          these renderers. Any plugin viewport renderers will also appear in this list.
    
      - rendererListUI : rlu           (bool)          [query]
          Query for a list of the UI names for renderers available for use with the 3d modeling viewport. The default list
          consists of the UI name for base_OpenGL_Renderer, and the UI name for hwRender_OpenGL_Renderer, if it is supported. Any
          plugin viewport renderer's UI names will also appear in this list. This list and the list returned from rendererList
          have a 1:1 correspondance.
    
      - rendererName : rnm             (unicode)       [query,edit]
          Set or get the renderer used for a 3d modeling viewport. The name provided should an internal name of a renderer. The
          'rendererList' flag can be used to query for a list of available names. The default renderers available are :
          base_OpenGL_Renderer: The default OpenGL based renderer, and hwRender_OpenGL_Renderer: The high quality hardware
          renderer. The default renderer is base_OpenGL_Renderer. The high quality renderer is only supported on certain hardware
          configurations. See the hardware qualification charts for more details.
    
      - rendererOverrideList : rol     (bool)          [query]
          Query for a list of the internal names for renderer overrides for a 3d viewport renderer. Currently only the Viewport
          2renderer supports renderer overrides.
    
      - rendererOverrideListUI : rou   (bool)          [query]
          Query for a list of the UI names for renderer overrides for a 3d viewport renderer. Currently only the Viewport
          2renderer supports renderer overrides.
    
      - rendererOverrideName : rom     (unicode)       [query,edit]
          Set or get the override used for a 3d viewport renderer. The name provided should be the internal name for an override.
          The 'rendererOverrideList' flag can be used to query for a list of available names. Currently only the Viewport
          2renderer  supports renderer overrides. Setting an empty string will unset any currently active override.
    
      - resetCustomCamera : rcc        (bool)          [edit]
          When specified will reset the camera transform for the active custom camera used for a scene render filter. It is only
          enabled when a valid scene render filter is specified.
    
      - sceneRenderFilter : srf        (unicode)       [query,edit]
          Specifies the name of a scene render filter
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - selectionHiliteDisplay : sel   (bool)          [query,edit]
          Sets whether the model panel will draw any selection hiliting on the objects in this window.
    
      - setSelected : ss               (bool)          [edit]
          This flag causes the currently active objects to be the only objects visible in the view (if viewSelected is true).
    
      - shadingModel : sml             (int)           []
    
      - shadows : sdw                  (bool)          [query,edit]
          Turn on/off the display of hardware shadows in shaded mode.
    
      - smallObjectCulling : soc       (bool)          []
    
      - smallObjectThreshold : sot     (float)         []
    
      - smoothWireframe : swf          (bool)          [query,edit]
          Turns on or off smoothing of wireframe lines and points
    
      - sortTransparent : st           (bool)          [query,edit]
          This flag turns on/off sorting of transparent objects during shaded mode refresh. Normally, objects are sorted according
          to their origin in camera space but when this flag is turned off they will be drawn according to their (depth-first
          traversal) order in the scene graph. This is a global flag that affects all model editors.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - stereoDrawMode : sdm           (bool)          []
    
      - strokes : str                  (bool)          [query,edit]
          Turn on/off the display of Paint Effects strokes for the view
    
      - subdivSurfaces : sds           (bool)          [query,edit]
          Turn on/off the display of subdivision surfaces for the view of the model editor.
    
      - textureAnisotropic : ta        (bool)          [query,edit]
          Set whether to perform anisotropic texture filtering. Will work only if the anisotropic texture filtering extension is
          supported in OpenGL on the graphics system.
    
      - textureCompression : tcp       (bool)          []
    
      - textureDisplay : td            (unicode)       [query,edit]
          Set the type of blending to use for textures. The blend is performed between the destination fragment and the texture
          fragment. The source is usually the material color. Argument options are: modulate: multiply the destination and texture
          fragment decal: overwrite the destination with the texture fragment
    
      - textureEnvironmentMap : tem    (bool)          []
    
      - textureHilight : th            (bool)          [query,edit]
          Set whether to show specular hilighting when the display is in shaded textured mode.
    
      - textureMaxSize : tms           (int)           [query,edit]
          Set maximum texture size for hardware texturing.  The integer value must be a power of 2.  Recommended values are 128 or
          256.  If the value specified is larger than the OpenGL maximim textures size for the graphics hardware it will be
          clamped to the OpenGL size.  If many large textures are used in a scene reducing this value improves performance.  On
          Impact texture memory is pinned in RAM so using large textures can cause reliability and performance problems. Again
          reducing this value will help. Software rendering does not use this value. This flag is obsolete as of Maya 6.5. The
          maxTextureResolution/mtr argument on the displayPref command should be used instead.
    
      - textureMemoryUsed : tmu        (bool)          [query]
          Returns the total number of bytes used by all texture maps.  This is typicly width\*height\*channels for all texture
          objects in the scene If the texture is mip mapped all mip map levels are included in the total though not never more
          than two level will be in use at one time
    
      - textureSampling : ts           (int)           [query,edit]
          Set the type of sampling to be used for texture display. The argument can be either: 1 : means to perform point sample2
          : means to perform bilinear interpolation (default)
    
      - textures : tx                  (bool)          [query,edit]
          Turn on/off the display of texture objects for the view
    
      - toggleExposure : tge           (bool)          [edit]
          Toggles between the current and the default exposure value of the editor.
    
      - toggleGamma : tgg              (bool)          [edit]
          Toggles between the current and the default gamma value of the editor.
    
      - transpInShadows : tis          (bool)          [query,edit]
          Set whether to enable display of transparency in shadows when using the hardware renderer. The default value is false.
    
      - transparencyAlgorithm : tal    (unicode)       [query,edit]
          Set the transparency algorithm. The options are: 1) frontAndBackCull: Two pass front and back culling technique.2)
          perPolygonSort: Draw transparent polygons in back-to-front order technique.transparency pptions 1) and 2) are supported
          by the hardware renderer. Options 1) is supported by the interactive modeling viewports. The default value is
          frontAndBackCull.
    
      - twoSidedLighting : tsl         (bool)          [query,edit]
          Turns on or off two sided lighting.  This may be used with the -default flag.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateColorMode : ucm          (bool)          [edit]
          Using this flag tells the model panel to check which color mode it should be in, and to switch accordingly.  This flag
          may be used to update a model panel after a camera image plane has been added or removed.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useBaseRenderer : ubr          (bool)          [query,edit]
          Set whether to use the baserenderer when using the hardware renderer and in interactive display
          mode(-useInteractiveMode) The default value is false.
    
      - useColorIndex : uci            (bool)          [query,edit]
          Sets whether the model panel will attempt to use color index mode when possible.  Color index mode can provide a
          performance increase for point, bounding box, and wireframe display modes. This may be used with the -default flag.
    
      - useDefaultMaterial : udm       (bool)          [query,edit]
          Sets whether the model panel will draw all the shaded surfaces using the default material as opposed to using the
          material(s) currently assigned to the surfaces.
    
      - useInteractiveMode : ui        (bool)          [query,edit]
          Turns on or off the use of the special interaction settings during playback.  This flag may be used with the -default
          flag.
    
      - useRGBImagePlane : ip          (bool)          [query,edit]
          Sets whether the model panel will be forced into RGB mode when there is an image plane attached to the panel's camera.
    
      - useReducedRenderer : urr       (bool)          []
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - userNode : un                  (unicode)       [query,edit]
          Allows the user to associate a node name with the modelEditor. The value is automatically updated in the event the node
          is deleted or renamed.
    
      - viewObjects : vo               (bool)          [query]
          Returns the name (if any) of the objectSet which contains the list of objects visible in the view if viewSelected is
          true and the list of objects being displayed does notcome from the active list.
    
      - viewSelected : vs              (bool)          [query,edit]
          This flag turns on/off viewing of selected objects. When the flag is set to true, the currently active objects are
          captured and used as the list of objects to view.
    
      - viewTransformName : vtn        (unicode)       [query,edit]
          Sets the view pipeline to be applied if color management is enabled in the current editor.
    
      - viewType : vt                  (bool)          [query]
          Returns a string indicating the type of the model editor. For the default model editor, returns the empty string. For
          custom model editor types created via the API, returns the same string as is returned via the method
          MPx3dModelView::viewType().
    
      - width : w                      (int)           [query]
          Return the width of the associated viewport in pixels.
    
      - wireframeBackingStore : wbs    (bool)          [query,edit]
          Sets whether a backing store is used to optimization the drawing of active objects. This mode can provide a performance
          increase in wireframe mode for certain scenes.
    
      - wireframeOnShaded : wos        (bool)          [query,edit]
          Sets whether the model panel will draw the wireframe on all shaded objects (if true) or only for active objects (if
          false).
    
      - xray : xr                      (bool)          [query,edit]
          Turns on or off Xray mode.  This may be used with the -default flag.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.modelEditor`
    """

    pass


def promptForFolder():
    """
    Prompt the user for a folder path
    """

    pass


def visor(*args, **kwargs):
    """
    Command for the creation and manipulation of a Visor UI element. The Visor is used to display the contents of a scene
    (rendering related nodes in particular), as well as files on disk which the user may wish to bring into the scene
    (shader and texture libraries for example).
    
    Flags:
      - addFolder : add                (bool)          [create,query]
          Add a new folder to the current visual browser
    
      - addNodes : adn                 (unicode)       [create,query]
          Add dependency graph nodes by name to a user defined custom folder.  The argument is a string encolsed in quotes with 1
          one more node names seperated by blanks
    
      - allowPanningInX : apx          (bool)          [create,query]
          Specifies whether or not the user should be able to pan the contents of the visor horizontally. Default is true.
    
      - allowPanningInY : apy          (bool)          [create,query]
          Specifies whether or not the user should be able to pan the contents of the visor vertically. Default is true.
    
      - allowZooming : az              (bool)          [create,query]
          Specifies whether or not the user should be able to zoom the contents of the visor. Default is true.
    
      - command : cmd                  (unicode)       [create,query]
          Mel command which will return a list of nodes to add to a folder
    
      - deleteFolder : deleteFolder    (unicode)       [create,query]
          Delete the specified folder and all of its children
    
      - editFolder : edf               (unicode)       [create,query]
          Edit the name and MEL command for an existing folder
    
      - folderList : fl                (unicode)       [query]
          Return a string array of the folders in the visor.
    
      - menu : mn                      (unicode)       [create,query]
          Set the name of the script to run to get a popup menu
    
      - name : n                       (unicode)       [create,query]
          Name of the new folder
    
      - nodeType : ntp                 (unicode)       [create,query]
          A node type used by folders of type nodeTypeInDAG
    
      - openDirectories : opd          (bool)          [create,query]
          When adding a new folder indicate if it sub directories will be show. The default is to not show sub directories.
    
      - openFolder : opf               (bool)          [create,query]
          When adding a new folder indicate if it will be open or closed by default. The default is closed.
    
      - parent : p                     (unicode)       [create,query]
          Parent folder of this folder
    
      - path : pth                     (unicode)       [create,query]
          Path to a file system directory to be displayed in the folder
    
      - popupMenuScript : pms          (unicode)       [create,query]
          Specifies the script to be called when the right mouse button is pressed in the visor. The name of the editor in which
          the right mouse button was pressed will be appended to the script at the time the script is called.
    
      - rebuild : re                   (bool)          [create,query]
          Rebuild the visor after interactively adding a folder
    
      - refreshAllSwatches : ras       (bool)          [create,query]
          Refresh the swatches of all files currently displayed in this visor.
    
      - refreshSelectedSwatches : rss  (bool)          [create,query]
          Refresh the swatches of all files currently selected in any visor.
    
      - refreshSwatch : rs             (unicode)       [create,query]
          Refresh the swatch of the file with the specified path.
    
      - reset : rst                    (bool)          [create,query]
          Clear all previously loaded folder descriptions in preperation for building a new visual browser
    
      - restrictPanAndZoom : rpz       (bool)          [create,query]
          Specifies whether the panning and zooming of the visor should be restricted to keep the contents in the top left corner
          of the visor when they are smaller than the visible area within the visor. Default is true.
    
      - saveSwatches : ss              (bool)          [create,query]
          Save swatches to disk for currently displayed image files.
    
      - scrollBar : sb                 (unicode)       [create,query]
          Set the name of the scroll bar associated with visor
    
      - scrollPercent : sp             (float)         [create,query]
          Set the percentage value for the scroll bar.  Typically called from a a scroll bars callback.
    
      - selectedGadgets : sg           (unicode)       [query]
          Return a string array of the currently selected gadgets (files, folders, nodes) in the visor.
    
      - showDividers : sd              (bool)          [create,query]
          Specifies whether or not the visor should show dividers. The default is true. If -showDividers is set to false, dividers
          will be drawn as folders instead.
    
      - showFiles : sfi                (bool)          [create,query]
          Specifies whether or not the visor should show files. The default is true.
    
      - showFolders : sfo              (bool)          [create,query]
          Specifies whether or not the visor should show folders. The default is true.
    
      - showNodes : sn                 (bool)          [create,query]
          Specifies whether or not the visor should show nodes. The default is true.
    
      - stateString : sts              (bool)          [create,query]
          Return the MEL command string to save the folder setup in visor
    
      - style : stl                    (unicode)       [create,query]
          Set display style for the browser.  Options are:     outliner          A single column with an outliner style icon and a
          text label     singleColumn          A single column with an image style icon and a text label     multiColumn
          A multiple column grid of swatches with the text label below the swatch
    
      - transform : trn                (unicode)       [create,query]
          Name of a transform node used by folders of type nodeTypeInDAG
    
      - type : typ                     (unicode)       [create,query]
          Type of the new folder.  Options are: command A mel command that will return a list of depend nodes that will
          be displayed in the folderconnectedNodes The nodes connected to the specified node name will be displayed          in
          the folderdefaultNodes A mel command that will generate default node types.  These nodes          will not be part of
          the scene and are used for drag and drop          creation of new nodes that are in the scene.  The mel command
          use with this type is usually listNodetypes.directory A directory name in the file systemdirectoryCommand A mel command
          that will return a directory name in the file systemfolder An empty folder(the default value).  Empty folders can be
          used         as user defined folders by dropping dependency graph nodes in to themnodeTypeInDAG List all nodes of a
          given type under a specified transforms in the                 DAG.  For example list all the shaders for a character by
          specifying         the top transform of the charactershelfItems A directory containing mel files to use as shelf
          itemsFlag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.visor`
    """

    pass


def colorSliderButtonGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command object creates a new color slider group with a button and a symbol
    button. This control is primarily used in the rendering UI. In this context, the button brings up a dialog that allows
    the user to assign a texture map to this parameter. Once a texture map is available, a symbol button shows up. When this
    symbol button is pressed, the user is taken to another dialog to edit the texture map.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - buttonCommand : bc             (script)        [create,edit]
          Command string executed when the button is pressed.
    
      - buttonLabel : bl               (unicode)       [create,query,edit]
          The button text.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when slider value changes.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command string executed when slider value marker is dragged.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - forceDragRefresh : fdr         (bool)          []
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (float, float, float) [create,query,edit]
          Color in hue, saturation, and value format.
    
      - image : i                      (unicode)       [create,query,edit]
          Image displayed on the symbol button.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rgbValue : rgb                 (float, float, float) [create,query,edit]
          Color in red, green, and blue format.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - symbolButtonCommand : sbc      (script)        [create,edit]
          Command string executed when the symbol button is pressed.
    
      - symbolButtonDisplay : sbd      (bool)          [create,query,edit]
          Visibility of the symbol button.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorSliderButtonGrp`
    """

    pass


def deleteUI(*args, **kwargs):
    """
    This command deletes UI objects such as windows and controls.  Deleting a layout or window will also delete all of its
    children.  If a flag is used then all objects being deleted must be of the specified type. This command may not be
    edited or queried. NOTE: it is recommended that the type flags be used to disambiguate different kinds of objects with
    the same name.
    
    Flags:
      - collection : cl                (bool)          [create]
          Object names for deletion are all radio or tool collections.
    
      - control : ctl                  (bool)          [create]
          Object names for deletion are all controls.
    
      - editor : ed                    (bool)          [create]
          Object names for deletion are all editors.
    
      - layout : lay                   (bool)          [create]
          Object names for deletion are all layouts.
    
      - menu : m                       (bool)          [create]
          Object names for deletion are all menus.
    
      - menuItem : mi                  (bool)          [create]
          Object names for deletion are all menu items.
    
      - panel : pnl                    (bool)          [create]
          Object names for deletion are all panels.
    
      - panelConfig : pc               (bool)          [create]
          Object names for deletion are panel configurations.
    
      - radioMenuItemCollection : ric  (bool)          [create]
          Object names for deletion are all radio menu item collections.
    
      - toolContext : tc               (bool)          [create]
          Object names for deletion are all tool contexts.
    
      - uiTemplate : uit               (bool)          [create]
          Object names for deletion are all UI templates.
    
      - window : wnd                   (bool)          [create]
          Object names for deletion are all windows.                  Flag can have multiple arguments, passed either as a tuple
          or a list.
    
    
    Derived from mel command `maya.cmds.deleteUI`
    """

    pass


def frameLayout(*args, **kwargs):
    """
    This command creates frame layout control. A frame layout may draw a border around its child controls as well as a
    display a title. Frame layouts may also be collapsable. Collapsing a frame layout will make the child of the frame
    layout invisible and shrink the frame layout size. The frame layout may then be expanded to make its child visible. Note
    that the frame layout may have only one child control.  If you wish to have more than one child inside a frame layout
    then you must use some other control layout as the immediate child of the frame layout.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - backgroundShade : bgs          (bool)          [create,query,edit]
          Controls whether the background of the frame layout draws with a shaded effect. It is turned off by default.
    
      - borderStyle : bs               (unicode)       [create,query,edit]
          This flag is obsolete. The border style is no longer supported. Using this flag will return a warning.
    
      - borderVisible : bv             (bool)          [create,query,edit]
          Visibility of the border.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - collapsable : cll              (bool)          [create,query,edit]
          Collapsibility of the frame layout.
    
      - collapse : cl                  (bool)          [create,query,edit]
          Collapse state of the frame layout.
    
      - collapseCommand : cc           (script)        [create,edit]
          Command executed after the frame is collapsed.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandCommand : ec             (script)        [create,edit]
          Command executed after the frame is expanded.
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the frame label.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label string for the frame layout.
    
      - labelAlign : la                (unicode)       []
    
      - labelIndent : li               (int)           [create,query,edit]
          Indentation for the frame label.
    
      - labelVisible : lv              (bool)          [create,query,edit]
          Visibility of the frame label.
    
      - labelWidth : lw                (int)           []
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          Vertical distance between the frame and its children.
    
      - marginWidth : mw               (int)           [create,query,edit]
          Horizontal distance between the frame and its children.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preCollapseCommand : pcc       (script)        [create,edit]
          Command executed just before the frame is collapsed.
    
      - preExpandCommand : pec         (script)        [create,edit]
          Command executed just before the frame is expanded.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.frameLayout`
    """

    pass


def setParent(*args, **kwargs):
    """
    This command changes the default parent to be the specified parent. Two special parents are |which indicates the top
    level layout of the window hierarchy, or ..which indicates one level up in the hierarchy. Trying to move above the top
    level has no effect. A control must be parented to a control layout.  A control layout may be parented to another
    control layout or a window.  A menu may be parented to a window or a menu bar layout.  For all of these cases the
    setParentcommand (with no flags) will indicate the current default parent. A menu item must be parented to a menu.  To
    specify the default menu parent use the command setParent -m/menu.  Note that all menu item objects created using the
    -sm/subMenumay also be treated as menu objects. The default parent is ignored by any object that explicitly sets the
    -p/parentflag when it is created.
    
    Modifications
      - returns None object instead of the string 'NONE'
    
    Flags:
      - defineTemplate : dt            (unicode)       [create]
          Put a command in a mode where any other flags and args are parsed and added to the command template with the given name.
          They will be used as default arguments in any subsequent invocations of the command when templateName is set as the
          current template.
    
      - menu : m                       (bool)          [create,query]
          Parent menu for menu items.
    
      - topLevel : top                 (bool)          [create]
          Move to the top level layout in the hierarchy. Equivalent to use |
    
      - upLevel : u                    (bool)          [create]
          Move up one level in the hierarchy. Equivalent to use ..
    
      - useTemplate : ut               (unicode)       [create]
          Will force the command to use a command template given by the name other than the current one.                  Flag can
          have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setParent`
    """

    pass


def columnLayout(*args, **kwargs):
    """
    This command creates a layout that arranges its children in a single column.
    
    Flags:
      - adjustableColumn : adj         (bool)          [create,edit]
          Sets the children of the layout to be attached on both sides. They will stretch or shrink with the layout.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - columnAlign : cal              (unicode)       [create,edit]
          Sets the alignment of children containing text or pixmaps. Align values: left| right| center.
    
      - columnAttach : cat             (unicode, int)  [create,edit]
          Sets the attachment and offsets for the children of the layout.  Side values: left| right| both.  Left or both is
          recommended.
    
      - columnOffset : co              (unicode, int)  [create,edit]
          Sets the offsets for children of the layout. Side values: left| right| both.
    
      - columnWidth : cw               (int)           [create,query,edit]
          Sets the width of the column.  Unless the children are attached to both sides of the column, the width cannot be
          enforced. Larger children will expand layout.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowSpacing : rs                (int)           [create,query,edit]
          Sets the space between children.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.columnLayout`
    """

    pass


def layout(*args, **kwargs):
    """
    This command allows you to edit or query the properties of any layout. The argument is the name of the layout.
    In query mode, return type is based on queried flag.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.layout`
    """

    pass


def treeLister(*args, **kwargs):
    """
    This command creates/edits/queries the tree lister control. The optional argument is the name of the control.
    
    Flags:
      - addFavorite : af               (unicode)       [create,edit]
          Add an item path to the favorites folder.  The item path does not have to actually be in the tree.
    
      - addItem : add                  (<type 'unicode'>, <type 'unicode'>, script) [create,edit]
          Add an item to the control.  The arguments are item-path,icon path,command where item-path is the path from the root of
          the tree to the item's name icon path is the icon displayed in the results list command is the script which is executed
          when the item is LMB clicked
    
      - addVnnItem : avi               (unicode, unicode, unicode) [create,edit]
          Add a VNN (Virtual Node Network) item to the control.  The arguments are: item-path, icon-path, vnn-string, where item-
          path is the path from the root of the tree to the item's name, icon-path is the icon displayed in the results list and
          vnn-string is used for drag data when MMB dragging the item.  The vnn-string should be comprised of: 'VNN runtime,VNN
          library,VNN node', where the VNN library can contain sub-libraries, using / to separate.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - clearContents : clr            (bool)          [edit]
          Clears the contents of the control.
    
      - collapsePath : cp              (unicode)       [edit]
          Collapse a path in the tree.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - executeItem : ei               (unicode)       [edit]
          Execute the command associated with an item.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandPath : ep                (unicode)       [edit]
          Expand a path in the tree.
    
      - expandToDepth : etd            (int)           [edit]
          Expand the tree to the given depth.
    
      - favoritesCallback : fcb        (script)        [create,edit]
          This script is called whenever a favorite is added or removed. It is passed two arguments: The item's path and a boolean
          indicating if it is being added to favorites (True) or removed (False).
    
      - favoritesList : fl             (bool)          [query]
          Returns the list of favorite items.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - itemScript : isc               (unicode)       [query]
          Returns the language and script command of the passed item path as a two-element list, the first element is the string
          MELor Pythonand the second is the command script. Note that items with Python callable commands will be returned as
          strings.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - refreshCommand : rc            (script)        [create,query,edit]
          Command executed when the refresh button is pressed.  Note: by default the refresh button is hidden and will be shown
          automatically when this command script is attached.
    
      - removeFavorite : rf            (unicode)       [edit]
          Remove an item from favorites.  Accepts the full favorite path or the tail of the full path.
    
      - removeItem : rem               (unicode)       [edit]
          Remove an item path.
    
      - resultsPathUnderCursor : ruc   (bool)          [query]
          Returns the path to the result (right-pane) item under the mouse cursor. Returns an empty string if there is no such
          item.
    
      - selectPath : sp                (unicode)       [edit]
          Select a path in the tree.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - vnnString : vnn                (bool)          [query]
          Returns the VNN (Virtual Node Network) string of the passed item path.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.treeLister`
    """

    pass


def setUITemplate(*args, **kwargs):
    """
    This command sets the current(default) command template for the ELF commands.  The special name NONE can be used to set
    no templates current. See uiTemplatecommand also.
    
    Flags:
      - popTemplate : ppt              (bool)          [create]
          Pop the current template off of the stack and sets the next template on the stack to be current.
    
      - pushTemplate : pst             (bool)          [create]
          Push the current template onto a stack that can later be popped.                  Flag can have multiple arguments,
          passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setUITemplate`
    """

    pass


def hotkeySet(*args, **kwargs):
    """
    Manages hotkey sets in Maya. A hotkey set holds hotkey to command mapping information. Default hotkey sets are hotkey
    sets that are shipped together with Maya. They are locked and cannot be altered. A new hotkey set is always duplicated
    from an existing hotkey set. In create mode, users can choose to specify which hotkey set to duplicate by using the
    -source flag. A duplicated hotkey set is independent from the source hotkey set.
    
    Flags:
      - current : cu                   (bool)          [create,query,edit]
          Sets the hotkey set as the current active hotkey set. In query mode, returns the name of the current hotkey set.
    
      - delete : delete                (bool)          [edit]
          Deletes the hotkey set if it exists. Other flags are ignored. Returns true|false depending on the delete operation.
    
      - exists : ex                    (bool)          [create]
          Returns true|false depending upon whether the specified object exists. Other flags are ignored.
    
      - export : ep                    (unicode)       [edit]
          Exports a hotkey set. The argument is used to specify a full path of the output file.
    
      - hotkeySetArray : hsa           (bool)          [query]
          Returns a string array of all existing hotkey set names.
    
      - ip : ip                        (unicode)       [edit]
          Imports a hotkey set. The argument is used to specify a full path of the hotkey set file to import.
    
      - rename : re                    (unicode)       [edit]
          Renames an existing hotkey set. All white spaces will be replaced with '_' during operation.
    
      - source : src                   (unicode)       [create]
          Specifies the source hotkey set. If flag is not provided, the current active hotkey set is used.                  Flag
          can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hotkeySet`
    """

    pass


def gridLayout(*args, **kwargs):
    """
    This layout arranges children in a grid fashion where every cell in the grid is the same size.  You may specify the
    number of rows and columns as well as the width and height of the grid cells.
    
    Flags:
      - allowEmptyCells : aec          (bool)          [create,query]
          Specify true if you want free positioning of the children in the layout and potentially leaving empty cells between
          children. Set to false if you want the children to always be packed together. The default is true.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - autoGrow : ag                  (bool)          [create,query]
          Specify true if you want the grid layout size to grow as children are added.  For example, if the grid layout has 2
          columns and 2 rows then adding a fifth child will cause the grid to expand to 3 rows if this flag is true, otherwise the
          grid will remain the same size and the new child will be hidden from view until you expand the size of the grid using
          the appropriate flags.  The default is true.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - cellHeight : ch                (int)           [create,query,edit]
          A positive non-zero integer value indicating the height of cells in the grid layout.
    
      - cellWidth : cw                 (int)           [create,query,edit]
          A positive non-zero integer value indicating the width of cells in the grid layout.
    
      - cellWidthHeight : cwh          (int, int)      [create,edit]
          Two positive non-zero integer values for indicating the width and height, respectively, of the cells in the grid layout.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - columnsResizable : cr          (bool)          [create,query]
          Specify true if you want the number of columns to adjust according to the width of the layout.  Set to false if you want
          the number of columns to remain fixed when the width of the layout is changed.  The default is false.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - gridOrder : go                 (bool)          [query]
          As opposed to the childArray flag, the gridOrder flag returns the children of the grid Layout in the order they are
          diplayed in the window.
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfColumns : nc           (int)           [create,query,edit]
          A positive non-zero integer value indicating the number of columns in the grid layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfRows : nr              (int)           [create,query,edit]
          A positive non-zero integer value indicating the number of rows in the grid layout.
    
      - numberOfRowsColumns : nrc      (int, int)      [create,edit]
          Two positive non-zero integer values for the number of rows and columns, respectively, in the grid layout.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - position : pos                 (unicode, int)  [create,edit]
          Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired
          position of the child.  Positions increase from left to right within a row and then wrap around to the next row
          increasing from top to bottom.  For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2
          and 3 occupy the first row and 4, 5 and 6 occupy the second.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.gridLayout`
    """

    pass


def scrollLayout(*args, **kwargs):
    """
    This command creates a scroll layout.  A scroll layout is useful for when you have a number of controls which cannot all
    be visible at a time.  This layout will display a horizontal and/or vertical scroll bar when necessary to bring into
    view the hidden controls. Since the scroll layout provides no real positioning of children you should use another
    control layout as the immediate child.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - borderVisible : bv             (bool)          [create,query,edit]
          Visibility of the border.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - childResizable : cr            (bool)          [create,query]
          Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a
          minimum width for the child using the -mcw/minimumChildWidthflag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontalScrollBarThickness : hst (int)           [create,edit]
          Thickness of the horizontal scroll bar.  Specify an integer value of pixels greater than or equal to 0. Other than
          setting the value to 0 to hide the scrollbar, this flag has no effect on Windows systems.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - minChildWidth : mcw            (int)           [create,query]
          A positive non-zero integer value indicating the minimum width the scroll layout's child.  This flag only has meaning
          when the -cr/childResizableflag is set to true.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - panEnabled : pe                (bool)          [query,edit]
          Set to true if you want to pan the scroll layout using ALT + MMB. On OSX, in one button and two button mode, you could
          use command+alt+LMB to pan it. The pan effect is disabled by default.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - resizeCommand : rc             (script)        [create,edit]
          The command invoked when the scroll layout is resized.
    
      - scrollAreaHeight : sah         (bool)          [query]
          Return the height of the scroll area (in pixels).
    
      - scrollAreaValue : sav          (bool)          [query]
          Return the vertical and horizontal values of the scroll area (in pixels).
    
      - scrollAreaWidth : saw          (bool)          [query]
          Return the width of the scroll area (in pixels).
    
      - scrollByPixel : sbp            (unicode, int)  [edit]
          Scroll the client area in the direction of the string. The int specifies the number of pixels.
    
      - scrollPage : sp                (unicode)       [edit]
          Scroll the client area in the direction of the string. Valid values are up, down, leftor right.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - verticalScrollBarAlwaysVisible : vsb (bool)          [create]
          Set to true if you want to always have the vertical scroll bar visible.
    
      - verticalScrollBarThickness : vst (int)           [create,edit]
          Thickness of the vertical scroll bar.  Specify an integer value of pixels greater than or equal to 0. This flag has no
          effect on Windows systems.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scrollLayout`
    """

    pass


def shelfTabLayout(*args, **kwargs):
    """
    This command creates/edits/queries a shelf tab group which is essentially a normal tabLayout with some drop behaviour in
    the tab bar.  A garbage can icon can appear in the top right corner to dispose of buttons dragged to it from shelves.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - borderStyle : bs               (unicode)       [create,query,edit]
          Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use
          fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the
          tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top)
          of the tab layoutfull- Draw a simple frame around the body area of the tab layout
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-
          selecting the current tab will not invoke this command.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - childResizable : cr            (bool)          [create,query]
          Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a
          minimum width for the child using the -mcw/minChildWidthflag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click
          will execute the double click command.  Double clicking the current tab will re-invoke the double click command.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontalScrollBarThickness : hst (int)           [create,edit]
          Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect
          on Windows systems.
    
      - image : i                      (unicode)       [create,query,edit]
          Image appearing in top right corner of tab layout.
    
      - imageVisible : iv              (bool)          [create,query,edit]
          Visibility of tab image.
    
      - innerMarginHeight : imh        (int)           [create,query]
          Margin height for all tab children.
    
      - innerMarginWidth : imw         (int)           [create,query]
          Margin width for all tab children.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - minChildWidth : mcw            (int)           [create,query]
          Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has
          meaning when the -cr/childResizableflag is set to true.
    
      - moveTab : mt                   (int, int)      [create,edit]
          Move the tab from the current index to a new index.
    
      - newTabCommand : ntc            (script)        [create,edit]
          Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use
          the -snt/showNewTabflag.  Using this command will override any internal Maya logic for adding a new tab (only this
          command will be executed).
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preSelectCommand : psc         (script)        [create,edit]
          Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not
          invoke this command.  Note that this command is not executed by using either of the -st/selectTabor
          -sti/selectTabIndexflags.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - scrollable : scr               (bool)          [create,query]
          Puts all children of this layout within a scroll area.
    
      - scrollableTabs : stb           (bool)          [create,query,edit]
          If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.
    
      - selectCommand : sc             (script)        [create,query,edit]
          Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-
          selecting the current tab will invoke this command.  Note that this command is not executed by using either of the
          -st/selectTabor -sti/selectTabIndexflags.
    
      - selectTab : st                 (unicode)       [create,query,edit]
          The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.
    
      - selectTabIndex : sti           (int)           [create,query,edit]
          Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is
          returned on query if there are not child tabs.
    
      - showNewTab : snt               (bool)          [create,query,edit]
          Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the
          -ntc/newTabCommandflag to set the command executed when this button is clicked.
    
      - tabLabel : tl                  (unicode, unicode) [create,query,edit]
          Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second
          argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the
          children are returned.
    
      - tabLabelIndex : tli            (int, unicode)  [create,query,edit]
          Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label
          for. If this flag is queried the tab labels for all the children are returned.
    
      - tabsClosable : tc              (bool)          [create,query]
          Set to true if you want to have a close button icon on all created tabs.
    
      - tabsVisible : tv               (bool)          [create,query,edit]
          Visibility of the tab labels.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - verticalScrollBarThickness : vst (int)           [create,edit]
          Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect
          on Windows systems.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shelfTabLayout`
    """

    pass


def setStartupMessage(*args, **kwargs):
    """
    Update the startup window message.  Also know as the 'Splash Screen', this is the window that appears while the
    application is starting up.
    
    
    Derived from mel command `maya.cmds.setStartupMessage`
    """

    pass


def nodeTreeLister(*args, **kwargs):
    """
    This command creates/edits/queries the node tree lister control. nodeTreeLister is a treeLister, but items are assumed
    to have commands which return dependency node names.  Dragging from the results pane is supported. The optional argument
    is the name of the control.
    
    Flags:
      - addFavorite : af               (unicode)       [create,edit]
          Add an item path to the favorites folder.  The item path does not have to actually be in the tree.
    
      - addItem : add                  (<type 'unicode'>, <type 'unicode'>, script) [create,edit]
          Add an item to the control.  The arguments are item-path,icon path,command where item-path is the path from the root of
          the tree to the item's name icon path is the icon displayed in the results list command is the script which is executed
          when the item is LMB clicked
    
      - addVnnItem : avi               (unicode, unicode, unicode) [create,edit]
          Add a VNN (Virtual Node Network) item to the control.  The arguments are: item-path, icon-path, vnn-string, where item-
          path is the path from the root of the tree to the item's name, icon-path is the icon displayed in the results list and
          vnn-string is used for drag data when MMB dragging the item.  The vnn-string should be comprised of: 'VNN runtime,VNN
          library,VNN node', where the VNN library can contain sub-libraries, using / to separate.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - clearContents : clr            (bool)          [edit]
          Clears the contents of the control.
    
      - collapsePath : cp              (unicode)       [edit]
          Collapse a path in the tree.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - executeItem : ei               (unicode)       [edit]
          Execute the command associated with an item.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandPath : ep                (unicode)       [edit]
          Expand a path in the tree.
    
      - expandToDepth : etd            (int)           [edit]
          Expand the tree to the given depth.
    
      - favoritesCallback : fcb        (script)        [create,edit]
          This script is called whenever a favorite is added or removed. It is passed two arguments: The item's path and a boolean
          indicating if it is being added to favorites (True) or removed (False).
    
      - favoritesList : fl             (bool)          [query]
          Returns the list of favorite items.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - itemScript : isc               (unicode)       [query]
          Returns the language and script command of the passed item path as a two-element list, the first element is the string
          MELor Pythonand the second is the command script. Note that items with Python callable commands will be returned as
          strings.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - nodeLibrary : nl               (unicode)       [create,query,edit]
          The node library that this tree lister is currently displaying.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - refreshCommand : rc            (script)        [create,query,edit]
          Command executed when the refresh button is pressed.  Note: by default the refresh button is hidden and will be shown
          automatically when this command script is attached.
    
      - removeFavorite : rf            (unicode)       [edit]
          Remove an item from favorites.  Accepts the full favorite path or the tail of the full path.
    
      - removeItem : rem               (unicode)       [edit]
          Remove an item path.
    
      - resultsPathUnderCursor : ruc   (bool)          [query]
          Returns the path to the result (right-pane) item under the mouse cursor. Returns an empty string if there is no such
          item.
    
      - selectPath : sp                (unicode)       [edit]
          Select a path in the tree.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - vnnString : vnn                (bool)          [query]
          Returns the VNN (Virtual Node Network) string of the passed item path.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nodeTreeLister`
    """

    pass


def blendShapePanel(*args, **kwargs):
    """
    This command creates a panel that derives from the base panel class that houses a blendShapeEditor.
    
    Flags:
      - blendShapeEditor : be          (bool)          [query]
          Query only flag that returns the name of an editor to be associated with the panel.
    
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.blendShapePanel`
    """

    pass


def webBrowserPrefs(*args, **kwargs):
    """
    Flags:
      - preference : prf               (unicode, unicode) []
    
    
    Derived from mel command `maya.cmds.webBrowserPrefs`
    """

    pass


def scriptTable(*args, **kwargs):
    """
    This command creates/edits/queries the script table control.
    
    Maya Bug Fix:
        - fixed getCellCmd to work with python functions, previously only worked with mel callbacks
            IMPORTANT: you cannot use the print statement within the getCellCmd callback function or your values will not be returned to the table
    
    Flags:
      - afterCellChangedCmd : acc      (script)        [create,edit]
          Sets the script to call after the value of a cell has been changed. The procedure is called with 2 integer arguments
          specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into
          that cell. The procedure does not need to return any value. The row and column numbers passed in are 1-based (i.e. (1,1)
          is the upper left cell). The procedure should be of the form: global proc procedureName(int $row, int $column, string
          $value)
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - cellBackgroundColorCommand : cbc (script)        [create,edit]
          Sets the script to call when it requires the background color of a cell. The procedure is called with 2 integer
          arguments specifying the row and column for which the value is required. The procedure should return an array of ints
          which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper
          left cell). The procedure should be of the form: global proc int[] procedureName(int $row, int $column) { return
          {255,0,0}; // return Red as cell background color }
    
      - cellChangedCmd : ccc           (script)        [create,edit]
          Sets the script to call when somebody has changed the value of a cell. The procedure is called with 2 integer arguments
          specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into
          that cell. The procedure should return an integer value which indicates whether that value should be accepted (return 1
          if yes, and 0 if no). The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The
          procedure should be of the form: global proc int procedureName(int $row, int $column, string $value)
    
      - cellForegroundColorCommand : cfc (script)        [create,edit]
          Sets the script to call when it requires the foreground color of a cell. The procedure is called with 2 integer
          arguments specifying the row and column for which the value is required. The procedure should return an array of ints
          which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper
          left cell). The procedure should be of the form: global proc int[] procedureName(int $row, int $column) { return
          {0,0,0}; // return Black as Text color }
    
      - cellIndex : ci                 (int, int)      [query,edit]
          used with cellValue , to give the index of row and column This flag and its argument must be passed to the command
          before the -q flag (see examples).
    
      - cellValue : cv                 (unicode)       [query,edit]
          query and set the cell value on the table by the index of row and column referred in flag -cellIndex.In edit mode, if
          flag -multiEditEnabled is True and any cell is selected, the flag -cellIndex is not used and the selected cells will be
          changed.
    
      - clearRow : cr                  (int)           [edit]
          Clear the contents for all the cells on the specified row. Any procedure specified by the -gcc flag will be called to
          populate the cleared cells The row number is 1-based (i.e. the first row is 1 not 0).
    
      - clearTable : ct                (bool)          [edit]
          Clears the contents of all the cells in the table. Any procedure specified by the -gcc flag will be called to populate
          the cleared cells
    
      - columnFilter : cf              (int, unicode)  [create,edit]
          Filter the specified column with the string value provided. Set filter to columns 0 will apply the filter to all
          columns. The filter is case insensitive and support wildcards. Wildcard Matching: Wildcard matching is much simpler than
          full regexps and has only four features: c    Any character represents itself apart from those mentioned below. Thus c
          matches the character c. ?     Matches any single character. It is the same as . in full regexps. \*   Matches zero or
          more of any characters. It is the same as .\* in full regexps. [...]    Sets of characters can be represented in square
          brackets, similar to full regexps. Within the character class, backslash has no special meaning. (i.e. you can search
          for MyValuewith y\*uor ??Val??or [MyThe]Valueor any letters in MyValueThe column number is 1-based (i.e. the first row
          is 1 not 0).
    
      - columnWidth : cw               (int, int)      [create,edit]
          Set the width of the specified column The column number is 1-based (ie. the first column is 1 not 0).
    
      - columns : c                    (int)           [create,query,edit]
          Set the number of columns in the table
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteRow : dr                 (int)           [edit]
          Delete the specified row The row number is 1-based (i.e. the first row is 1 not 0).
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the table. By default, this flag is set to true, and the table can be edited. If false, then the table
          is 'read only' and cannot be typed into.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - excludingHeaders : eh          (bool)          [query]
          when querying the count for the rows or the columns , the number returned will not include the headers
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - getCellCmd : gcc               (script)        [create,edit]
          Sets the script to call when it requires the contents of a cell. The procedure is called with 2 integer arguments
          specifying the row and column for which the value is required. The procedure should return a string which is the value
          for the cell. The row and column numbers passed in are 1-based (ie. (1,1) is the upper left cell). The procedure should
          be of the form: global proc string procedureName(int $row, int $column)
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - insertRow : ir                 (int)           [edit]
          Insert an empty row before the specified row. Any procedure specified by the -gcc flag will be called to populate the
          new new cells. The row number is 1-based (i.e. the first row is 1 not 0).
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (int, unicode)  [create,edit]
          Set the label of the specified column. The column number is 1-based (ie. the first column is 1 not 0).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - multiEditEnabled : mee         (bool)          [create,query,edit]
          True: scriptTable support multi-editing function
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowHeight : rh                 (int)           [create,query,edit]
          Sets the height for each row in the scriptTable
    
      - rows : r                       (int)           [create,query,edit]
          Set the number of rows in the table
    
      - rowsRemovedCmd : rrc           (script)        [create,edit]
          Sets the script to call after rows are removed by pressing 'delete' or 'backspace' key. The procedure is called with one
          argument specifying that selected rows have been removed. The rows passed in are 1-based. The procedure should be of the
          form: global proc procedureName(int $rows[])
    
      - rowsToBeRemovedCmd : rtc       (script)        [create,edit]
          Sets the script to call when 'delete' or 'backspace' key is pressed. The procedure is called with one argument
          specifying the selected rows to be removed. The procedure should return an integer value which indicates whether the
          selected rows should be removed (return 1 if yes, and 0 if no). The rows passed in are 1-based. The procedure should be
          of the form: global proc int procedureName(int $rows[])
    
      - selectedCells : sc             (<type 'int'>, ...) [query,edit]
          Select the cells or return  the cells currently selected. This returns a list of indices, the first of each pair is the
          row, the second is the column, repeated for each cell selected The returned cell numbers are 1-based (ie. the first row
          is 1 not 0, the first column is 1 not 0).
    
      - selectedColumns : scs          (<type 'int'>, ...) [query,edit]
          select the columns or return the columns currently selected. This returns a list of indices of each column completely
          selected The returned column numbers are 1-based
    
      - selectedRow : sr               (bool)          [query]
          The current row selected. The returned row number is 1-based (ie. the first row is 1 not 0).
    
      - selectedRows : srs             (<type 'int'>, ...) [query,edit]
          In edit mode, select the rows given as argument. In query mode, return a list of indices of completely selected rows.
          The row numbers are 1-based
    
      - selectionBehavior : sb         (int)           [create,query,edit]
          Set the selection behavior, valid values are from 0 to 2 (inclusive) 0 - Selecting single items. 1 - Selecting only
          rows. 2 - Selecting only columns.
    
      - selectionChangedCmd : scc      (script)        [create,edit]
          Sets the script to call when a complete selection operation triggered by the user has occurred successfully. The script
          does not pass any parameters and does not need to return any value (i.e. It is simply a notification mechanism).
    
      - selectionMode : sm             (int)           [create,query,edit]
          Set the selection Mode, valid values are from 0 to 4 (inclusive)0 - Items cannot be selected.1 - When the user selects
          an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on
          it.2 - When the user selects an item in the usual way, the selection status of that item is toggled and the other items
          are left alone. Multiple items can be toggled by dragging the mouse over them.3 - When the user selects an item in the
          usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking
          on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key
          while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending
          on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.4 - When the user
          selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the
          Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected,
          depending on the state of the clicked item.
    
      - sortEnabled : se               (bool)          [create,query,edit]
          enable scriptTable sorted by column default value is false and the whole row will be sorted
    
      - underPointerColumn : upc       (bool)          [query]
          The column under the pointer. The returned column number is 1-based (i.e. the first column is 1 not 0).
    
      - underPointerRow : upr          (bool)          [query]
          The row under the pointer. The returned row number is 1-based (i.e. the first row is 1 not 0).
    
      - useDoubleClickEdit : udc       (bool)          [create,query,edit]
          this controls the cell edit modeFalse: Click in the cell to select (in Row selection, the last cell of the row is
          edited, in Column selection, the last cell of the column is edited)(default) True:  Clicked in cell is edited when
          double-clicked only
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scriptTable`
    """

    pass


def optionMenuGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. This command creates a pre-packaged collection of label text, option menu and an
    extra label.  Both the label and extra label are optional. Subsequent calls to the menuItem command will place them in
    the option menu.  When adding menu items to the option menu after the initialization step, use the name of the options
    menu itself. See the example below for more details. Note that commands attached to menu items will not get called. Use
    the -cc/changedCommandflag to be notified when the user changes the value of the option menu.
    
    Modifications:
      - returns an empty list when the result is None for flags: (query and (itemListLong or itemListShort))
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when a new item is selected.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - extraLabel : el                (unicode)       [create,query,edit]
          If present on creation this specifies that there will be an extra label to the right of the option menu.  Sets the
          string to be the extra label text.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - itemListLong : ill             (bool)          [query]
          Returns the long names of the items.
    
      - itemListShort : ils            (bool)          [query]
          Returns the short names of the items.
    
      - label : l                      (unicode)       [create,query,edit]
          If present on creation this specifies that there will be a label to the left of the option menu.  Sets the string to be
          the label text.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfItems : ni             (bool)          [query]
          Returns the number of items.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - select : sl                    (int)           [create,query,edit]
          Selects an item by index.  The first item is 1.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (unicode)       [create,query,edit]
          Select an item by value.  Also, returns the text of the currently selected item.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.optionMenuGrp`
    """

    pass


def dockControl(*args, **kwargs):
    """
    Create a dockable control, also known as tool palette or utility window. Dock controls are secondary windows placed in
    the dock area around the central control in a main window. Dock windows can be moved inside their current area, moved
    into new areas and floated (e.g. undocked). Dock control consists of a title bar and the content area. The titlebar
    displays the dock control window title, a float button and a close button. Depending on the state of the dock control,
    the float and close buttons may be either disabled or not shown at all.
    
    Flags:
      - allowedArea : aa               (unicode)       [create,query,edit]
          Areas where the dock control may be placed. Valid values are top, left, bottom, rightand all.  The default is all.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - area : a                       (unicode)       [create,query,edit]
          The initial dock area for this dock control. This is a required flag.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - closeCommand : cc              (script)        [create,edit]
          Script executed after the dock control is closed.
    
      - content : con                  (unicode)       [create,query]
          The name of the control that is the content of this dock control.  This is a required flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dockStation : ds               (unicode)       [create]
          The name of the control the window can be docked into. If this is not set it is assumed to be the main window.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enablePopupOption : epo        (bool)          [create,query,edit]
          Whether or not the menu option for the dock control in the UI Elements popup menu is enabled.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fixedHeight : fh               (bool)          [create,query,edit]
          Whether or not the dockControl height may be interactively resized.
    
      - fixedWidth : fw                (bool)          [create,query,edit]
          Whether or not the dockControl width may be interactively resized.
    
      - floatChangeCommand : fcc       (script)        [create,edit]
          The script executed when the floating state of the dock widget changes.
    
      - floating : fl                  (bool)          [create,query,edit]
          Whether the dock widget is floating. A floating dock widget is presented to the user as an independent window on topof
          main window, instead of being docked in the main window.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.  The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - moveable : mov                 (bool)          [create,query,edit]
          Control over whether or not the dockControl may be undocked/redocked.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - r : r                          (bool)          [query,edit]
          Whether the dock widget is visible and either floating or at the top of its dock widget area.
    
      - retain : ret                   (bool)          [create,query,edit]
          Control over whether or not the window and its contents are deleted when closed. The default is true.  The window and
          its contents are retained when closed unless this is set to false.
    
      - sizeable : s                   (bool)          [create,query,edit]
          Whether or not the dockControl width may be interactively resized. Deprecated!!  Use the fixedWidth flag instead.
    
      - splitLayout : sl               (unicode)       [create]
          When two windows are added to a single docking area they are by default tabbed together. Setting a value for splitLayout
          will allow it to be placed next to another control in the same area. The flag's argument controls the orientation of the
          split. Valid values are horizontalor vertical.
    
      - state : st                     (unicode)       [create,query,edit]
          When queried this flag will return a string holding the dock control state information. This string is a hexadecimal
          representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the
          optionVar command to restore a dock control's state across sessions of Maya.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dockControl`
    """

    pass


def attrColorSliderGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. Create a color slider group consisting of a label, a color canvas, a slider and a
    button.  Clicking on the canvas will bring up the color editor.  If the button is visible, it will allow you to map a
    texture to the attribute.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attrNavDecision : attrNavDecision (PyNode, <type 'unicode'>) [create,query,edit]
          The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept
          in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the
          navigator implements.
    
      - attribute : at                 (unicode)       [create,query,edit]
          The name of a unique attribute of type 3double.  This newly created field will be attached to the attribute, so that
          modifications to one will change the other.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (float, float, float) [create,query,edit]
          Specifies the color in hsv style.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with
          whatever the user wants.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rgbValue : rgb                 (float, float, float) [create,query,edit]
          Specifies the color in rgb style.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - showButton : sb                (bool)          [create,query,edit]
          Control the display of the texture link button. True by default (show it).
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrColorSliderGrp`
    """

    pass


def buttonManip(*args, **kwargs):
    """
    This creates a button manipulator. This manipulator has a position in space and a triad manip for positioning. When you
    click on the top part of the manip, the command defined by the first argument is executed. The command is associated
    with the manipulator when it is created. If a dag object is included on the command line, the manip will be parented to
    the object. This means moving the object will move the manip. You can move the manip independently of the object using
    its triad. Note that a buttonManip may not be parented to more than one object.
    
    Flags:
      - icon : i                       (unicode)       [create]
          Specify an icon to represent the manipulator.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.buttonManip`
    """

    pass


def nameCommand(*args, **kwargs):
    """
    This command creates a nameCommand object. Each nameCommand object can be connected to a hotkey. Thereafter, the
    nameCommand's command string will be executed whenever the hotkey is pressed (or released, as specified by the user).
    
    Flags:
      - annotation : ann               (unicode)       [create]
          A description of the command.
    
      - command : c                    (script)        [create]
          The command that is executed when the nameCommand is invoked.
    
      - data1 : da1                    (unicode)       [create]
    
      - data2 : da2                    (unicode)       [create]
    
      - data3 : da3                    (unicode)       [create]
          These are optional, user-defined data strings that are attached to the nameCommand object.  They can be edited or
          queried using the assignCommand command.
    
      - default : d                    (bool)          [create]
          Indicate that this name command is a default command. Default name commands will not be saved to preferences.
    
      - sourceType : stp               (unicode)       [create]
          Sets the language type for the command script. Can only be used in conjunction with the -command flag. Valid values are
          mel(enabled by default), and python.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.nameCommand`
    """

    pass


def button(*args, **kwargs):
    """
    Create a button control capable of displaying a textual label and executing a command when selected by the user.
    
    Flags:
      - actOnPress : aop               (bool)          [create,query,edit]
          If true then the command specified by the command flag will be executed when a mouse button is pressed.  If false then
          that command will be executed after the mouse button is released. The default value is false.
    
      - actionIsSubstitute : ais       (bool)          [create,query,edit]
          This flag is obsolete and should no longer be used.
    
      - align : al                     (unicode)       [create,query,edit]
          This flag is obsolete and should no longer be used. The button label will always be center-aligned.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (script)        [create,query,edit]
          Command executed when the control is pressed.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.  The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - recomputeSize : rs             (bool)          [create,query,edit]
          If true then the control will recompute it's size to just fit the size of the label.  If false then the control size
          will remain fixed as you change the size of the label.  The default value of this flag is true.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.button`
    """

    pass


def valueControlGrp(name='None', create='False', dataType='None', slider='True', value='None', numberOfControls='1', **kwargs):
    """
    This function allows for a simplified interface for automatically creating UI's to control numeric values.
    
    A dictionary of keywords shared by all controls can be created and passed to this function and settings which don't pertain
    to the element being created will will be ignore.  For example, 'precision' will be ignored by all non-float UI and
    'sliderSteps' will be ignore by all non-slider UIs.
    
    :Parameters:
        dataType : string or class type
            The dataType that the UI should control.  It can be a type object or the string name of the type.
            For example for a boolean, you can specify 'bool' or pass in the bool class. Also, if the UI is meant to
            control an array, you can pass the type name as a stirng with a integer suffix representing the array length. ex. 'bool3'
    
        numberOfControls : int
            A parameter for specifying the number of controls per control group.  For example, for a checkBoxGrp, numberOfControls
            will map to the 'numberOfCheckBoxes' keyword.
    
        slider : bool
            Specify whether or not sliders should be used for int and float controls. Ignored for other
            types, as well as for int and float arrays
    
        value : int, int list, bool, bool list, float, float list, string, unicode, Path, Vector,
            The value for the control. If the value is for an array type, it should be a list or tuple of the appropriate
            number of elements.
    
    A straightforward example::
    
        settings = {}
        settings['step'] = 1
        settings['precision'] = 3
        settings['vertical'] = True # for all checkBoxGrps, lay out vertically
        win = window()
        columnLayout()
        setUITemplate( 'attributeEditorTemplate', pushTemplate=1 )
        boolCtr = valueControlGrp( dataType='bool', label='bool', **settings)
        bool3Ctr = valueControlGrp( dataType='bool', label='bool', numberOfControls=3, **settings)
        intCtr = valueControlGrp( dataType=int, label='int', slider=False, **settings)
        intSldr = valueControlGrp( dataType=int, label='int', slider=True, **settings)
        int3Ctrl= valueControlGrp( dataType=int, label='int', numberOfControls=3, **settings)
        floatCtr = valueControlGrp( dataType=float, label='float', slider=False, **settings)
        floatSldr = valueControlGrp( dataType=float, label='float', slider=True, **settings)
        pathCtrl = valueControlGrp( dataType=Path, label='path', **settings)
        win.show()
    
    
    Here's an example of how this is meant to be used in practice::
    
        settings = {}
        settings['step'] = 1
        settings['precision'] = 3
        win = window()
        columnLayout()
        types=[ ( 'donuts?',
                    bool,
                    True ),
                # bool arrays have a special label syntax that allow them to pass sub-labels
                ( [ 'flavors', ['jelly', 'sprinkles', 'glazed']],
                    'bool3',
                    [0,1,0]),
                ( 'quantity',
                  int,
                  12 ),
                ( 'delivery time',
                  float,
                  .69)
                ]
        for label, dt, val in types:
            valueControlGrp( dataType=dt, label=label, value=val, **settings)
        win.show()
    """

    pass


def workspaceControl(*args, **kwargs):
    """
    Creates and manages the widget used to host windows in a layout which enables docking and stacking windows together.
    
    Flags:
      - checksPlugins : cp             (bool)          [create,edit]
          Sets whether the UI (as defined by the uiScript) checks the loaded state of one or more plugins in its code. The UI will
          not be loaded until the auto-loading of plugins is complete. Default value is false.
    
      - close : cl                     (bool)          [edit]
          Closes the workspace control.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - dockToControl : dtc            (unicode, unicode) [create,edit]
          Dock this workspace control next to the given control. The first argument is the control name, the second is dock
          position relative to the control (valid values are: left, right, top, bottom).
    
      - dockToMainWindow : dtm         (unicode, bool) [create,edit]
          Dock this workspace control into the main window. The first argument is dock position along the sides of the main window
          (valid values are: left, right, top, bottom), the second is whether or not the control should be tabbed into the first
          control found at the dock position.
    
      - dockToPanel : dtp              (unicode, unicode, bool) [create,edit]
          Dock this workspace control into the given workspace docking panel. The first argument is the panel name, the second is
          dock position along the sides of the panel (valid values are: left, right, top, bottom), the third is whether or not the
          control should be tabbed into the first control found at the dock position.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - floating : fl                  (bool)          [create,query,edit]
          Whether the workspace control is floating.
    
      - height : h                     (bool)          [query]
          Query only flag returning the current height of the control.
    
      - heightProperty : hp            (unicode)       []
    
      - initialHeight : ih             (int)           [create,edit]
          The initial height of the workspace control when first shown.
    
      - initialWidth : iw              (int)           [create,edit]
          The initial width of the workspace control when first shown.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text. The default label is the name of the workspace control.
    
      - loadImmediately : li           (bool)          [create,edit]
          Sets whether the UI (as defined by the uiScript) will be built immediately on workspace control creation (true) or
          delayed until the control is actually shown (false). Default value is false.
    
      - minimumWidth : mw              (bool)          [create,query,edit]
          Sets the minimum width of control to the initial width. This should be used along with initial width flag.
    
      - r : r                          (bool)          [query,edit]
          Whether the workspace control widget is visible and either floating or at the top of its workspace area.
    
      - requiredPlugin : rp            (unicode)       [create,edit]
          The name of a plug-in that needs to be loaded in order to build the workspace control UI.
    
      - retain : rt                    (bool)          [create]
          Sets whether the workspace control is retained (i.e. only hidden) or deleted when closed. Default value is true.
    
      - tabToControl : ttc             (unicode, int)  [create,edit]
          Tab this workspace control into the given control. The first argument is the control name, the second is the index
          position within the containing tab widget (invalid values mean append).
    
      - uiScript : ui                  (script)        [create,edit]
          The specified script will be invoked to build the UI of the workspaceControl.  This is a required flag.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the workspace control. A control is created visible by default.
    
      - visibleChangeCommand : vcc     (script)        [create,edit]
          Command that gets executed when visible state of the workspace control changes.
    
      - width : w                      (bool)          [query]
          Query only flag returning the current width of the control.                  Flag can have multiple arguments, passed
          either as a tuple or a list.
    
      - widthProperty : wp             (unicode)       []
    
    
    Derived from mel command `maya.cmds.workspaceControl`
    """

    pass


def floatScrollBar(*args, **kwargs):
    """
    Create a scroll bar control that accepts only float values and is bound by a minimum and maximum value.  The scroll bar
    displays a marker indicating the current value of the scroll bar relative to it's minimum and maximum values.  Click and
    drag the marker or on the scroll bar itself to change the current value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the scroll bar's value marker.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontal : hr                (bool)          [create,query]
          Orientation of the slider.  This flag is true by default which corresponds to a horizontally oriented slider.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - largeStep : ls                 (float)         [create,query,edit]
          Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (float)         [create,query,edit]
          Upper limit of the scroll bar.
    
      - minValue : min                 (float)         [create,query,edit]
          Lower limit of the scroll bar.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - step : s                       (float)         [create,query,edit]
          Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (float)         [create,query,edit]
          Value of the scroll bar.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.floatScrollBar`
    """

    pass


def panelHistory(*args, **kwargs):
    """
    This command creates a panel history object.  The object is targeted on a particular paneLayout and thereafter notes
    changes in panel configurations within that paneLayout, building up a history list.  The list can be stepped through
    backwards or forwards.
    
    Flags:
      - back : b                       (bool)          [edit]
          Go back one level on the history list.
    
      - clear : cl                     (bool)          [edit]
          Clear the history stack
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - forward : f                    (bool)          [edit]
          Go forward one level on the history list.
    
      - historyDepth : hd              (int)           [query,edit]
          Specifies how many levels of history are maintained.
    
      - isEmpty : ie                   (bool)          [query]
          Returns true if there is currently no panel history.
    
      - suspend : s                    (bool)          [edit]
          Specifies whether to suspend or resume updates to the panel history. Useful for chunking a number of changes into one
          history event.
    
      - targetPane : tp                (unicode)       [create,query]
          Specifies which paneLayout the history will be maintained for.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - wrap : w                       (bool)          [query,edit]
          Specifies whether the history will wrap at the end and beginning.  This value is true by default.                  Flag
          can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.panelHistory`
    """

    pass


def iconTextRadioButton(*args, **kwargs):
    """
    This control supports up to 3 icon images and 4 different display styles.  The icon image displayed is the one that best
    fits the current size of the control given its current style. This command creates a iconTextRadioButton that is added
    to the most recently created iconTextRadioCollection unless the -cl/cluster flag is used.
    
    Flags:
      - align : al                     (unicode)       [create,query,edit]
          The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently
          only available when -st/style is set to iconAndTextCentered.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,query,edit]
          Command executed when the control's state is changed. Note that this flag should not be used in conjunction with
          onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the
          callback, or use onCommand and offCommand as separate callbacks.
    
      - collection : cl                (unicode)       [create]
          To explicitly add the control to the specified collection.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disabledImage : di             (unicode)       [create,query,edit]
          Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is
          a Windows only flag.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - flat : fla                     (bool)          [create,query,edit]
          Sets whether the control will be a flat button (0 false, 1 true).
    
      - flipX : fx                     (bool)          [create,query,edit]
          Is the image flipped horizontally?
    
      - flipY : fy                     (bool)          [create,query,edit]
          Is the image flipped vertically?
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - highlightImage : hi            (unicode)       [create,query,edit]
          Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with
          the -i/imageflag. This is a Windows only flag.
    
      - image : i                      (unicode)       [create,query,edit]
          If you are not providing images with different sizes then you may use this flag for the control's image. If the
          iconOnlystyle is set, the icon will be scaled to the size of the control.
    
      - image1 : i1                    (unicode)       [create,query,edit]
    
      - image2 : i2                    (unicode)       [create,query,edit]
    
      - image3 : i3                    (unicode)       [create,query,edit]
          This control supports three icons. The icon that best fits the current size of the control will be displayed.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          A short string, up to 6 characters, representing a label that will be displayed on top of the image.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the control.
    
      - labelOffset : lo               (int)           [create,query,edit]
          The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - marginHeight : mh              (int)           [create,query,edit]
          The number of pixels above and below the control content. The default value is 1 pixel.
    
      - marginWidth : mw               (int)           [create,query,edit]
          The number of pixels on either side of the control content. The default value is 1 pixel.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - offCommand : ofc               (script)        [create,query,edit]
          Command executed when the control is turned off.
    
      - onCommand : onc                (script)        [create,query,edit]
          Command executed when the control is turned on.
    
      - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
          The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
    
      - overlayLabelColor : olc        (float, float, float) [create,query,edit]
          The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rotation : rot                 (float)         [create,query,edit]
          The rotation value of the image in radians.
    
      - select : sl                    (bool)          [create,query,edit]
          Will set this button as the selected one.
    
      - selectionHighlightImage : shi  (unicode)       [create,query,edit]
          Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the
          image specified with the -i/imageflag. This is a Windows only flag.
    
      - selectionImage : si            (unicode)       [create,query,edit]
          Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag.
          This is a Windows only flag.
    
      - style : st                     (unicode)       [create,query,edit]
          The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and
          iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will
          be scaled to the size of the control.
    
      - useAlpha : ua                  (bool)          [create,query,edit]
          Is the image using alpha channel?
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this control feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextRadioButton`
    """

    pass


def overrideModifier(*args, **kwargs):
    """
    This command allows you to assign modifier key behaviour to other parts of the system.  For example you can use a hotkey
    or input device instead of a modifer key to perform the same action. Note that the original modifier key behaviour is
    not altered in anyway. For example, if you've assigned Ctrlkey behaviour to the ckey then the Ctrlkey will still work as
    you expect, all you've done is allowed yourself to use the ckey as an alternative to the Ctrlkey.
    
    Dynamic library stub function
    
    Flags:
      - clear : cl                     (bool)          [create]
          Don't force any modifier keys.
    
      - press : p                      (unicode)       [create]
          Force the following modifier to be pressed. Valid values are Alt, Ctrl, Shift.
    
      - release : r                    (unicode)       [create]
          Force the following modifier to be released. Valid values are Alt, Ctrl, Shift.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.overrideModifier`
    """

    pass


def deviceEditor(*args, **kwargs):
    """
    This creates an editor for creating/modifying attachments to input devices.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - takePath : tp                  (unicode)       [query,edit]
          The path used for writing/reading take data through the editor.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deviceEditor`
    """

    pass


def informBox(title, message, ok="'Ok'"):
    """
    Information box
    """

    pass


def cmdScrollFieldReporter(*args, **kwargs):
    """
    A script editor reporter control used to receive and display the history of processed commmands.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - clear : clr                    (bool)          [create,edit]
          Clears the field.
    
      - copySelection : cp             (bool)          [create,edit]
          Copies the current selection from this field.
    
      - cutSelection : ct              (bool)          [create,edit]
          Cuts the current selection from this field.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - echoAllCommands : eac          (bool)          [create,query,edit]
          Echo all commands.    (Global parameter, affects all command reporters)
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filterSourceType : fst         (unicode)       [create,query,edit]
          Filters the specified source type from showing in this command reporter. Currently supports either mel, python, or
          (default). Setting the filter to the empty string () will remove all filtering and show both meland pythonresults.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - hasFocus : hf                  (bool)          [query]
          Whether this control is currently in focus.
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - lineNumbers : ln               (bool)          [create,query,edit]
          Show line numbers (in Error/Warning messages).    (Global parameter, affects all command reporters)
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - pasteSelection : pst           (bool)          [create,edit]
          Pastes text into this field at the current caret position.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - receiveFocusCommand : rfc      (script)        [create,edit]
          Command executed when the field receives focus.
    
      - saveSelection : sv             (unicode)       [create,edit]
          Prompts to save the current selection to a file. The default filename prompt will be prepended with the given string.
    
      - saveSelectionToShelf : svs     (bool)          [create,edit]
          Prompts to save the current selection to an item in the shelf.
    
      - select : sl                    (int, int)      [create,edit]
          Selects text within a specified range.
    
      - selectAll : sla                (bool)          [create,edit]
          Selects all text.
    
      - stackTrace : st                (bool)          [create,query,edit]
          Show stack trace.    (Global parameter, affects all command reporters)
    
      - suppressErrors : se            (bool)          [create,query,edit]
          Suppress errors.
    
      - suppressInfo : si              (bool)          [create,query,edit]
          Suppress info.
    
      - suppressResults : sr           (bool)          [create,query,edit]
          Suppress results.
    
      - suppressStackTrace : sst       (bool)          [create,query,edit]
          Suppress stack trace.
    
      - suppressWarnings : sw          (bool)          [create,query,edit]
          Suppress warnings.
    
      - text : t                       (unicode)       [create,query,edit]
          Replaces the field text with the given string.
    
      - textLength : tl                (bool)          [query]
          The number of characters in this text field.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cmdScrollFieldReporter`
    """

    pass


def showSelectionInTitle(*args, **kwargs):
    """
    This command causes the title of the window specified as an argument to be linked to the current file and selection.
    When selection changes, the window title will change to show the current file name and the name of the last selected
    object.
    
    
    Derived from mel command `maya.cmds.showSelectionInTitle`
    """

    pass


def iconTextScrollList(*args, **kwargs):
    """
    This command creates/edits/queries a text scrolling list. The list can be in single select mode where only one item at
    at time is selected, or in multi-select mode where many items may be selected.
    
    Flags:
      - allowMultiSelection : ams      (bool)          [create,query,edit]
          Specify multi or single selection mode.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - append : a                     (unicode)       [create,edit]
          Add an item to the end of the list.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (callable)      []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deselectAll : da               (bool)          [create,edit]
          Deselect all items.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Specify the command to be executed when an item is double clicked.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragFeedbackVisible : dfv      (bool)          []
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - dropRectCallback : drc         (script)        [edit]
          Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of
          the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the
          callback is of the form: global proc int[] callbackName(string $dropControl, int $x, int $y) The return value is an
          array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn,
          followed by the width and height. This functionality is currently only implemented in MEL.
    
      - editIndexed : ei               (int)           []
    
      - editable : ed                  (bool)          []
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - itemAt : ia                    (int, int)      [query]
          Return the name of the item, if any, located at given point
    
      - itemTextColor : itc            (int, float, float, float) [create,edit]
          Set the text color of the item at the given index. Arguments are: index, red, green, and blue. Indices are 1-based. Each
          color component ranges in value from 0.0 to 1.0.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfIcons : nic            (int)           []
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfRows : nr              (bool)          [query]
          Number of visible rows.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - removeAll : ra                 (bool)          [create,edit]
          Remove all items.
    
      - selectCommand : sc             (script)        [create,edit]
          Specify the command to be executed when an item is selected.
    
      - selectIndexedItem : sii        (int)           [create,query,edit]
          Select the indexed item. Indices are 1-based.
    
      - selectItem : si                (unicode)       [create,query,edit]
          Select the item that contains the specified text.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - visualRectAt : vra             (int, int)      [query]
          Return the visual rectangle of the item, if any, located at given point. The result is a an array of 4 integers, in
          local coordinates, describing the rectangle, in the following order: left, top, width, height.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iconTextScrollList`
    """

    pass


def hyperGraph(*args, **kwargs):
    """
    The following is an overview of the basic features of the hypergraph. A more detailed description is given in the user
    manuals. The hypergraph provides the user with the ability to view and edit the maya scene graph.  The hypergraph
    supports two types of graphs: the DAG or scene hierarchy and the dependency graph. The default view of the hypergraph
    editor is the DAG view. The user can show the dependency graph for a collection of nodes by first selecting the nodes
    and navigating to the dependency graph using one of the graph options.  The user can save any view by setting a bookmark
    to that view.  The user can also show previous views using the view options provided. The hypergraph supports a simple
    editing mechanism for editing hierarchy in the DAG view and connections in dependency graph view. In the DAG  view, the
    user can reparent or reorder nodes in the graph using drag-and-drop. In the dependency graph view, the user can select
    connections and delete them or make new connections by dragging and dropping nodes or existing connections. The
    hypergraph supports two layout modes in the DAG view: automatic and freeform.  In automatic mode, the graph nodes are
    automatically positioned according to the layout preferences.  In freeform mode, the user can position nodes manually.
    The node position is saved in the scene. A background image can be placed behind DG or DAG in freeform mode. This can be
    used as a template for positioning nodes in a user-defined layout. Nodes in the DAG view can be expanded or collapsed.
    The state is saved in the scene.  The performance of the graph drawing will increase as hierarchies are collapsed. In
    addition to hierachy relationships, the hypergraph can show expression, constraint and deformation relationships in the
    DAG. These can be enabled/disabled through the options provided.  There are also additional filters for showing shape
    nodes and invisible nodes.  The amount of detail show may affect the speed of the display of the graph. Most of the UI
    features of the hypergraph are addressable through the hypergraph command-line interface.  The available command-line
    options are described in the next section.
    
    Flags:
      - addBookmark : abk              (bool)          [create,edit]
          Create a bookmark for the current hypergraph view.
    
      - addDependGraph : adg           (PyNode)        [create,edit]
          Add a dependency graph starting at the named node to the view
    
      - addDependNode : adn            (PyNode)        [create,edit]
          Add a dependency node to the dependency graph view
    
      - animateTransition : atr        (bool)          [create,query,edit]
          Turns animate transitions off and on.
    
      - attributeEditor : ae           (unicode)       [create,edit]
          Launches attribute editor on selected node.
    
      - backward : bak                 (bool)          []
    
      - bookmarkName : bn              (bool)          [query]
          Returns the bookmark name for the most recently created bookmark.
    
      - breakConnectionCommand : bco   (unicode)       []
    
      - clear : clr                    (bool)          [create,edit]
          Clears the current hypergraph view and deletes the graph UI. (see also -rebuild flag)
    
      - collapseContainer : cc         (bool)          [create,edit]
          Collapses containers selected in DG graph.
    
      - connectionDrawStyle : cds      (unicode)       [create,edit]
          Specify how connections between nodes should be drawn. Valid values are center(draws connection lines from the center of
          one node to the center of the other) and side(draws connection lines from the right side of the source node to the left
          side of the destination node). The default is center. This flag does not apply to Hypershade graphs, which are always
          drawn with the sideconnection draw style.
    
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - currentEdge : ced              (unicode)       []
    
      - currentNode : cno              (unicode)       []
    
      - debug : deb                    (unicode)       []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteBookmark : dbk           (unicode)       [create,edit]
          Delete the bookmark with the corresponding node name.
    
      - dependGraph : dg               (bool)          [create,edit]
          Displays dependency graph iterated from specified node.
    
      - dependNode : dn                (unicode)       [create,edit]
          Displays dependency node in view.
    
      - directoryPressCommand : dp     (unicode)       []
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - down : do                      (bool)          [create,edit]
          Navigate down to the dependency graph containing the current selection. Shows upstream and downstream connections.
    
      - downstream : ds                (bool)          [create,edit]
          Show downstream dependency graph of selected node(s).
    
      - dragAndDropBehaviorCommand : ddc (unicode)       [create,edit]
          Mel proc called when a drag and drop onto a hyperGraph node has occurred. Proc signature is procName (string $editor,
          string $sourceNode, string $destinationNode).
    
      - dropNode : dr                  (unicode)       [query]
          Returns the name of the source node in a drag and drop connection, when called during processing of a drop.
    
      - dropTargetNode : drt           (unicode)       [query]
          Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.
    
      - edgeDblClickCommand : edc      (unicode)       [create,edit]
          Mel proc called when an edge is double clicked.  Proc signature is procName (string $editor, string $edge).
    
      - edgeDimmedDblClickCommand : edd (unicode)       [create,edit]
          Mel proc called when a dimmed edge is double clicked.  Proc signature is procName (string $editor, string $edge).
    
      - edgeDropCommand : edr          (unicode)       []
    
      - edgePressCommand : ep          (unicode)       []
    
      - edgeReleaseCommand : er        (unicode)       []
    
      - enableAutomaticLayout : eal    (bool)          [create,edit]
          Rebuild the graph if a node is added or removed from the graph via drag and drop or dg messages. Default is true.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - expandContainer : ec           (bool)          [create,edit]
          Expands containers selected in DG graph.
    
      - feedbackGadget : fbg           (unicode)       [query]
          Returns the name of the current gadget.
    
      - feedbackNode : fbn             (unicode)       [query]
          Returns the name of the current feedback or highlight node.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - filterDetail : fd              (unicode, bool) [create,edit]
          This flag is obsolete. Use the showConstraints, showExpressions, showDeformer, showInvisible, showShapes and
          showUnderworld flags instead.
    
      - fitImageToHeight : fih         (bool)          [create]
          Changes position and scale of background image, so its height fits current editor view.
    
      - fitImageToWidth : fiw          (bool)          [create]
          Changes position and scale of background image, so its width fits current editor view.
    
      - focusCommand : fc              (unicode)       [create,edit]
          Mel proc to be run when the mouse is clicked in the hyper graph. Primarily of use in setting the window focus.
    
      - fold : fo                      (bool)          [create,edit]
          Folds (Collapses) selected object.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - forceRefresh : frf             (bool)          [create,edit]
          Forces the hypergraph to refresh (redraw) its contents.
    
      - forward : fow                  (bool)          []
    
      - frame : fr                     (bool)          [create,edit]
          Frames the selected objects
    
      - frameBranch : frb              (bool)          [create,edit]
          Frames the the branch from the selected node on downward.
    
      - frameGraph : fg                (bool)          [create,edit]
          Frames the entire graph.
    
      - frameGraphNoRebuild : fgn      (bool)          []
    
      - frameHierarchy : frh           (bool)          [create,edit]
          Frames the hierarchy that contains the selected node.
    
      - freeform : fre                 (bool)          [create,query,edit]
          Enable freeform layout mode.
    
      - fromAttr : fat                 (unicode)       [query]
          Returns the name of the source attribute in a drag and drop connection, when called during processing of a drop.
    
      - fromNode : frn                 (unicode)       []
    
      - getNodeList : gnl              (bool)          [query]
          Returns a string array that represents a list of all the nodes in the graph.
    
      - getNodePosition : gnp          (unicode)       [query]
          Returns the position of a specified node in x,y graph coords. This flag and its argument must be passed to the command
          before the -q flag (see examples).       In query mode, this flag can accept a value.
    
      - graphDescription : gd          (bool)          []
    
      - graphLayoutStyle : gls         (unicode)       [create,query,edit]
          This flag is obsolete.  The only supported graph layout style is hierarchicalLayout. Use of any other style will trigger
          a warning.
    
      - graphType : gt                 (unicode)       [query]
          Returns the type name of the current graph in the view (either DAG or DG).
    
      - heatMapDisplay : hmd           (bool)          []
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - iconSize : ics                 (unicode)       [create,query,edit]
          Set or query the icon size for this hyper graph editor. The currently allowed icon sizes are smallIcons, mediumIcons,
          largeIconsand superIcons.
    
      - image : img                    (unicode)       [create,query,edit]
          Specify background image to be loaded from the project image directory.
    
      - imageEnabled : ime             (bool)          [create,query,edit]
          Enable display of a loaded background image (Freeform DAG view or DG view)
    
      - imageForContainer : ifc        (bool)          [create,query,edit]
          Specify that the following flags work on selected containers instead of the whole image: -imageScale,-imagePosition,
          fitImageToWidth, -fitImageToHeight, -image
    
      - imagePosition : imp            (float, float)  [create,query,edit]
          Position of the background image.
    
      - imageScale : ims               (float)         [create,query,edit]
          Uniform scale of the background image.
    
      - initializeScript : ini         (unicode)       []
    
      - isHotkeyTarget : iht           (bool)          [query]
          For internal use.
    
      - layout : lay                   (bool)          [create,edit]
          Perform an automatic layout on the graph.
    
      - layoutSelected : lsl           (unicode)       [create,edit]
          This flag is obsolete.  The only supported graph layout style is hierarchicalLayout. Use of any other style will trigger
          a warning.
    
      - layoutSubtree : lsb            (bool)          []
    
      - limitGraphTraversal : lgt      (int)           []
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - look : loo                     (float, float)  [create,edit]
          Look at a coordinate in the graph view
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - mergeConnections : mc          (bool)          [create,query,edit]
          Merge groups of connections into 'fat' connections.
    
      - navigateHome : hom             (bool)          [create,edit]
          Navigate to the home (DAG) view.
    
      - navup : nu                     (bool)          []
    
      - newInputConnection : nin       (unicode)       []
    
      - newOutputConnection : nou      (unicode)       []
    
      - nextView : nvw                 (bool)          [create,edit]
          Changes the view to the next DAG view.
    
      - nodeConnectCommand : nco       (unicode)       []
    
      - nodeDblClickCommand : ndc      (unicode)       []
    
      - nodeDropCommand : ndr          (unicode)       [create,edit]
          Set the command to be called when a node is dropped in the hypergraph window.
    
      - nodeMenuCommand : nm           (unicode)       []
    
      - nodePressCommand : np          (unicode)       [create,edit]
          Set the command to be called when the user presses a mouse button while the cursor is over a node in the hypergraph
          window.
    
      - nodeReleaseCommand : nr        (unicode)       [create,edit]
          Set the command to be called when the user releases a mouse button while the cursor is over a node in the hypergraph
          window.
    
      - opaqueContainers : opc         (bool)          [query,edit]
          Sets expanded container background opacity.
    
      - orientation : orientation      (unicode)       [create,query,edit]
          Selects orientation style of graph: horiz|vert
    
      - panView : pan                  (float, float)  []
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - popupMenuScript : pms          (unicode)       [create,edit]
          Set the script to be called to register the popup menu with the control for this hypergraph. The script will be called
          with a string argument which gives the name of the hypergraph whose control the popup menu should be parented to.
    
      - previousView : pvw             (bool)          [create,edit]
          Changes the view back to the previous DAG view.
    
      - range : rg                     (float, float)  [create,query,edit]
          Limits the display of nodes to only those within the range. There are two float values expected, the first the lower
          threshold of the range and the second the upper threshold of the range. The values are absolute timing values, not
          percentages.
    
      - rebuild : rb                   (bool)          [create,edit]
          Rebuilds graph
    
      - removeNode : rmn               (unicode)       [create,edit]
          Removes the node identified by string from the graph.
    
      - rename : rn                    (bool)          [create,edit]
          Pops up text field over selected object for renaming
    
      - resetFreeform : rf             (bool)          [create,edit]
          Resets freeform position on all nodes.
    
      - restoreBookmark : rbk          (unicode)       [create,edit]
          Restore the view corresponding to the bookmark.
    
      - scrollUpDownNoZoom : snz       (bool)          [create,edit]
          Specify if we want to be in the scroll along y only with no free zooming mode. By default, hyper graph editor allows
          user to pan left and right.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - setNodePosition : snp          (unicode, float, float) [create,edit]
          Sets the node identified by string to the (x,y) position in the window specified by the two floats. If the node is not
          in the graph than it will be added to the graph and then moved to the new position.
    
      - showCachedConnections : scc    (bool)          []
    
      - showConnectionFromSelected : scf (bool)          [create,query,edit]
          Show the connects (constraints, expresions, and deformers - see showConstraints for example) leaving from selected
          nodes. This can be combined with showConnectionToSelected to show both arrive and leaving connects. If both flags are
          false then all the connections will be shown.
    
      - showConnectionToSelected : sct (bool)          [create,query,edit]
          Show the connects (constraints, expresions, and deformers - see showConstraints for example) arriving at selected nodes.
          This can be combined with showConnectionFromSelected to show both arrive and leaving connects. If both flags are false
          then all the connections will be shown.
    
      - showConstraintLabels : scl     (bool)          []
    
      - showConstraints : shc          (bool)          [create,query,edit]
          Show constraint relationships in the DAG.
    
      - showDeformers : shd            (bool)          [create,query,edit]
          Show deformer or geometry filter relationships in the DAG.
    
      - showExpressions : shx          (bool)          [create,query,edit]
          Show expression relationships in the DAG.
    
      - showInvisible : shi            (bool)          [create,query,edit]
          Show invisible nodes in the DAG.
    
      - showRelationships : shr        (bool)          [create,query,edit]
          Show relationship (message) connections.
    
      - showShapes : shs               (bool)          [create,query,edit]
          Show shape nodes in the DAG.
    
      - showUnderworld : shu           (bool)          [create,query,edit]
          Show underworld graphs in the DAG.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - toAttr : tat                   (unicode)       []
    
      - toNode : ton                   (unicode)       []
    
      - transitionFrames : tfr         (int)           [create,query,edit]
          Specify te number of transition frames for animate transitions.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unfold : uf                    (bool)          [create,edit]
          Unfolds (expands) selected object.
    
      - unfoldAll : ua                 (bool)          [create,edit]
          Unfolds everything under selected object.
    
      - unfoldAllShapes : uas          (bool)          []
    
      - unfoldHidden : ufh             (bool)          []
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - updateNodeAdded : una          (bool)          [create,query,edit]
          Update graph when a new node is added to the database
    
      - updateSelection : us           (bool)          [create,query,edit]
          Update selection state in the graph when the selection state of database changes.
    
      - upstream : ups                 (bool)          [create,edit]
          Show upstream dependency graph of selected node(s).
    
      - useDrawOverrideColor : drc     (bool)          []
    
      - useFeedbackList : ufl          (bool)          [create,query,edit]
          Use feedback or highlight list as the target selection when processing other hypergraph command-line options.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - viewOption : vo                (unicode)       [create,query,edit]
          Set or query the view option for this hyper graph editor. The currently allowed views are asIconsand asList.
    
      - visibility : vis               (bool)          [create,edit]
          Set the visible state of the selected node(s).
    
      - zoom : zm                      (float)         [create,edit]
          Specify the zoom factor for animating transitions                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.hyperGraph`
    """

    pass


def animDisplay(*args, **kwargs):
    """
    This command changes certain display options used by animation windows. In query mode, return type is based on queried
    flag.
    
    Flags:
      - modelUpdate : upd              (unicode)       [create,query,edit]
          Controls how changes to animCurves are propagated through the dependency graph. Valid modes are none, interactiveor
          delayed. If modelUpdate is nonethen changing an animCurve will not cause the model to be updated (change currentTime in
          order to update the model).  If modelUpdate is interactive(which is the default setting), then as interactive changes
          are being made to the animCurve, the model will be updated.  If modelUpdate is delayed, then the model is updated once
          the final change to an animCurve has been made.  With modelUpdate set to either interactiveor delayed, changes to
          animCurves made via commands will also cause the model to be updated.
    
      - refAnimCurvesEditable : rae    (bool)          [create,query,edit]
          Specify if animation curves from referenced files are editable.
    
      - timeCode : tc                  (bool)          [create,query,edit]
          Controls whether the animation windows (time slider, graph editor and dope sheet) use time codes in their displays.
    
      - timeCodeOffset : tco           (unicode)       [create,query,edit]
          This flag has now been deprecated.  It still exists to not break legacy scripts, but it will now do nothing.  See the
          new timeCode command to set and query timeCodes.                  Flag can have multiple arguments, passed either as a
          tuple or a list.
    
    
    Derived from mel command `maya.cmds.animDisplay`
    """

    pass


def toolBar(*args, **kwargs):
    """
    Create a toolbar. Tool bars are movable panel that contains a set of controls. They are placed in the tool bar area
    around the central control in a main window. Tool bars can be moved inside their current area, moved into new areas and
    floated.
    
    Flags:
      - allowedArea : aa               (unicode)       [create,query,edit]
          Areas where the dock control may be placed. Valid values are top, left, bottom, rightand all.  The default is all.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - area : a                       (unicode)       [create,query,edit]
          The initial dock area for this dock control. Valid values are top, left, bottomand right. This is a required flag.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - content : con                  (unicode)       [create,query]
          The name of the control that is a content of this dock control. This is a required flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          The label text.  The default label is the name of the control.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.toolBar`
    """

    pass


def image(*args, **kwargs):
    """
    This command creates a static image for non-xpm files. Any image file format supported by the file texture node is
    supported by this command.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - image : i                      (unicode)       [create,query,edit]
          Sets the image given the file name.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.image`
    """

    pass


def tabLayout(*args, **kwargs):
    """
    This command creates a tab group. Tab groups are a specialized form of control layouts that contain only control
    layouts. Whenever a control layout is added to a tab group it will have a tab provided for it that allows selection of
    that group from amongst other tabbed control groups. Only one child of a tab layout is visible at a time.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - borderStyle : bs               (unicode)       [create,query,edit]
          Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use
          fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the
          tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top)
          of the tab layoutfull- Draw a simple frame around the body area of the tab layout
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-
          selecting the current tab will not invoke this command.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - childResizable : cr            (bool)          [create,query]
          Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a
          minimum width for the child using the -mcw/minChildWidthflag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click
          will execute the double click command.  Double clicking the current tab will re-invoke the double click command.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontalScrollBarThickness : hst (int)           [create,edit]
          Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect
          on Windows systems.
    
      - image : i                      (unicode)       [create,query,edit]
          Image appearing in top right corner of tab layout.
    
      - imageVisible : iv              (bool)          [create,query,edit]
          Visibility of tab image.
    
      - innerMarginHeight : imh        (int)           [create,query]
          Margin height for all tab children.
    
      - innerMarginWidth : imw         (int)           [create,query]
          Margin width for all tab children.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - minChildWidth : mcw            (int)           [create,query]
          Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has
          meaning when the -cr/childResizableflag is set to true.
    
      - moveTab : mt                   (int, int)      [create,edit]
          Move the tab from the current index to a new index.
    
      - newTabCommand : ntc            (script)        [create,edit]
          Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use
          the -snt/showNewTabflag.  Using this command will override any internal Maya logic for adding a new tab (only this
          command will be executed).
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preSelectCommand : psc         (script)        [create,edit]
          Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not
          invoke this command.  Note that this command is not executed by using either of the -st/selectTabor
          -sti/selectTabIndexflags.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - scrollable : scr               (bool)          [create,query]
          Puts all children of this layout within a scroll area.
    
      - scrollableTabs : stb           (bool)          [create,query,edit]
          If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.
    
      - selectCommand : sc             (script)        [create,query,edit]
          Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-
          selecting the current tab will invoke this command.  Note that this command is not executed by using either of the
          -st/selectTabor -sti/selectTabIndexflags.
    
      - selectTab : st                 (unicode)       [create,query,edit]
          The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.
    
      - selectTabIndex : sti           (int)           [create,query,edit]
          Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is
          returned on query if there are not child tabs.
    
      - showNewTab : snt               (bool)          [create,query,edit]
          Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the
          -ntc/newTabCommandflag to set the command executed when this button is clicked.
    
      - tabLabel : tl                  (unicode, unicode) [create,query,edit]
          Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second
          argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the
          children are returned.
    
      - tabLabelIndex : tli            (int, unicode)  [create,query,edit]
          Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label
          for. If this flag is queried the tab labels for all the children are returned.
    
      - tabsClosable : tc              (bool)          [create,query]
          Set to true if you want to have a close button icon on all created tabs.
    
      - tabsVisible : tv               (bool)          [create,query,edit]
          Visibility of the tab labels.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - verticalScrollBarThickness : vst (int)           [create,edit]
          Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect
          on Windows systems.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.tabLayout`
    """

    pass


def progressBar(*args, **kwargs):
    """
    Creates a progress bar control that graphically fills in as its progress value increases.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - beginProgress : bp             (bool)          [create,edit]
          Only valid for the main progress barShows the main progress bar (normally in the Help Line). This is normally issued
          through MEL when a length computation is about to occur.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - endProgress : ep               (bool)          [edit]
          Only valid for the main progress barHides the progress bar. No other flags can be used at the same time. This is
          normally issued through MEL in response to the -ic/isCancelled flag being set or if the progress value reaches its
          maximum.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isCancelled : ic               (bool)          [query]
          Returns true if the user has tried to cancel the operation. Returns false otherwise.
    
      - isInterruptable : ii           (bool)          [create,query,edit]
          Only valid for the main progress barReturns true if the isCancelled flag should respond to attempts to cancel the
          operation. Setting this to true will add a note in the help line display message to the user indicating that they can
          cancel the operation.
    
      - isMainProgressBar : imp        (bool)          [create,query,edit]
          Determines whether this progressBar is used to show the progress of all basic operations such as Open/Save file.The main
          progressBar behaves very differently, in that it only shows itself when there is an ongoing basic operation.Defaults to
          false, and only one progress bar will be recognized as the mainone.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          The maximum or endingvalue of the progress indicator. If the progress value is greater than the -max/maxValue, the
          progress value will be set to the maximum. Default value is 100.
    
      - minValue : min                 (int)           [create,query,edit]
          The minimum or startingvalue of the progress indicator. If the progress value is less than the -min/minValue, the
          progress value will be set to the minimum. Default value is 0.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - progress : pr                  (int)           [create,query,edit]
          The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to
          the minimum when the control is created.
    
      - status : st                    (unicode)       [create,query,edit]
          Only valid for the main progress barSets the contents of the helpLine control when the progressBar is showing. Use this
          instead of setting the helpLine directly because this will force a graphical refresh before returning.
    
      - step : s                       (int)           [edit]
          Increments the -pr/progress value by the amount specified.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.progressBar`
    """

    pass


def outlinerPanel(*args, **kwargs):
    """
    This command creates, edit and queries outliner panels which contain only an outliner editor.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - outlinerEditor : oe            (bool)          [query]
          This flag returns the name of the outliner editor contained by the panel.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.outlinerPanel`
    """

    pass


def blendShapeEditor(*args, **kwargs):
    """
    This command creates an editor that derives from the base editor class that has controls for blendShape, control nodes.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - targetControlList : tcl        (bool)          [query]
    
      - targetList : tl                (bool)          [query]
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - verticalSliders : vs           (bool)          [create,query,edit]
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.blendShapeEditor`
    """

    pass


def channelBox(*args, **kwargs):
    """
    This command creates a channel box, which is sensitive to the active list.  It displays certain attributes (channels) of
    the last node on the active list, and provides a two-way connection to keep the widget up to date. Note: when setting
    the color of attribute names, that color is only valid for its current Maya session; each subsequent session will
    display the default color for the attribute name(s) listed in the Channel Box. Any subsequent attributes that are added
    to the Channel Box will be affected by prior regular expressions in their current Maya session.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - attrBgColor : bc               (float, float, float) [create,query,edit]
          Controls the background text color of specific attribute names. As with the foreground option, this text coloring also
          depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color
          components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of
          \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed
          will have their node name coloring be affected in the channel box.
    
      - attrColor : ac                 (float, float, float) [create,query,edit]
          Controls the foreground text color of specific attribute names. This text coloring also depends on the node name choice
          for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in
          value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same
          idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be
          affected in the channel box.
    
      - attrFilter : af                (unicode)       [query,edit]
          Specifies the name of an itemFilter object to be placed on the channel box. This filters the attributes displayed. A
          filter of 0can be used to reset the filter.
    
      - attrRegex : ar                 (unicode)       [create,query,edit]
          Specifies a valid regular expression to specify which attribute names should be selected for foreground text coloring.
          If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously
          applies to the flag nodeRegex. The attrColor flag is required to be specified. Note: this regular expression will be
          treated as though it were case-insensitve
    
      - attributeEditorMode : aem      (bool)          [query,edit]
          Modifies what appears in the channel box for use in the attribute editor. Default is false. Queried, returns a boolean.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - containerAtTop : cat           (bool)          [query,edit]
          This flag can be used to specify whether or not the container is drawn at the top of the channel box when a node in the
          container is selected.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enableLabelSelection : els     (bool)          [query,edit]
          Enables the selection of attributes in the channelBox when used in conjunction with -attributeEditorMode. Default is
          false.  Queried, returns a boolean.
    
      - execute : exe                  (unicode, bool) [edit]
          Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in
          the channel box, for every matching selected object (ie, for every object would be affected if you changed a cell
          value.)  Before the command is executed, #Ais substituted with the name of the attribute, and #Nwith the name of the
          node, and #Pwith the full path name of the node.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fieldWidth : fw                (int)           [query,edit]
          An optional flag which is used to modify the width assigned to fields appearing in the channelBox.
    
      - fixedAttrList : fal            (<type 'unicode'>, ...) [create,query,edit]
          Forces the channel box to only display attributes with the specified names, in the order they are specified.  If an
          empty list is specified, then the channel box will revert to its default behaviour of listing all keyable attributes.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - historyObjectList : hol        (bool)          [query]
          Returns a list of strings, the names of every INPUT node associated with an object on the main object list that is of
          the same type as the node displayed in the INPUT section of the channel box.
    
      - hyperbolic : hyp               (bool)          [create,query,edit]
          Determines whether or not the distance that the mouse has been dragged should be interpreted as a linear or hyperbolic
          function.  The default is set to hyperbolic being false.
    
      - inputs : inputs                (bool)          [query]
          Returns the items shown under the 'INPUTS' heading in the channel box.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - labelWidth : lw                (int)           [query,edit]
          An optional flag which is used to modify the width assigned to labels appearing in the channelBox.
    
      - longNames : ln                 (bool)          [query,edit]
          Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the
          -niceNames flag is set.  Default is short names. Queried, returns a boolean.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object which the editor will use as its source of content.  The channel box
          will only display the (last) item contained in the selectionConnection object. If a NULL string () is specified, then
          the channel box will revert to its default behaviour of working on the active list.
    
      - mainObjectList : mol           (bool)          [query]
          Returns a list of strings, the names of every object on the active list that is the same type as the object displayed in
          the top (main) section of the channel box.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxHeight : mh                 (int)           [query,edit]
          An optional flag which is used to limit the height of the channelBox.
    
      - maxWidth : mw                  (int)           [query,edit]
          An optional flag which is used to limit the width of the channelBox.
    
      - niceNames : nn                 (bool)          [query,edit]
          Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the
          longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the
          longNames flag. Default is on. Queried, returns a boolean.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - nodeRegex : nr                 (unicode)       [create,query,edit]
          Specifies a valid regular expression to specify which node names should (potentially) have their attributes selected for
          foreground text coloring. If nodeRegex is unspecified then it will assume a value of \*' for a regular expression. The
          same idea simultaneously applies to the flag attrRegex. The attrColor flag is required to be specified. Note: this
          regular expression will be treated as though it were case-insensitve Note: nodes in namespaces have regular expressions
          applied as though those nodes weren't in namespaces
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - outputObjectList : ool         (bool)          [query]
          Returns a list of strings, the names of every OUTPUT node associated an object on the main object list that is of the
          same type as the node displayed in the OUTPUT section of the channel box.
    
      - outputs : out                  (bool)          [query]
          Returns the items shown under the 'OUTPUTS' heading in the channel box.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - precision : pre                (int)           [query,edit]
          Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels.
          Default is 3.  Queried, returns an int.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - select : s                     (bool)          [edit]
          Allows programmatic selection of items (nodes or plugs) in the channel box. Selection is equivalent to clicking the item
          with the mouse; therefore only items currently shown in the channel box can be selected this way.
    
      - selectedHistoryAttributes : sha (bool)          [query]
          Returns a list of strings, the names of all the selected attributes in the INPUT section of the channel box.
    
      - selectedMainAttributes : sma   (bool)          [query]
          Returns a list of strings, the names of all the selected attributes in the top section of the channel box.
    
      - selectedOutputAttributes : soa (bool)          [query]
          Returns a list of strings, the names of all the selected attributes in the OUTPUT section of the channel box.
    
      - selectedShapeAttributes : ssa  (bool)          [query]
          Returns a list of strings, the names of all the selected attributes in the middle (shape) section of the channel box.
    
      - shapeObjectList : sol          (bool)          [query]
          Returns a list of strings, the names of every shape associated with an object on the main object list that is of the
          same type as the object displayed in the middle (shape) section of the channel box.
    
      - shapes : shp                   (bool)          [query]
          Returns the items shown under the 'SHAPES' heading in the channel box.
    
      - showNamespace : sn             (bool)          [create,query,edit]
          Controls whether or not the namespace of an object is displayed if the object is not in the root namespace.
    
      - showTransforms : st            (bool)          [query,edit]
          Controls whether this control will display transform attributes only, or all other attributes. False by default.
          Queried, returns a boolean.
    
      - speed : spd                    (float)         [create,query,edit]
          Controls the speed at which the attributes are changed based on the distance the mouse has been dragged.  Common
          settings for slow/medium/fast are 0.1/1.0/10.0 respectively.  The default is 1.0.
    
      - takeFocus : tf                 (bool)          [edit]
          causes the channel box to take over the keyboard focus, if it can.
    
      - update : u                     (bool)          [edit]
          This flag can be used to force an update of the channel box display, for example after changing a display preference.
    
      - useManips : mnp                (unicode)       [create,query,edit]
          When you click on a field or label in the channel box, the tool switches to a manipulator that can change that value if
          you drag in the 3d view.  This flag controls the kind of manips.  Allowed values are none(self-explanatory),
          invisible(you won't see anything, but dragging in the window will adjust any of the selected attributes), and
          standard(the same as invisible, except for scale, rotate, and translate, which will be represented by their usual
          manips.)
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.channelBox`
    """

    pass


def canCreateCaddyManip(*args, **kwargs):
    """
    This command returns true if there can be a manipulator made for the specified selection, false otherwise.
    
    
    Derived from mel command `maya.cmds.canCreateCaddyManip`
    """

    pass


def textScrollList(*args, **kwargs):
    """
    This command creates/edits/queries a text scrolling list. The list can be in single select mode where only one item at
    at time is selected, or in multi-select mode where many items may be selected. Note: The -dgc/dragCallback flag works
    only on Windows.
    
    Modifications:
      - returns an empty list when the result is None for flags: (query and (selectIndexedItem or allItems or selectItem))
    
    Flags:
      - allItems : ai                  (bool)          [query]
          All the items.
    
      - allowAutomaticSelection : aas  (bool)          [create,query,edit]
          Specify automatic selection mode.  When automaticSelection is on each item that the mouse is over (during dragging once
          an item has been selected) will be selected.  Thus, if -sc/selectCommand someCommandis set, someCommandwill be called
          for each selected item. If -aas/allowAutomaticSelectionis off, then only the item selected when the mouse button is up
          will be the selected item, so -sc/selectCommand someCommandis only called once if it is set.
    
      - allowMultiSelection : ams      (bool)          [create,query,edit]
          Specify multi or single selection mode.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - append : a                     (unicode)       [create,edit]
          Add an item to the end of the list.
    
      - appendPosition : ap            (int, unicode)  [create,edit]
          Append an item at the specified position. The position is a 1-based index.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - deleteKeyCommand : dkc         (script)        [create,edit]
          Specify the command to be executed when the delete or backspace key is pressed.
    
      - deselectAll : da               (bool)          [create,edit]
          Deselect all items.
    
      - deselectIndexedItem : dii      (int)           [create,edit]
          Deselect the indexed item.  Indices are 1-based.
    
      - deselectItem : di              (unicode)       [create,edit]
          Deselect the item that contains the specified text.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - doubleClickCommand : dcc       (script)        [create,edit]
          Specify the command to be executed when an item is double clicked.
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the list items.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - lineFont : lf                  (int, unicode)  [create,edit]
          Specify the font for a specific line of the list. The indices are 1-based. Valid font values are boldLabelFont,
          smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont,
          fixedWidthFontand smallFixedWidthFont.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfItems : ni             (bool)          [query]
          Number of items.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfRows : nr              (int)           [create,query,edit]
          Number of visible rows.
    
      - numberOfSelectedItems : nsi    (bool)          [query]
          Number of selected items.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - removeAll : ra                 (bool)          [create,edit]
          Remove all items.
    
      - removeIndexedItem : rii        (int)           [create,edit]
          Remove the indexed item. Indices are 1-based.
    
      - removeItem : ri                (unicode)       [create,edit]
          Remove the item with the specified text.
    
      - selectCommand : sc             (script)        [create,edit]
          Specify the command to be executed when an item is selected.
    
      - selectIndexedItem : sii        (int)           [create,query,edit]
          Select the indexed item. Indices are 1-based.
    
      - selectItem : si                (unicode)       [create,query,edit]
          Select the item that contains the specified text.
    
      - selectUniqueTagItem : sut      (unicode)       [create,query,edit]
          Allow item selections based on the unique tag. In query mode, it will return the unique tag of the selected items.
    
      - showIndexedItem : shi          (int)           [create,edit]
          Show the indexed item.  Scroll the list as necessary so that the indexed item is visible.  Indices are 1-based.
    
      - uniqueTag : utg                (unicode)       [create,edit]
          This flag can only be used in conjunction with the append or the appendPosition flag. The string specifies a unique tag
          for the appended item; the tag can then be used to query an item. This tag provides an alternate way to uniquely
          identify a list item using a string instead of by index. Tags are case insensitive.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textScrollList`
    """

    pass


def clipSchedulerOutliner(*args, **kwargs):
    """
    This command creates/edits/queries a clip scheduler outliner control.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - clipScheduler : cs             (unicode)       [edit]
          Name of the clip scheduler for which to display information.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipSchedulerOutliner`
    """

    pass


def lsUI(**kwargs):
    """
    This command returns the names of UI objects.
    
    Modified:
      - long defaults to True
      - if no type is passed, defaults to all known types
    
    Flags:
      - cmdTemplates : ct              (bool)          [create]
          UI command templates created using ELF UI commands.
    
      - collection : col               (bool)          [create]
          Control collections created using ELF UI commands.
    
      - contexts : ctx                 (bool)          [create]
          Tool contexts created using ELF UI commands.
    
      - controlLayouts : cl            (bool)          [create]
          Control layouts created using ELF UI commands [e.g. formLayouts, paneLayouts, etc.]
    
      - controls : ctl                 (bool)          [create]
          Controls created using ELF UI commands. [e.g. buttons, checkboxes, etc]
    
      - dumpWidgets : dw               (bool)          [create]
          Dump all QT widgets used by Maya.
    
      - editors : ed                   (bool)          [create]
          All currently existing editors.
    
      - head : hd                      (int)           [create]
          The parameter specifies the maximum number of elements to be returned from the beginning of the list of items. (Note:
          each flag will return at most this many items so if multiple flags are specified then the number of items returned will
          be greater than the value specified).
    
      - long : l                       (bool)          [create]
          Use long pathnames instead of short non-path names.
    
      - menuItems : mi                 (bool)          [create]
          Menu items created using ELF UI commands.
    
      - menus : m                      (bool)          [create]
          Menus created using ELF UI commands.
    
      - numWidgets : nw                (bool)          [create]
          Reports the number of QT widgets used by Maya.
    
      - panels : p                     (bool)          [create]
          All currently existing panels.
    
      - radioMenuItemCollections : rmc (bool)          [create]
          Menu item collections created using ELF UI commands.
    
      - tail : tl                      (int)           [create]
          The parameter specifies the maximum number of elements to be returned from the end of the list of items. (Note: each
          flag will return at most this many items so if multiple flags are specified then the number of items returned will be
          greater than the value specified).
    
      - type : typ                     (unicode)       [create]
          List all objects of a certain type specified by the string argument. For example, window, menu, control, or
          controlLayout.
    
      - windows : wnd                  (bool)          [create]
          Windows created using ELF UI commands.                  Flag can have multiple arguments, passed either as a tuple or a
          list.
    
    
    Derived from mel command `maya.cmds.lsUI`
    """

    pass


def textField(*args, **kwargs):
    """
    Create a text field control.
    
    Flags:
      - alwaysInvokeEnterCommandOnReturn : aie (bool)          [create,query,edit]
          Sets whether to always invoke the enter command when the return key is pressed by the user. By default, this option is
          false.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the text changes.  This command is not invoked when the value changes via the -tx/text flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - disableButtons : db            (bool)          [create,query,edit]
          Sets the visibility state of search field buttons to true/false depending on the passed value. In Query mode returns
          whether both buttons are visible or not.
    
      - disableClearButton : dcb       (bool)          [create,query,edit]
          Sets the visibility state of search field clear button to true/false depending on the passed value. In Query mode
          returns whether clear button of search field is visible or not.
    
      - disableHistoryButton : dhb     (bool)          [create,query,edit]
          Sets the visibility state of search field history button to true/false depending on the passed value. In Query mode
          returns whether history button of search field is visible or not.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - drawInactiveFrame : dif        (bool)          [create,query,edit]
          Sets whether the text field draws itself with a frame when it's inactive. By default, this option is false.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - editable : ed                  (bool)          [create,query,edit]
          The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.
          If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the
          -tx/text flag regardless of the state of the -ed/editable flag.
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - enterCommand : ec              (script)        [create,edit]
          Command executed when the keypad 'Enter' key is pressed.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fileName : fi                  (unicode)       [create,query,edit]
          Text in the field as a filename. This does conversions between internal and external (UI) file representation.
    
      - font : fn                      (unicode)       [create,query,edit]
          The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont,
          smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - insertText : it                (unicode)       [create,edit]
          Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
    
      - insertionPosition : ip         (int)           [create,query,edit]
          The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the
          field.  Position 0 may be used to specify the end of the field.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - placeholderText : pht          (unicode)       [create,query,edit]
          Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and
          the widget doesn't have focus. By default, this property contains an empty string.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - receiveFocusCommand : rfc      (script)        [create,edit]
          Command executed when the field receives focus.
    
      - searchField : sf               (bool)          [create]
          Creates a search field instead of a text field.
    
      - text : tx                      (unicode)       [create,query,edit]
          The field text.
    
      - textChangedCommand : tcc       (script)        [create,edit]
          Command executed immediately when the field text changes.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textField`
    """

    pass


def menuItem(*args, **kwargs):
    """
    This command creates/edits/queries menu items.
    
    Flags:
      - allowOptionBoxes : aob         (bool)          [create,query]
          Deprecated. All menus and menu items always allow option boxes. In the case of submenu items this flag specifies whether
          the submenu will be able to support option box menu items. Always returns true.
    
      - altModifier : alt              (bool)          [create,query,edit]
          Specify this flag if the Alt modifier is part of the accelerator sequence.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the menu item with an extra string value.
    
      - boldFont : bld                 (bool)          [create,query]
          Specify if text should be bold. Only supported in menus which use the marking menu implementation.  Default is false for
          Windows, and true for all other platforms.
    
      - checkBox : cb                  (bool)          [create,query,edit]
          Creates a check box menu item.  Argument specifies the check box value.
    
      - collection : cl                (unicode)       [create,query]
          To explicitly add a radio menu item to a radioMenuItemCollection.
    
      - command : c                    (script)        [create,query,edit]
          Attaches a command/script that will be executed when the item is selected. Note this command is not executed when the
          menu item is in an optionMenucontrol.
    
      - commandModifier : cmd          (bool)          [create,query,edit]
          Specify this flag if the command modifier is part of the accelerator sequence.  This is only available on systems which
          have a separate command key.
    
      - ctrlModifier : ctl             (bool)          [create,query,edit]
          Specify this flag if the Cntl modifier is part of the accelerator sequence.
    
      - data : da                      (int)           [create,query,edit]
          Attaches a piece of user-defined data to the menu item.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - divider : d                    (bool)          [create,query]
          Creates a divider menu item.
    
      - dividerLabel : dl              (unicode)       [create,query,edit]
          Adds a label to a divider menu item.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the menu item.
    
      - dragDoubleClickCommand : ddc   (script)        [create,query,edit]
          If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is double
          clicked.
    
      - dragMenuCommand : dmc          (script)        [create,query,edit]
          If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is clicked.
    
      - echoCommand : ec               (bool)          [create,query,edit]
          Specify whether the action attached with the c/commandflag should echo to the command output areas when invoked. This
          flag is false by default and must be specified with the c/commandflag.
    
      - enable : en                    (bool)          [create,query,edit]
          Enable state for the menu item.  A disabled menu item is dimmed and unresponsive.  An enabled menu item is selectable
          and has normal appearance.
    
      - enableCommandRepeat : ecr      (bool)          [create,query,edit]
          This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by
          executing the command repeatLast.  This flag is true by default for all items except for option box items.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - familyImage : fi               (unicode)       [query]
          Get the filename of the family icon associated with the menu. The family icon will be used for the shelf unless an icon
          is specified with the imageflag.
    
      - image : i                      (unicode)       [create,query,edit]
          The filename of the icon associated with the menu item.  If the menu containing the menu item is being edited with a
          menuEditor widget, then the menuEditor will use this icon to represent the menu item. This icon will be displayed on the
          shelf when the menu item is placed there.
    
      - imageOverlayLabel : iol        (unicode)       [create,query,edit]
          Specify a short (5 character) text string to be overlayed on top of the icon associated with the menu item. This is
          primarily a mechanism for differentiating menu items that are using a Family icon due to the fact that an icon image had
          not been explicitly defined. The image overlay label will not be used if an icon image is defined for the menu item.
    
      - insertAfter : ia               (unicode)       [create]
          Specify After which item the new one will be placed. If this flag is not specified, item is added at the end of the
          menu. Use the empty string to insert before the first item of the menu.
    
      - isCheckBox : icb               (bool)          [query]
          Returns true if the item is a check box item.
    
      - isOptionBox : iob              (bool)          [query]
          Returns true if the item is an option box item.
    
      - isRadioButton : irb            (bool)          [query]
          Returns true if the item is a radio button item.
    
      - italicized : itl               (bool)          [create,query]
          Specify if text should be italicized. Only supported in menus which use the marking menu implementation.  Default is
          false.
    
      - keyEquivalent : ke             (unicode)       [create,query,edit]
          Specify the accelerator character.  This character is combined with the modifier keys specified with the
          alt/altModifier, opt/optionModifier, ctl/ctlModifier, cmd/commandModifierand sh/shiftModifierto form the complete
          accelerator sequence that you can type to execute the menu item.  Note that only regular menu items, radio menu items
          and check box menu items can have an accelerator.
    
      - label : l                      (unicode)       [create,query,edit]
          The text that appears in the item.
    
      - longDivider : ld               (bool)          [create,query,edit]
          Indicate whether the divider is long or short. Has no effect if divider label is set. Default is true.
    
      - ltVersion : lt                 (unicode)       [create,query,edit]
          This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not
          specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and
          otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only
          accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).
    
      - mnemonic : mn                  (unicode)       []
    
      - optionBox : ob                 (bool)          [create,query]
          Indicates that the menu item will be an option box item.  This item will appear to the right of the preceeding menu
          item.
    
      - optionBoxIcon : obi            (unicode)       [create,query,edit]
          The filename of an icon to be used instead of the usual option box icon. The icon is searched for in the folder
          specified by the XBMLANGPATH environment variable. The icon can be any size, but will be resized to the standard 16x16
          pixels when drawn.
    
      - optionModifier : opt           (bool)          [create,query,edit]
          Specify this flag if the Alt (or option) modifier is part of the accelerator sequence.
    
      - parent : p                     (unicode)       [create]
          Specify the menu that the item will appear in.
    
      - postMenuCommand : pmc          (script)        [create,query,edit]
          Specify a script to be executed when the submenu is about to be shown.
    
      - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
          Indicate the pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the pmc/postMenuCommandis
          invoked everytime the sub menu is shown.
    
      - radialPosition : rp            (unicode)       [create,query,edit]
          The radial position of the menu item if it is in a Marking Menu.  Radial positions are given in the form of a cardinal
          direction, and may be N, NW, W, SW, S, SE, Eor NE.
    
      - radioButton : rb               (bool)          [create,query,edit]
          Creates a radio button menu item.  Argument specifies the radio button value.
    
      - shiftModifier : sh             (bool)          [create,query,edit]
          Specify this flag if the Shift modifier is part of the accelerator sequence.
    
      - sourceType : stp               (unicode)       [create,query,edit]
          Set the language type for a command script. Can only be used in conjunction with a command flag.  Without this flag,
          commands are assumed to be the same language of the executing script.  In query mode, will return the language of the
          specified command. Valid values are meland python.
    
      - subMenu : sm                   (bool)          [create,query]
          Indicates that the item will have a submenu. Subsequent menuItems will be added to the submenu until setParent -menuis
          called.  Note that a submenu item creates a menu object and consequently the menucommand may be used on the submenu
          item.
    
      - tearOff : to                   (bool)          [create,query]
          For the case where the menu item is a sub menu this flag will make the sub menu tear-off-able. Note that this flag has
          no effect on the other menu item types.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - version : ver                  (unicode)       [create,query,edit]
          Specify the version that this menu item feature was introduced. The argument should be given as a string of the version
          number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as
          2014).                  Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuItem`
    """

    pass


def saveViewportSettings(*args, **kwargs):
    """
    This command causes all the 3d views to save their settings as optionVar's. This is called automatically by the system
    when Maya exits.
    
    
    Derived from mel command `maya.cmds.saveViewportSettings`
    """

    pass


def confirmBox(title, message, yes="'Yes'", no="'No'", *moreButtons, **kwargs):
    """
    Prompt for confirmation.
    
    Parameters
    ----------
    title : str
        The title of the confirmation window
    message : str
        The message in the body of the window
    yes : str
        The label of the first/'yes' button
    no : str
        The label of the second/'no' button
    moreButtons : tuple of str
        strings indicating the labels for buttons beyond the second
    returnButton : boolean
        by default, if there are only two buttons, the return value is a boolean
        indicating whether the 'yes' button was pressed; if you wish to always
        force the label of the pressed button to be returned, set this to True
    kwargs : dict of objects
        keyword args to pass to the underlying confirmDialog call
    
    Returns
    -------
    result : bool or str
        by default, if there are only two buttons, the return value is a boolean
        indicating whether the 'yes' button was pressed; otherwise, if there
        were more than two buttons or the returnButton keyword arg was set to
        True, the name of the pressed button is returned (or the dismissString,
        as explained in the docs for confirmDialog)
    """

    pass


def hyperPanel(*args, **kwargs):
    """
    This command creates, edit and queries hypergraph panels which contain only a hypergraph editor.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels
          may not have controls at times.  This flag can return if no control is present.
    
      - copy : cp                      (unicode)       [edit]
          Makes this panel a copy of the specified panel.  Both panels must be of the same type.
    
      - createString : cs              (bool)          [edit]
          Command string used to create a panel
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the Maya panel.
    
      - editString : es                (bool)          [edit]
          Command string used to edit a panel
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - hyperEditor : he               (bool)          [query]
          This flag returns the name of the hypergraph editor contained by the panel.
    
      - init : init                    (bool)          [create,edit]
          Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
    
      - isUnique : iu                  (bool)          [query]
          Returns true if only one instance of this panel type is allowed.
    
      - label : l                      (unicode)       [query,edit]
          Specifies the user readable label for the panel.
    
      - menuBarVisible : mbv           (bool)          [create,query,edit]
          Controls whether the menu bar for the panel is displayed.
    
      - needsInit : ni                 (bool)          [query,edit]
          (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for
          initialization.  Used during file -new and file -open.
    
      - parent : p                     (unicode)       [create]
          Specifies the parent layout for this panel.
    
      - popupMenuProcedure : pmp       (script)        [query,edit]
          Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The
          procedure should take one string argument which is the panel's name.
    
      - replacePanel : rp              (unicode)       [edit]
          Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
    
      - tearOff : to                   (bool)          [query,edit]
          Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag
          will return if the panel has been torn off into its own window.
    
      - tearOffCopy : toc              (unicode)       [create]
          Will create this panel as a torn of copy of the specified source panel.
    
      - unParent : up                  (bool)          [edit]
          Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hyperPanel`
    """

    pass


def colorInputWidgetGrp(*args, **kwargs):
    """
    All of the group commands position their individual controls in columns starting at column 1.  The layout of each
    control (ie. column) can be customized using the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign,
    and -adj/adjustableColumnflags.  By default, columns are left aligned with no offset and are 100 pixels wide.  Only one
    column in any group can be adjustable. Create a color slider group consisting of a label, a color canvas, RGB and HSV
    sliders.  Clicking on the canvas will bring up the color editor.
    
    Flags:
      - adjustableColumn : adj         (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based
          index.  You may also specify 0 to turn off the previous adjustable column.
    
      - adjustableColumn2 : ad2        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly two columns.
    
      - adjustableColumn3 : ad3        (int)           [create,edit]
          Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are
          not exactly three columns.
    
      - adjustableColumn4 : ad4        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly four columns.
    
      - adjustableColumn5 : ad5        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly five columns.
    
      - adjustableColumn6 : ad6        (int)           [create,edit]
          Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not
          exactly six columns.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command string executed when slider value changes.
    
      - columnAlign : cal              (int, unicode)  [create,edit]
          Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type
          for the specified column.
    
      - columnAlign2 : cl2             (unicode, unicode) [create,edit]
          Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right,
          and center.
    
      - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 3 columns.  Ignored if there are not exactly 3 columns. Valid values are left, right,
          and center.
    
      - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 4 columns.  Ignored if there are not exactly 4 columns. Valid values are left, right,
          and center.
    
      - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 5 columns.  Ignored if there are not exactly 5 columns. Valid values are left, right,
          and center.
    
      - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the text alignment for all 6 columns.  Ignored if there are not exactly 6 columns. Valid values are left, right,
          and center.
    
      - columnAttach : cat             (int, unicode, int) [create,edit]
          Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies
          column attachment types and offets.
    
      - columnAttach2 : ct2            (unicode, unicode) [create,edit]
          Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right,
          and both.
    
      - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 3 columns. Ignored if there are not exactly 3 columns. Valid values are left, right,
          and both.
    
      - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 4 columns. Ignored if there are not exactly 4 columns. Valid values are left, right,
          and both.
    
      - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 5 columns. Ignored if there are not exactly 5 columns. Valid values are left, right,
          and both.
    
      - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
          Sets the attachment type for all 6 columns. Ignored if there are not exactly 6 columns. Valid values are left, right,
          and both.
    
      - columnOffset2 : co2            (int, int)      [create,edit]
          This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the
          -columnAttach2 flag.  Ignored if there are not exactly two columns.
    
      - columnOffset3 : co3            (int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the
          -columnAttach3 flag.  Ignored if there are not exactly three columns.
    
      - columnOffset4 : co4            (int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the
          -columnAttach4 flag.  Ignored if there are not exactly four columns.
    
      - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the
          -columnAttach5 flag.  Ignored if there are not exactly five columns.
    
      - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
          This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.
          It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the
          -columnAttach6 flag.  Ignored if there are not exactly six columns.
    
      - columnWidth : cw               (int, int)      [create,edit]
          Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies
          the column (1 based index) and the second parameter specifies the width.
    
      - columnWidth1 : cw1             (int)           [create,edit]
          Sets the width of the first column. Ignored if there is not exactly one column.
    
      - columnWidth2 : cw2             (int, int)      [create,edit]
          Sets the column widths of both columns. Ignored if there are not exactly two columns.
    
      - columnWidth3 : cw3             (int, int, int) [create,edit]
          Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
    
      - columnWidth4 : cw4             (int, int, int, int) [create,edit]
          Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
    
      - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
          Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
    
      - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
          Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - hsvValue : hsv                 (float, float, float) [create,query,edit]
          Color in hue, saturation, and value format.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - label : l                      (unicode)       [create,query,edit]
          Label text for the group.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - rgbValue : rgb                 (float, float, float) [create,query,edit]
          Color in red, green, and blue format.
    
      - rowAttach : rat                (int, unicode, int) [create,edit]
          Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment
          types and offsets for the entire row.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorInputWidgetGrp`
    """

    pass


def workspacePanel(*args, **kwargs):
    """
    This is not a real description - just to get docs to build.
    
    Flags:
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - mainWindow : mw                (bool)          [create,query,edit]
          Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first
          created window becomes the main window.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspacePanel`
    """

    pass


def grabColor(*args, **kwargs):
    """
    This command changes the cursor and enters a modal state which will be exited by pressing a mouse button.  The color
    component values of the pixel below the cursor at the time of the button press are returned. Three float values
    representing the color components of the pixel below the cursor.  If no flags are specified then the default is to
    return the red, green and blue color components.
    
    Flags:
      - hsvValue : hsv                 (bool)          [create]
          The 3 returned float values will specify the hue, saturation and value color components.
    
      - rgbValue : rgb                 (bool)          [create]
          The 3 returned float values will specify the red, green and blue color components.                  Flag can have
          multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.grabColor`
    """

    pass


def separator(*args, **kwargs):
    """
    This command creates a separator widget in a variety of drawing styles.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontal : hr                (bool)          [create,query]
          Specify the orientation of the separator.  True for horizontal and false for vertical.  Only valid when style equals
          single.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - style : st                     (unicode)       [create,query,edit]
          Specify the style of the separator.  Valid values are none, single, in, outand shelf.  Note: the values double,
          singleDashand doubleDashand no longer supported.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.separator`
    """

    pass


def webBrowser(*args, **kwargs):
    """
    This command is obsolete and will be removed in next version of Maya. The internal web browser of Maya has been replaced
    by a plug-in which allows your own browser to connect with Maya. Please refer help for information on how to setup
    communication of Maya with external web browser application.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - back : bk                      (bool)          []
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - command : c                    (unicode)       []
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - find : f                       (unicode)       []
    
      - forward : fwd                  (bool)          []
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - home : hm                      (bool)          []
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - matchCase : mc                 (bool)          []
    
      - matchWholeWord : mww           (bool)          []
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - openURL : url                  (unicode)       []
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - reload : rl                    (bool)          []
    
      - searchForward : sf             (bool)          []
    
      - stop : st                      (bool)          []
    
      - urlChangedCb : ucc             (unicode)       []
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
      - wrap : wr                      (bool)          []
    
    
    Derived from mel command `maya.cmds.webBrowser`
    """

    pass


def paneLayout(*args, **kwargs):
    """
    This command creates a pane layout.  A pane layout may have any number of children but at any one time only certain
    children may be visible, as determined by the current layout configuration.  For example a horizontally split pane shows
    only two children, one on top of the other and a visible separator between the two.  The separator may be moved to vary
    the size of each pane.  Various other pane configurations are available and all display a moveable separator that define
    the size of each pane in the layout.
    
    Flags:
      - activeFrameThickness : aft     (int)           [create,query,edit]
          The thickness of the frame drawn around the active frame. Specify an integer value greater than or equal to 0.
    
      - activePane : ap                (unicode)       [create,query,edit]
          The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the
          flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is
          the full or short name of the child control.
    
      - activePaneIndex : api          (int)           [create,query,edit]
          The active pane index.  The active pane has a colored border surrounding it.  Only one pane may be active at any one
          time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously
          active pane.  The argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered
          clockwise beginning with the pane in the top left corner of the layout.  If any other index is specified then the
          current active pane is deactivated.
    
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - childArray : ca                (bool)          [query]
          Returns a string array of the names of the layout's immediate children.
    
      - configuration : cn             (unicode)       [create,query,edit]
          Set the layout configuration for the panes.  Valid values are: single, horizontal2, vertical2, horizontal3, vertical3,
          top3, left3, bottom3, right3, horizontal4, vertical4, top4, left4, bottom4, right4, quad
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfChildren : nch         (bool)          [query]
          Returns in an int the number of immediate children of the layout.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - numberOfVisiblePanes : nvp     (bool)          [query]
          Return the number of panes visible for the present configuration.
    
      - pane1 : p1                     (bool)          [query]
    
      - pane2 : p2                     (bool)          [query]
    
      - pane3 : p3                     (bool)          [query]
    
      - pane4 : p4                     (bool)          [query]
          Return the name of the control in the respective pane.
    
      - paneSize : ps                  (int, int, int) [create,query,edit]
          The size of a pane in the current pane layout configuration.  The first argument specifies the pane index and is an
          integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the
          pane in the top left corner of the layout.  The width and height of the pane are specified by the last two arguments.
          Both are integer values and they indicate the percentage of the total pane layout size rather that the number of pixels.
    
      - paneUnderPointer : pup         (bool)          [query]
          Return the name of the child occupying the pane that the pointer is currently over.  An empty string is returned if the
          pointer is not over a pane.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - separatorMovedCommand : smc    (script)        [create,edit]
          This command executed when the pane separators are moved.
    
      - separatorThickness : st        (int)           [create,query,edit]
          The thickness of the separators between the panes. Specify an integer value greater than 0. This flag has no effect on
          Windows systems.
    
      - setPane : sp                   (unicode, int)  [create,edit]
          This flag allows you to put a child of this layout in a particular pane.  The first argument is the full or short name
          of the control.  The second argument is an integer value ranging from 1 to 4.  Panes for any particular configuration
          are numbered clockwise beginning with the pane in the top left corner of the layout.
    
      - staticHeightPane : shp         (int)           [create,edit]
          Set a pane to have a static height, i.e. its height will not change when the layout is dynamically resized. Only one
          pane can be set to have a static height at one time. This state will be retained even if another child is switched into
          the pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is
          changed.
    
      - staticWidthPane : swp          (int)           [create,edit]
          Set a pane to have a static width, i.e. its width will not change when the layout is dynamically resized. Only one pane
          can be set to have a static width at one time. This state will be retained even if another child is switched into the
          pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is changed.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.paneLayout`
    """

    pass


def cmdScrollFieldExecuter(*args, **kwargs):
    """
    A script editor executer control used to issue script commands to Maya.
    
    Flags:
      - annotation : ann               (unicode)       []
    
      - appendText : at                (unicode)       [create,edit]
          Appends text to the end of this field.
    
      - autoCloseBraces : acb          (bool)          [create,query,edit]
          Specifies whether a closing brace should automatically be added when hitting enter after an opening brace. (default on)
    
      - backgroundColor : bgc          (float, float, float) []
    
      - clear : clr                    (bool)          [create,edit]
          Clears the field.
    
      - commandCompletion : cco        (bool)          [create,query,edit]
          Enable/disable command completion
    
      - copySelection : cp             (bool)          [create,edit]
          Copies the current selection from this field.
    
      - currentLine : cl               (int)           [create,query,edit]
          Sets/returns the current line which the cursor is on.
    
      - cutSelection : ct              (bool)          [create,edit]
          Cuts the current selection from this field.
    
      - defineTemplate : dt            (unicode)       []
    
      - docTag : dtg                   (unicode)       []
    
      - dragCallback : dgc             (callable)      []
    
      - dropCallback : dpc             (callable)      []
    
      - enable : en                    (bool)          []
    
      - enableBackground : ebg         (bool)          []
    
      - execute : exc                  (bool)          [create,edit]
          Executes the current selection.  If there is no selection, all text is executed.
    
      - executeAll : exa               (bool)          [create,edit]
          Executes all text.
    
      - exists : ex                    (bool)          []
    
      - filterKeyPress : fkp           (script)        [create,query,edit]
          Sets a script which will be called to handle key-press events. The function should have the following signature: proc
          int filterKeyPress(int $modifiers, string $key)modifiers: a bit mask where Shift is bit 1, Ctrl is bit 3, Alt is bit 4,
          and bit 5 is the 'Windows' key on Windows keyboards and the Command key on Mac keyboards. key: Specifies what key was
          pressed. The key is either a single ascii character or one of the keyword strings for the special keyboard characters.
          For example: Up, Down, Right, Left, Home, End, Page_Up, Page_Down, Insert Return, Space F1 to F12 The function should
          return 1 to indicate that they key event has been handled, and 0 to indicate that it has not been handled.
    
      - fullPathName : fpn             (bool)          []
    
      - hasFocus : hf                  (bool)          [query]
          Whether this control is currently in focus.
    
      - hasSelection : hsl             (bool)          [query]
          Whether this control currently has a selection or not.
    
      - height : h                     (int)           []
    
      - highlightColor : hlc           (float, float, float) []
    
      - indentSelection : isl          (bool)          []
    
      - insertText : it                (unicode)       [create,edit]
          Inserts the specified text into the position under the cursor, replacing any currently selected text. The selection and
          cursor position can be set using the selectflag. Appends text to the end of this field.
    
      - isObscured : io                (bool)          []
    
      - load : ld                      (bool)          [create,edit]
          Prompts the user for a script to load into this field.
    
      - loadContents : ldc             (unicode)       [create,edit]
          Loads the contents of the specified filename into this field.  The path and extension for this filename is provided
          internally.  This command is only intended for loading the contents of this executer field from a previous instance of
          this executer field.
    
      - manage : m                     (bool)          []
    
      - noBackground : nbg             (bool)          []
    
      - numberOfLines : nl             (int)           [query]
          Returns the total number of lines in the document.
    
      - numberOfPopupMenus : npm       (bool)          []
    
      - objectPathCompletion : opc     (bool)          [create,query,edit]
          Enable/disable path completion
    
      - parent : p                     (unicode)       []
    
      - pasteSelection : pst           (bool)          [create,edit]
          Pastes text into this field at the current caret position.
    
      - popupMenuArray : pma           (bool)          []
    
      - preventOverride : po           (bool)          []
    
      - receiveFocusCommand : rfc      (callable)      []
    
      - redo : rd                      (bool)          [create,edit]
          Redo the last operation.
    
      - removeStoredContents : rsc     (unicode)       [create,edit]
          Removes the stored contents of this field with the specified filename.  The path and extension for the file is provided
          internally.  This command is only intended for removing previously stored contens of this executer field.
    
      - replaceAll : rpa               (unicode, unicode) [create,edit]
          Replaces all instances of the first string in the field text with the second string.  The case sensitivity of this
          operation is set with the -searchMatchCaseflag.
    
      - saveSelection : sv             (unicode)       [create,edit]
          Prompts to save the current selection to a file.  The default filename prompt will be prepended with the given string.
    
      - saveSelectionToShelf : svs     (bool)          [create,edit]
          Prompts to save the current selection to an item in the shelf.
    
      - searchAndSelect : sas          (bool)          [query]
          Searches for (and selects) the sepecified search string using the specified search options.
    
      - searchDown : sd                (bool)          [create,query,edit]
          Specifies whether to search from the cursor down, or up.
    
      - searchMatchCase : smc          (bool)          [create,query,edit]
          Specifies whether the search is to be case sensitive or not.
    
      - searchString : ss              (unicode)       [create,query,edit]
          Specifies the string to search for.
    
      - searchWraps : sw               (bool)          [create,query,edit]
          Specifies whether the search should wrap around.
    
      - select : sl                    (int, int)      [create,edit]
          Selects text within a specified range.
    
      - selectAll : sla                (bool)          [create,edit]
          Selects all text.
    
      - selectedText : slt             (bool)          [query]
          The text in the current selection range.
    
      - showLineNumbers : sln          (bool)          [create,query,edit]
          Shows/hides the line numbes column.
    
      - showTooltipHelp : sth          (bool)          [create,query,edit]
          Enable/disable tooltips in the command execution window
    
      - source : src                   (bool)          [create,edit]
          Prompts the user for a script to source (execute without loading).
    
      - sourceType : st                (unicode)       [create,query]
          Sets the source type for this command executer field. Valid values are mel(enabled by default) and python.
    
      - spacesPerTab : spt             (int)           [create,query,edit]
          Specifies the number of spaces equivalent to one tab stop. (default 4)
    
      - storeContents : stc            (unicode)       [create,edit]
          If the provided string is a fully specified file path, then attempts to store the contents of this field to that path.
          Otherwise, uses the provided string as a filename only and uses an internally generated path and extension for the file,
          as used by the -loadContents and -removeStoredContents flags. In both cases, a new unique filename will be generated if
          the specified name exists. Returns the filename of the file saved upon completion, and an empty string otherwise.
    
      - tabsForIndent : tfi            (bool)          [create,query,edit]
          Specifies whether tab characters should be inserted when indenting. (default on)
    
      - text : t                       (unicode)       [create,query,edit]
          Replaces the field text with the given string.
    
      - textLength : tl                (bool)          [query]
          The number of characters in this text field.
    
      - undo : ud                      (bool)          [create,edit]
          Undo the last operation.                  Flag can have multiple arguments, passed either as a tuple or a list.
    
      - unindentSelection : usl        (bool)          []
    
      - useTemplate : ut               (unicode)       []
    
      - visible : vis                  (bool)          []
    
      - visibleChangeCommand : vcc     (callable)      []
    
      - width : w                      (int)           []
    
    
    Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
    """

    pass


def intScrollBar(*args, **kwargs):
    """
    Create a scroll bar control that accepts only integer values and is bound by a minimum and maximum value.  The scroll
    bar displays a marker indicating the current value of the scroll bar relative to it's minimum and maximum values.  Click
    and drag the marker or on the scroll bar itself to change the current value.
    
    Flags:
      - annotation : ann               (unicode)       [create,query,edit]
          Annotate the control with an extra string value.
    
      - backgroundColor : bgc          (float, float, float) [create,query,edit]
          The background color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless
          enableBackground is also specified with a false value.
    
      - changeCommand : cc             (script)        [create,edit]
          Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Add a documentation flag to the control.  The documentation flag has a directory structure like hierarchy. Eg. -dt
          render/multiLister/createNode/material
    
      - dragCallback : dgc             (script)        [create,edit]
          Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:
          global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that
          is transferred to the drop site. By convention the first string in the array describes the user settable message type.
          Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers
          CTL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTL, 3 == CTL + SHIFT. In Python, it is similar,
          but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the
          argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The
          values of these arguments are the same as those for the MEL version above. The other way to specify the callback in
          Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the
          standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y,
          modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(x)d %(y)d %(modifiers)d'
    
      - dragCommand : dc               (script)        [create,edit]
          Command executed when the value changes by dragging the scroll bar's value marker.
    
      - dropCallback : dpc             (script)        [create,edit]
          Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the
          callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int
          $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs
          array describes the user defined message type. Controls that are application defined drop sites may ignore the callback.
          $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify
          the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python
          callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of
          these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to
          specify a string to be executed.  In that case, the string will have the values substituted into it via the standard
          Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages,
          x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print
          '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
    
      - enable : en                    (bool)          [create,query,edit]
          The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and
          the control will appear dimmed or greyed-out indicating it is disabled.
    
      - enableBackground : ebg         (bool)          [create,query,edit]
          Enables the background color of the control.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - fullPathName : fpn             (bool)          [query]
          Return the full path name of the widget, which includes all the parents
    
      - height : h                     (int)           [create,query,edit]
          The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    
      - highlightColor : hlc           (float, float, float) [create,query,edit]
          The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each
          component ranges in value from 0.0 to 1.0.
    
      - horizontal : hr                (bool)          [create,query]
          Orientation of the scroll bar.  This flag is true by default which corresponds to a horizontally oriented scroll bar.
    
      - isObscured : io                (bool)          [query]
          Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if
          it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's
          window is invisible or iconified.
    
      - largeStep : ls                 (int)           [create,query,edit]
          Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.
    
      - manage : m                     (bool)          [create,query,edit]
          Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All
          controls are created managed by default.
    
      - maxValue : max                 (int)           [create,query,edit]
          Upper limit of the scroll bar.
    
      - minValue : min                 (int)           [create,query,edit]
          Lower limit of the scroll bar.
    
      - noBackground : nbg             (bool)          [create,edit]
          Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the
          background should be drawn.  The state of this flag is inherited by children of this control.
    
      - numberOfPopupMenus : npm       (bool)          [query]
          Return the number of popup menus attached to this control.
    
      - parent : p                     (unicode)       [create,query]
          The parent layout for this control.
    
      - popupMenuArray : pma           (bool)          [query]
          Return the names of all the popup menus attached to this control.
    
      - preventOverride : po           (bool)          [create,query,edit]
          If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
    
      - step : s                       (int)           [create,query,edit]
          Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.
    
      - value : v                      (int)           [create,query,edit]
          Value of the scroll bar.
    
      - visible : vis                  (bool)          [create,query,edit]
          The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is
          also dependent on the visible state of its parent layout(s).
    
      - visibleChangeCommand : vcc     (script)        [create,query,edit]
          Command that gets executed when visible state of the control changes.
    
      - width : w                      (int)           [create,query,edit]
          The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
          Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.intScrollBar`
    """

    pass


def vectorFieldGrp(*args, **kwargs):
    pass


def setMenuMode(*args, **kwargs):
    """
    Optionally sets a new Menu Mode for the menu bar in the main Maya window. Returns the current Menu Mode, and if a new
    one is specified, then the previous Menu Mode is returned. Note that due to recent changes to the menu set architecture
    (8.0+), this function now takes a menu set as a parameter instead of a label.
    
    
    Derived from mel command `maya.cmds.setMenuMode`
    """

    pass


def componentEditor(*args, **kwargs):
    """
    This command creates a new component editor in the current layout.
    
    Flags:
      - control : ctl                  (bool)          [query]
          Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus.
          Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.
    
      - defineTemplate : dt            (unicode)       [create]
          Puts the command in a mode where any other flags and args are parsed and added to the command template specified in the
          argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set
          as the current template.
    
      - docTag : dtg                   (unicode)       [create,query,edit]
          Attaches a tag to the editor.
    
      - exists : ex                    (bool)          [create]
          Returns whether the specified object exists or not. Other flags are ignored.
    
      - filter : f                     (unicode)       [create,query,edit]
          Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the
          main list of the editor.
    
      - floatField : ff                (unicode)       [create,query,edit]
          assigns a float field that the component editor will use for editing groups of values.
    
      - floatSlider : fs               (unicode)       [create,query,edit]
          assigns a float slider that the component editor will use for editing groups of values.
    
      - forceMainConnection : fmc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in
          that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the
          -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
    
      - hidePathName : hpn             (bool)          [create,query,edit]
          Hides path name of displayed element.  By default this flag is set to false.
    
      - hideZeroColumns : hzc          (bool)          [create,query,edit]
          Hides columns whose elements are all zero.  By default this flag is set to false.
    
      - highlightConnection : hlc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all
          editors have a highlight list. For those that do, it is a secondary selection list.
    
      - lockInput : li                 (bool)          [create,query,edit]
          Prevents the editor from responding to changes in the active list. Independent of selection connection.
    
      - lockMainConnection : lck       (bool)          [create,edit]
          Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor.
          Further changes to the original mainConnection are ignored.
    
      - mainListConnection : mlc       (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will
          only display items contained in the selectionConnection object.
    
      - newTab : nt                    (unicode, unicode, unicode) [create,edit]
          Creates a new tab, named by the first argument, based on an existing tab, given as the second argument using elements
          from a set, given in the third argument
    
      - operationCount : oc            (bool)          [query]
          returns the total number of operation types known to the component editor.
    
      - operationLabels : ol           (bool)          [query]
          returns a string array containing the names for all operation types known to the editor.
    
      - operationType : ot             (int)           [create,query,edit]
          Tells the editor which of its known operation types it should be performing. This is a 0-based index.
    
      - panel : pnl                    (unicode)       [create,query]
          Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it
          will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is
          deleted.
    
      - parent : p                     (unicode)       [create,query,edit]
          Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
    
      - precision : pre                (int)           [create,query,edit]
          Specifies the maximum number of digits displayed to the right of the decimal place.  Can be 0 to 20.
    
      - removeTab : rt                 (unicode)       [edit]
          Removes the tab based on the set provided
    
      - selected : sl                  (bool)          [query]
          Returns a list of strings, containing the labels of the currently selected columns
    
      - selectionConnection : slc      (unicode)       [create,query,edit]
          Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the
          user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes
          changes, the editor updates to show the changes.
    
      - setOperationLabel : sol        (int, unicode)  [edit]
          uses the string as the new name for the existing operation type specified by the integer index. Note that there is no
          messaging system which allows UI to be informed of changes made by this flag.
    
      - showObjects : so               (bool)          [create]
          Restricts the display to columns that are in the current active list.
    
      - showSelected : ss              (bool)          [create,edit]
          Restricts the display to those columns which are currently selected. By default this flag is set to false, so all
          columns are selected. The results from this flag obey the current -hideZeroColumns setting.
    
      - sortAlpha : sa                 (bool)          [create,query,edit]
          Controls alphabetical (true), or hierarchical sorting of columns
    
      - stateString : sts              (bool)          [query]
          Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned
          command string uses the string variable $editorName in place of a specific name.
    
      - unParent : up                  (bool)          [create,edit]
          Specifies that the editor should be removed from its layout. This cannot be used in query mode.
    
      - unlockMainConnection : ulk     (bool)          [create,edit]
          Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic
          updates.
    
      - updateMainConnection : upd     (bool)          [create,edit]
          Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
    
      - useTemplate : ut               (unicode)       [create]
          Forces the command to use a command template other than the current one.                  Flag can have multiple
          arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.componentEditor`
    """

    pass



mel = None

scriptTableCmds = {}

melGlobals = {}

_logger = None

_commandsToUITypes = {}

thisModuleCmd = "import pymel.core.windows; import sys; sys.modules['pymel.core.windows']"


